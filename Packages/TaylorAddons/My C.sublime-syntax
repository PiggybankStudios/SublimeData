%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: My C Syntax
file_extensions:
  - c
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.c

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while|new|delete'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum'
  microsoft_types: '__int8|__int16|__int32|__int64'
  windows_types: 'APIENTRY|ATOM|BOOL|BOOLEAN|BYTE|CALLBACK|CCHAR|CHAR|COLORREF|CONST|DWORD|DWORDLONG|DWORD_PTR|DWORD32|DWORD64|FLOAT|HACCEL|HALF_PTR|HANDLE|HBITMAP|HBRUSH|HCOLORSPACE|HCONV|HCONVLIST|HCURSOR|HDC|HDDEDATA|HDESK|HDROP|HDWP|HENHMETAFILE|HFILE|HFONT|HGDIOBJ|HGLOBAL|HHOOK|HICON|HINSTANCE|HKEY|HKL|HLOCAL|HMENU|HMETAFILE|HMODULE|HMONITOR|HPALETTE|HPEN|HRESULT|HRGN|HRSRC|HSZ|HWINSTA|HWND|INT|INT_PTR|INT8|INT16|INT32|INT64|LANGID|LCID|LCTYPE|LGRPID|LONG|LONGLONG|LONG_PTR|LONG32|LONG64|LPARAM|LPBOOL|LPBYTE|LPCOLORREF|LPCSTR|LPCTSTR|LPCVOID|LPCWSTR|LPDWORD|LPHANDLE|LPINT|LPLONG|LPSTR|LPTSTR|LPVOID|LPWORD|LPWSTR|LRESULT|PBOOL|PBOOLEAN|PBYTE|PCHAR|PCSTR|PCTSTR|PCWSTR|PDWORD|PDWORDLONG|PDWORD_PTR|PDWORD32|PDWORD64|PFLOAT|PHALF_PTR|PHANDLE|PHKEY|PINT|PINT_PTR|PINT8|PINT16|PINT32|PINT64|PLCID|PLONG|PLONGLONG|PLONG_PTR|PLONG32|PLONG64|POINTER_32|POINTER_64|POINTER_SIGNED|POINTER_UNSIGNED|PSHORT|PSIZE_T|PSSIZE_T|PSTR|PTBYTE|PTCHAR|PTSTR|PUCHAR|PUHALF_PTR|PUINT|PUINT_PTR|PUINT8|PUINT16|PUINT32|PUINT64|PULONG|PULONGLONG|PULONG_PTR|PULONG32|PULONG64|PUSHORT|PVOID|PWCHAR|PWORD|PWSTR|QWORD|SC_HANDLE|SC_LOCK|SERVICE_STATUS_HANDLE|SHORT|SIZE_T|SSIZE_T|TBYTE|TCHAR|UCHAR|UHALF_PTR|UINT|UINT_PTR|UINT8|UINT16|UINT32|UINT64|ULONG|ULONGLONG|ULONG_PTR|ULONG32|ULONG64|UNICODE_STRING|USHORT|USN|VOID|WCHAR|WINAPI|WORD'
  stdint: 'u8|u16|u32|u64|i8|i16|i32|i64|r32|r64|bool32|flags8|int8|int16|int32|int64|uint8|uint16|uint32|uint64|real32|real64|byte|byte_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t'
  custom_types: 'AppClosing_f|AppData_t|AppGetSoundSamples_f|AppGetVersion_f|AppInitialize_f|AppInput_t|AppMemory_t|AppOutput_t|AppReloaded_f|AppUpdate_f|AppendFile_f|Axis_t|BaudRate_t|ButtonModifier_t|ButtonState_t|Buttons_t|COMMTIMEOUTS|CloseComPort_f|CloseFile_f|CloseProgramInstance_f|Color_t|ComError_t|ComPortIndex_t|ComPort_t|ComSettings_t|ConfigError_t|CopyFromClipboard_f|CopyToClipboard_f|CursorType_t|DCB|DayOfWeek_t|DebugPrintLine_f|DebugPrint_f|DebugWriteLine_f|DebugWrite_f|DiffPart_t|Direction2D_t|Direction_t|EasingStyle_t|FILE|FILETIME|FT_Bitmap|FT_Face|FT_GlyphSlot|FT_Glyph_Metrics|FT_Library|FileInfo_t|FontCharInfo_t|Font_t|FrameBuffer_t|FreeFileMemory_f|GLFWcursor|GLFWimage|GLFWvidmode|GLFWwindow|GLenum|GLint|GLubyte|GLuint|GetComPortList_f|GetProgramStatus_f|GlobalConfig_t|HeapAllocationHeader_t|JsonData_t|LineList_t|Line_t|LinkHeader_t|LinkedList_t|LoadedApp_t|MainMenuButtons_t|Mat4_t|Matrix4_t|MemoryArenaType_t|MemoryArena_t|MenuHandler_t|MenuRender_f|MenuUpdate_f|Menu_t|Month_t|OpenComPort_f|OpenFile_f|OpenFile_t|PROCESS_INFORMATION|Parity_t|PartsList_t|PlatformConfig_t|PlatformInfo_t|PlatformType_t|ProgramInstance_t|ProgramStatus_t|ReadComPort_f|ReadEntireFile_f|ReadProgramOutput_f|RealTime_t|Rectangle_t|RegexList_t|Regex_t|RenderState_t|SECURITY_ATTRIBUTES|STARTUPINFO|Shader_t|StartProgramInstance_f|StatusMessage_t|StopBits_t|TempArenaHeader_t|TextLocation_t|Texture_t|TimeUnit_t|UiElements_t|Vec2_t|Vec2i_t|Vec3_t|Vec3i_t|Vec4_t|Version_t|VertexBuffer_t|Vertex_t|WNDCLASSEX|WPARAM|WriteComPort_f|WriteEntireFile_f|dmp_diff|dmp_diff_callback|dmp_operation_t|dmp_options|dmp_patch|jsmn_parser|jsmntok_t|jsmntype_t|m4|rec|stbtt_bakedchar|v2|v2i|v3|v3i|v4|va_list'
  custom_constants: 'APPLICATION_DLL_NAME|APPLICATION_DLL_TEMP_NAME|APP_VERSION_BUILD|APP_VERSION_MAJOR|APP_VERSION_MINOR|Axis_None|Axis_W|Axis_X|Axis_Y|Axis_Z|BANNER_EXPAND_SPEED|BaudRate_110|BaudRate_115200|BaudRate_1200|BaudRate_128000|BaudRate_14400|BaudRate_19200|BaudRate_2400|BaudRate_256000|BaudRate_300|BaudRate_38400|BaudRate_4800|BaudRate_57600|BaudRate_600|BaudRate_9600|Button_0|Button_1|Button_2|Button_3|Button_4|Button_5|Button_6|Button_7|Button_8|Button_9|Button_A|Button_Alt|Button_B|Button_Backspace|Button_C|Button_CapsLock|Button_CloseBracket|Button_Colon|Button_ComPort|Button_Comma|Button_ConsoleSettings|Button_Control|Button_D|Button_Delete|Button_Down|Button_E|Button_End|Button_Enter|Button_Escape|Button_F|Button_F1|Button_F10|Button_F11|Button_F12|Button_F2|Button_F3|Button_F4|Button_F5|Button_F6|Button_F7|Button_F8|Button_F9|Button_G|Button_H|Button_Help|Button_Home|Button_I|Button_Insert|Button_J|Button_K|Button_L|Button_Left|Button_M|Button_Minus|Button_N|Button_O|Button_OpenBracket|Button_P|Button_PageDown|Button_PageUp|Button_Period|Button_Pipe|Button_Plus|Button_Q|Button_QuestionMark|Button_Quote|Button_R|Button_Right|Button_S|Button_Settings|Button_Shift|Button_Space|Button_T|Button_Tab|Button_Tilde|Button_U|Button_Up|Button_V|Button_W|Button_X|Button_Y|Button_Z|Buttons_NumButtons|CBR_110|CBR_115200|CBR_1200|CBR_128000|CBR_14400|CBR_19200|CBR_2400|CBR_256000|CBR_300|CBR_38400|CBR_4800|CBR_57600|CBR_600|CBR_9600|CF_TEXT|CLEAR_BUTTON_HEIGHT|CLEAR_BUTTON_WIDTH|COLOR_WINDOW|COM_MENU_INNER_PADDING|COM_MENU_OUTER_PADDING|COM_MENU_TAB_HEIGHT|COM_MENU_TAB_PADDING|CONNECT_BUTTON_HEIGHT|CONNECT_BUTTON_WIDTH|CONTEXT_MENU_PADDING|CREATE_ALWAYS|CS_HREDRAW|CS_VREDRAW|CW_USEDEFAULT|Color_AliceBlue|Color_AntiqueWhite|Color_Aquamarine|Color_Azure|Color_Banana|Color_Beet|Color_Beige|Color_Bisque|Color_Black|Color_BlancheDalmond|Color_Blue|Color_BlueViolet|Color_Brick|Color_Brown|Color_BurlyWood|Color_BurnTumber|Color_BurntSienna|Color_CadetBlue|Color_CadmiumOrange|Color_CadmiumYellow|Color_Carrot|Color_Chartreuse|Color_Chocolate|Color_Cobalt|Color_CobaltGreen|Color_ColdGrey|Color_Coral|Color_CornSilk|Color_CornflowerBlue|Color_Crimson|Color_Cyan|Color_DarkCyan|Color_DarkGoldenRod|Color_DarkGray|Color_DarkGreen|Color_DarkKhaki|Color_DarkOliveGreen|Color_DarkOrange|Color_DarkOrchid|Color_DarkRed|Color_DarkSalmon|Color_DarkSeaGreen|Color_DarkSlateBlue|Color_DarkSlateGray|Color_DarkTurquoise|Color_DarkViolet|Color_DeepPink|Color_DeepSkyBlue|Color_DimGray|Color_DodgerBlue|Color_EggShell|Color_EmeraldGreen|Color_FireBrick|Color_Flesh|Color_FloralWhite|Color_ForestGreen|Color_Gainsboro|Color_GhostWhite|Color_Gold|Color_GoldenRod|Color_Gray|Color_Green|Color_GreenYellow|Color_HalfTransparent|Color_HalfTransparentBlack|Color_Honeydew|Color_HotPink|Color_IndianRed|Color_Indigo|Color_Ivory|Color_IvoryBlack|Color_Khaki|Color_Lavender|Color_LawnGreen|Color_LemonChiffon|Color_LightBlue|Color_LightCoral|Color_LightCyan|Color_LightGoldenRod|Color_LightGreen|Color_LightGrey|Color_LightPink|Color_LightSalmon|Color_LightSeaGreen|Color_LightSkyBlue|Color_LightSlateBlue|Color_LightSlateGray|Color_LightSteelBlue|Color_LightYellow|Color_Lime|Color_LimeGreen|Color_Linen|Color_Magenta|Color_ManganeseBlue|Color_Maroon|Color_MediumOrchid|Color_MediumPurple|Color_MediumSeaGreen|Color_MediumSlateBlue|Color_MediumSpringGreen|Color_MediumTurquoise|Color_MediumVioletRed|Color_Melon|Color_MidnightBlue|Color_Mint|Color_MintCream|Color_MistyRose|Color_Moccasin|Color_NavajoWhite|Color_Navy|Color_OldLace|Color_Olive|Color_OliveDrab|Color_Orange|Color_OrangeRed|Color_Orchid|Color_PaleGoldenRod|Color_PaleGreen|Color_PaleTurquoise|Color_PaleVioletRed|Color_PapayaWhip|Color_PeachPuff|Color_Peacock|Color_Peru|Color_Pink|Color_Plum|Color_PowderBlue|Color_Purple|Color_Raspberry|Color_RawSienna|Color_Red|Color_RosyBrown|Color_RoyalBlue|Color_SaddleBrown|Color_Salmon|Color_SandyBrown|Color_SapGreen|Color_SeaGreen|Color_Seashell|Color_Sepia|Color_Sienna|Color_Silver|Color_SkyBlue|Color_SlateBlue|Color_SlateGray|Color_Snow|Color_SpringGreen|Color_SteelBlue|Color_Sunlight|Color_Tan|Color_Teal|Color_Thistle|Color_Tomato|Color_TransparentBlack|Color_TransparentWhite|Color_Turquoise|Color_TurquoiseBlue|Color_Violet|Color_VioletRed|Color_WarmGrey|Color_Wheat|Color_White|Color_WhiteSmoke|Color_Yellow|Color_YellowGreen|ComError_Generic|ComError_Other|ComPort_1|ComPort_10|ComPort_11|ComPort_12|ComPort_13|ComPort_14|ComPort_15|ComPort_16|ComPort_17|ComPort_18|ComPort_19|ComPort_2|ComPort_20|ComPort_21|ComPort_22|ComPort_23|ComPort_24|ComPort_3|ComPort_4|ComPort_5|ComPort_6|ComPort_7|ComPort_8|ComPort_9|ConfigError_ColorDoesntExist|ConfigError_ExpectedArray|ConfigError_InvalidBoolean|ConfigError_InvalidNumber|ConfigError_None|ConfigError_NumberOutOfRange|ConfigError_TokenNotFound|ConfigError_WrongNumberOfArrayElements|Cursor_Default|Cursor_Pointer|Cursor_ResizeHorizontal|Cursor_ResizeVertical|Cursor_Text|DAYS_PER_4YEARS|DEBUG|DMP_DIFF_DELETE|DMP_DIFF_EQUAL|DMP_DIFF_INSERT|DMP_VERSION|DTR_CONTROL_DISABLE|DayOfWeek_Friday|DayOfWeek_Monday|DayOfWeek_Saturday|DayOfWeek_Sunday|DayOfWeek_Thursday|DayOfWeek_Tuesday|DayOfWeek_Wednesday|Direction2D_All|Direction2D_Down|Direction2D_Left|Direction2D_None|Direction2D_Right|Direction2D_Up|Direction_All|Direction_Backward|Direction_Down|Direction_Forward|Direction_Left|Direction_None|Direction_Right|Direction_Up|EVENPARITY|EV_ERR|EV_RXCHAR|EasingStyle_BackIn|EasingStyle_BackInOut|EasingStyle_BackOut|EasingStyle_BounceIn|EasingStyle_BounceInOut|EasingStyle_BounceOut|EasingStyle_CircularIn|EasingStyle_CircularInOut|EasingStyle_CircularOut|EasingStyle_Count|EasingStyle_CubicIn|EasingStyle_CubicInOut|EasingStyle_CubicOut|EasingStyle_ElasticIn|EasingStyle_ElasticInOut|EasingStyle_ElasticOut|EasingStyle_ExponentialIn|EasingStyle_ExponentialInOut|EasingStyle_ExponentialOut|EasingStyle_Linear|EasingStyle_None|EasingStyle_QuadraticIn|EasingStyle_QuadraticInOut|EasingStyle_QuadraticOut|EasingStyle_QuarticIn|EasingStyle_QuarticInOut|EasingStyle_QuarticOut|EasingStyle_QuinticIn|EasingStyle_QuinticInOut|EasingStyle_QuinticOut|EasingStyle_SineIn|EasingStyle_SineInOut|EasingStyle_SineOut|FILE_ATTRIBUTE_NORMAL|FILE_FLAG_OVERLAPPING|FILE_SHARE_READ|FOREGROUND_BLUE|FOREGROUND_GREEN|FOREGROUND_INTENSITY|FOREGROUND_RED|FT_GLYPH_FORMAT_BITMAP|FT_LOAD_DEFAULT|FT_RENDER_MODE_LCD|FT_RENDER_MODE_LCD_V|FT_RENDER_MODE_LIGHT|FT_RENDER_MODE_MONO|FT_RENDER_MODE_NORMAL|GENERIC_READ|GENERIC_WRITE|GLEW_OK|GLFW_ALPHA_BITS|GLFW_ARROW_CURSOR|GLFW_BLUE_BITS|GLFW_CLIENT_API|GLFW_CONTEXT_VERSION_MAJOR|GLFW_CONTEXT_VERSION_MINOR|GLFW_CROSSHAIR_CURSOR|GLFW_DECORATED|GLFW_DEPTH_BITS|GLFW_DONT_CARE|GLFW_DOUBLEBUFFER|GLFW_FLOATING|GLFW_FOCUSED|GLFW_GREEN_BITS|GLFW_HAND_CURSOR|GLFW_HRESIZE_CURSOR|GLFW_IBEAM_CURSOR|GLFW_OPENGL_ANY_PROFILE|GLFW_OPENGL_API|GLFW_OPENGL_CORE_PROFILE|GLFW_OPENGL_FORWARD_COMPAT|GLFW_OPENGL_PROFILE|GLFW_RED_BITS|GLFW_RESIZABLE|GLFW_SAMPLES|GLFW_STENCIL_BITS|GLFW_VRESIZE_CURSOR|GLOBAL_CONFIG_FILEPATH|GL_ARRAY_BUFFER|GL_BLEND|GL_CLAMP_TO_EDGE|GL_COLOR_ATTACHMENT0|GL_COLOR_BUFFER_BIT|GL_COMPILE_STATUS|GL_DEPTH_ATTACHMENT|GL_DEPTH_BUFFER_BIT|GL_DEPTH_COMPONENT|GL_FALSE|GL_FLOAT|GL_FRAGMENT_SHADER|GL_FRAMEBUFFER|GL_FRAMEBUFFER_COMPLETE|GL_INFO_LOG_LENGTH|GL_LINEAR|GL_LINEAR_MIPMAP_LINEAR|GL_LINK_STATUS|GL_NEAREST|GL_NEAREST_MIPMAP_NEAREST|GL_ONE_MINUS_SRC_ALPHA|GL_RENDERBUFFER|GL_RENDERER|GL_REPEAT|GL_RGBA|GL_SRC_ALPHA|GL_STATIC_DRAW|GL_TEXTURE0|GL_TEXTURE1|GL_TEXTURE_2D|GL_TEXTURE_MAG_FILTER|GL_TEXTURE_MIN_FILTER|GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|GL_TRIANGLES|GL_TRUE|GL_UNSIGNED_BYTE|GL_VERSION|GL_VERTEX_SHADER|GMEM_MOVEABLE|HANDLE_FLAG_INHERIT|IDC_ARROW|IDI_ICON1|IMAGE_ICON|INPUT_ARENA_SIZE|INVALID_HANDLE_VALUE|JSMN_ARRAY|JSMN_ERROR_INVAL|JSMN_ERROR_NOMEM|JSMN_ERROR_PART|JSMN_OBJECT|JSMN_PRIMITIVE|JSMN_STRING|JSMN_UNDEFINED|LineFlag_HasElapsedBanner|LineFlag_MarkBelow|LineFlag_ThickMark|MAIN_MENU_BUTTON_PADDING|MAIN_MENU_HEIGHT|MARKPARITY|MARK_SIZE|MAXDWORD|MAX_COM_PORT_NUM|MAX_JSON_TOKENS|MAX_PATH|MEM_COMMIT|MEM_RESERVE|MENU_DEFAULT_BACKGROUND_COLOR|MENU_DEFAULT_BORDER_COLOR|MENU_DEFAULT_TITLEBAR_COLOR|MENU_DEFAULT_TITLEBAR_SIZE|MIN_BANNER_HEIGHT|Matrix4_Identity|MemoryArenaType_Heap|MemoryArenaType_Linear|MemoryArenaType_Temp|Modifier_Alt|Modifier_CapsLock|Modifier_Ctrl|Modifier_Shift|Month_April|Month_August|Month_December|Month_February|Month_January|Month_July|Month_June|Month_March|Month_May|Month_November|Month_October|Month_September|MouseButton_Left|MouseButton_Middle|MouseButton_Right|NOPARITY|NUM_COLORS|NumBaudRates|NumComPorts|NumCursorTypes|NumMainMenuButtons|NumParityTypes|NumStopBitTypes|ODDPARITY|ONE5STOPBITS|ONESTOPBIT|OPEN_ALWAYS|OPEN_CONSOLE_WINDOW|OPEN_EXISTING|OUTPUT_FILE_NAME|PAGE_READWRITE|PLATFORM_VERSION_BUILD|PLATFORM_VERSION_MAJOR|PLATFORM_VERSION_MINOR|Parity_Even|Parity_Mark|Parity_None|Parity_Odd|Parity_Space|Platform_Linux|Platform_OSX|Platform_Windows|ProgramStatus_Error|ProgramStatus_Finished|ProgramStatus_Running|ProgramStatus_Unknown|RTS_CONTROL_DISABLE|RTS_CONTROL_TOGGLE|RX_TX_LED_SIZE|SAVE_BUTTON_HEIGHT|SAVE_BUTTON_WIDTH|SECONDS_PER_4YEARS|SECONDS_PER_DAY|SECONDS_PER_HOUR|SECONDS_PER_WEEK|SM_CXICON|SM_CXSMICON|SM_CYICON|SM_CYSMICON|SPACEPARITY|STARTF_USESTDHANDLES|STATUS_MESSAGE_BUFFER_SIZE|STD_OUTPUT_HANDLE|STRING1|STRING2|StatusMessage_Debug|StatusMessage_Error|StatusMessage_Info|StatusMessage_Success|StopBits_1|StopBits_1_5|StopBits_2|THICK_MARK_SIZE|TRANSIENT_MAX_NUMBER_MARKS|TWOSTOPBITS|TimeUnit_Days|TimeUnit_Hours|TimeUnit_Milliseconds|TimeUnit_Minutes|TimeUnit_Months|TimeUnit_Seconds|TimeUnit_Years|Vec2_Zero|Vec3_Up|Vec3_Zero|Vec4_Back|Vec4_Backward|Vec4_Bottom|Vec4_Down|Vec4_Forward|Vec4_Front|Vec4_Left|Vec4_One|Vec4_Right|Vec4_Top|Vec4_Up|Vec4_Zero|WINDOW_CLASS_NAME|WINDOW_TITLE|WM_DESTROY|WM_KEYDOWN|WM_KEYUP|WM_LBUTTONDOWN|WM_LBUTTONUP|WM_MOUSEHOVER|WM_MOUSELEAVE|WM_MOUSEMOVE|WM_MOUSEWHEEL|WM_QUIT|WM_RBUTTONDOWN|WM_RBUTTONUP|WM_SIZE|WM_SYSKEYDOWN|WM_SYSKEYUP|WS_CAPTION|WS_MINIMIZEBOX|WS_OVERLAPPED|WS_SYSMENU|WS_THICKFRAME'
  custom_globals: 'AppInput|AppMemory|AppOutput|GC|GL_AppData|Gl_AppMemory|Gl_PlatformInfo|PlatformInfo|PlatformVersion|TempArena|WindowOpen|WindowResized|appData'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|extern|register|{{declspec}}'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'decltype|sizeof|__declspec|__attribute__'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  #############################################################################
  # Reusable contexts
  #
  # The follow contexts are currently constructed to be reused in the C++
  # syntax. They are specifically constructed to not push into sub-contexts,
  # which ensures that C++ code isn't accidentally lexed as plain C. They also
  # should not use the {{identifier}} variable since that is different for C++.
  #############################################################################

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.c
      captures:
        1: meta.toc-list.banner.block.c
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\@[A-Za-z0-9_]*'
          scope: custom.thing.c
        - match: '\*\*[^\n\*\/]*\*{0,2}[^\/\*]'
          scope: custom.string.c
        - match: '^\s*([A-Za-z0-9_ ]+)\:\s*([^\n]*)'
          captures: 
            1: custom.identifier.documentation.c
            2: entity.name.function-documentation.c
        - match: '^\s*(-\s?[A-Za-z0-9_]+\:?)([^\n\*]*)'
          captures: 
            1: support.type.documentation.c
            2: custom.thing.documentation.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.c
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.c
      captures:
        1: meta.toc-list.banner.line.c
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
        - match: '\*\*[^\n\*]*\*{0,2}'
          scope: custom.string.c
        - match: '\@[A-Za-z0-9_]*'
          scope: custom.thing.c
        - match: '-{3,}$'
          scope: custom.string.c
        - match: '[\+\-\=]{3,}$'
          scope: custom.string.c
        - match: '\| +((?:[^\s\|]+\s?){1,}) +\|$'
          scope: custom.string.c
          captures:
            1: entity.name.function.header.c
        - match: \n
          pop: true

  strings:
    - match: '(L|u8|u|U)?(")'
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.double.c
        - match: '"'
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.single.c
        - match: "'"
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.c
    - match: "%"
      scope: invalid.illegal.placeholder.c

  keywords:
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c
    - match: \bsizeof\b
      scope: keyword.operator.word.c

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.c

  variables:
    - match: '\bg[A-Z]\w*\b'
      scope: variable.other.readwrite.global.mac-classic.c
    - match: '\bs[A-Z]\w*\b'
      scope: variable.other.readwrite.static.mac-classic.c

  constants:
    - match: \b(__func__|NULL|true|false|TRUE|FALSE|nullptr)\b
      scope: constant.language.c
    - match: \b({{custom_constants}})\b
      scope: custom.constant.c
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.c
    # PIC GPIO Registers
    - match: \b(TRIS[A-Z](?:bits)?(?:\s*\.\s*TRIS[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(PORT[A-Z](?:bits)?(?:\s*\.\s*R[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(LAT[A-Z](?:bits)?(?:\s*\.\s*LAT[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(ANSEL[A-Z](?:bits)?(?:\s*\.\s*ANS[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNPU[A-Z](?:bits)?(?:\s*\.\s*CNPU[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNPD[A-Z](?:bits)?(?:\s*\.\s*CNPD[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(ODC[A-Z](?:bits)?(?:\s*\.\s*ODC[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNF[A-Z](?:bits)?(?:\s*\.\s*CNF[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNEN[A-Z](?:bits)?(?:\s*\.\s*CNIE[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNNE[A-Z](?:bits)?(?:\s*\.\s*CNNE[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(IPC[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*I(P|S)){0,1})\b
      scope: custom.global.c
    - match: \b(IEC[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*IE){0,1})\b
      scope: custom.global.c
    - match: \b(IFS[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*IF){0,1})\b
      scope: custom.global.c
    - match: \b(RPOR[0-9]{1,2}(?:bits)?(?:\s*\.\s*RP[0-9]{1,2}R){0,1})\b
      scope: custom.global.c
    - match: \b(RPINR[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]+R){0,1})\b
      scope: custom.global.c
    - match: \b(RP[A-Z][0-9]{1,2}R(?:bits)?(?:\s*\.\s*RP[A-Z][0-9]{1,2}R){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]MODE(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]STA(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]BRG(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]CON[0-9]?(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]STAT(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]BRG(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]BUF(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    # common C constant naming idiom -- kConstantVariable
    - match: '\bk[A-Z]\w*\b'
      scope: constant.other.variable.mac-classic.c
    - match: \b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      scope: support.constant.mac-classic.c

  c99:
    - match: \b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b
      scope: support.function.C99.c

  types:
    - match: \b({{basic_types}}|{{before_tag}})\b
      scope: storage.type.c
    - match: \b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|ptrdiff_t)\b
      scope: support.type.sys-types.c
    - match: \b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b
      scope: support.type.pthread.c
    - match: \b({{stdint}})\b
      scope: support.type.stdint.c
    - match: \b({{custom_types}})\b
      scope: custom.type.c
    - match: \b({{custom_globals}})\b
      scope: custom.global.c
    - match: '\b({{microsoft_types}})\b'
      scope: support.type.microsoft.c
    - match: '\b({{windows_types}})\b'
      scope: support.type.windows.c
    - match: \b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b
      scope: support.type.mac-classic.c

  numbers:
    - match: '\b((0(x|X)[0-9a-fA-F]*(\.[0-9a-fA-F]+p-?\d+)?)|(0(b|B)[01]+)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b'
      scope: constant.numeric.c

  operators:
    - match: '->'
      scope: punctuation.accessor.c
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.c
    - match: \+|\-|/|%|<<|>>|&&|\|\||\||\^|~|!
      scope: keyword.operator.arithmetic.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
    - match: \=
      scope: keyword.operator.assignment.c
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.c
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c

  access:
    - match: '(\.)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.c
        2: variable.other.member.c

  label:
    - match: '^\s*((?!default){{identifier}})(:)(?!:)'
      captures:
        1: entity.name.label.c
        2: punctuation.separator.c

  preprocessor-disabled:
    - match: ^\s*(#\s*if(n?def)?)\b
      captures:
        1: meta.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c
          pop: true
        - include: preprocessor-disabled
        - include: pragma-mark
    - include: pragma-mark

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.c

  preprocessor-line-ending:
    - match: $\n
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\\$\n'
          scope: punctuation.separator.continuation.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
          pop: true
        - match: (?=\n)
          pop: true

  pragma-mark:
    - match: ^\s*((#\s*pragma\s+mark)\s+(.*))
      scope: meta.section.c
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.pragma.c
        3: meta.toc-list.pragma-mark.c

  # Used by "inc" snippets to prevent double ##include
  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.c

  #############################################################################
  # The following are C-specific scopes that should not be reused. This is
  # because they push into subcontexts and use variables that are C-specific.
  #############################################################################

  global:
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: access
    - include: typedef
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - match: ','
      scope: punctuation.separator.c
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.c

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.c

  ## C-specific contexts

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: \*
      scope: keyword.operator.c
    # If a struct/union/enum followed by a name that is not a macro or declspec
    # then this is likely a return type of a function. This is uncommon.
    - match: |-
        (?x:
          ({{before_tag}})
          \s+
          (?=
            (?![[:upper:][:digit:]_]+\b|__declspec)
            {{identifier}}
            (\s+{{identifier}}|\s*\*+)
          )
        )
      captures:
        1: storage.type.c
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_scope: meta.function-call.c
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*
      scope: keyword.operator.c
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))(?=\s+)'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.c entity.name.function.c
      set: function-definition-params
    - match: '(?=\S)'
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.c
    - include: comments
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.c meta.group.c punctuation.section.group.begin.c
          set:
            - meta_content_scope: meta.function.parameters.c meta.group.c
            - match : \)
              scope: punctuation.section.group.end.c
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.c
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.c
            - include: expressions
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.c
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.c
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.c
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.function.c meta.block.c
        - match: '\}'
          scope: meta.function.c meta.block.c punctuation.section.block.end.c
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    - match: '\bstruct\b'
      scope: storage.type.c
      set: data-structures-struct-definition
    - match: '\benum\b'
      scope: storage.type.c
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: storage.type.c
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.struct.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.struct.c meta.block.c
        - match: '\}'
          scope: meta.struct.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.enum.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.enum.c meta.block.c
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-union-definition:
    - meta_scope: meta.union.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.union.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.union.c meta.block.c
        - match: '\}'
          scope: meta.union.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.c
      push:
        - meta_scope: meta.block.c
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.c
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.c
      push:
        - meta_scope: meta.group.c
        - match: \)
          scope: punctuation.section.group.end.c
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.c
      push:
        - meta_scope: meta.brackets.c
        - match: \]
          scope: punctuation.section.brackets.end.c
          pop: true
        - include: expressions

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.c
      push:
        - match: ':'
          scope: punctuation.separator.c
          pop: true
        - include: expressions

  modifiers-parens:
    - match: \b(__attribute__)\s*(\(\()
      captures:
        1: storage.modifier.c
        2: meta.group.c punctuation.section.group.begin.c
      push :
        - meta_scope: meta.attribute.c
        - meta_content_scope: meta.group.c
        - include: parens
        - include: strings
        - match: \)\)
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
    - match: \b(__declspec)(\()
      captures:
        1: storage.modifier.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - match: '\b(align|allocate|code_seg|property|uuid)\b\s*(\()'
          captures:
            1: storage.modifier.c
            2: meta.group.c punctuation.section.group.begin.c
          push:
            - meta_content_scope: meta.group.c
            - match: '\)'
              scope: meta.group.c punctuation.section.group.end.c
              pop: true
            - include: numbers
            - include: strings
            - match: \b(get|put)\b
              scope: variable.parameter.c
            - match: ','
              scope: punctuation.separator.c
            - match: '='
              scope: keyword.operator.assignment.c
        - match: '\b(appdomain|deprecated|dllimport|dllexport|jintrinsic|naked|noalias|noinline|noreturn|nothrow|novtable|process|restrict|safebuffers|selectany|thread)\b'
          scope: constant.other.c

  keywords-parens:
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.word.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions

  typedef:
    - match: \btypedef\b
      scope: storage.type.c
      push:
        - match: ({{identifier}})?\s*(?=;)
          captures:
            1: entity.name.type.typedef.c
          pop: true
        - match: \b(struct)\s+({{identifier}})
          captures:
            1: storage.type.c
        - include: expressions

  function-call:
    - match: (?={{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.c
        - include: c99
        - match: '{{identifier}}'
          scope: variable.function.c
        - match: '\('
          scope: meta.group.c punctuation.section.group.begin.c
          set:
            - meta_content_scope: meta.function-call.c meta.group.c
            - match : \)
              scope: meta.function-call.c meta.group.c punctuation.section.group.end.c
              pop: true
            - include: expressions

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  ## Preprocessor for global

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: incomplete-inc
    - include: preprocessor-macro-define
    - include: pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-global:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.section.block.begin.c
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.section.block.end.c
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.section.block.begin.c
      set: preprocessor-block-if-branch-statements
    - include: negated-block
    - include: statements

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.section.block.end.c
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.c
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.c
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.c keyword.control.import.define.c
      push:
        - meta_content_scope: meta.preprocessor.macro.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.c
          set:
            - match: '\('
              scope: punctuation.section.group.begin.c
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.c
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.c meta.group.c
    - match: '{{identifier}}'
      scope: variable.parameter.c
    - match: \)
      scope: punctuation.section.group.end.c
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.c
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.c
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.c
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.c
          captures:
            1: punctuation.definition.comment.c
            2: punctuation.definition.comment.c
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.c
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c
    - match: (/\*).*(\*/)
      scope: comment.block.c
      captures:
        1: punctuation.definition.comment.c
        2: punctuation.definition.comment.c
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.c

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.c
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.c
    - match: '\}'
      scope: punctuation.section.block.end.c
    - include: expressions

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|line|pragma|undef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.c
      push:
        - meta_scope: meta.preprocessor.diagnostic.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.c
    - match: ^\s*(#\s*(?:include|import))\b\s+
      captures:
        1: keyword.control.import.include.c
      push:
        - meta_scope: meta.preprocessor.include.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '"'
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.double.include.c
            - match: '"'
              scope: punctuation.definition.string.end.c
              pop: true
        - match: <
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.other.lt-gt.include.c
            - match: ">"
              scope: punctuation.definition.string.end.c
              pop: true
