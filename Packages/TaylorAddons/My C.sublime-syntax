%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: My C Syntax
file_extensions:
  - c
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.c

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while|new|delete'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum'
  microsoft_types: '__int8|__int16|__int32|__int64'
  windows_types: 'APIENTRY|ATOM|BOOL|BOOLEAN|BYTE|CALLBACK|CCHAR|CHAR|COLORREF|CONST|DWORD|DWORDLONG|DWORD_PTR|DWORD32|DWORD64|FLOAT|HACCEL|HALF_PTR|HANDLE|HBITMAP|HBRUSH|HCOLORSPACE|HCONV|HCONVLIST|HCURSOR|HDC|HDDEDATA|HDESK|HDROP|HDWP|HENHMETAFILE|HFILE|HFONT|HGDIOBJ|HGLOBAL|HHOOK|HICON|HINSTANCE|HKEY|HKL|HLOCAL|HMENU|HMETAFILE|HMODULE|HMONITOR|HPALETTE|HPEN|HRESULT|HRGN|HRSRC|HSZ|HWINSTA|HWND|INT|INT_PTR|INT8|INT16|INT32|INT64|LANGID|LCID|LCTYPE|LGRPID|LONG|LONGLONG|LONG_PTR|LONG32|LONG64|LPARAM|LPBOOL|LPBYTE|LPCOLORREF|LPCSTR|LPCTSTR|LPCVOID|LPCWSTR|LPDWORD|LPHANDLE|LPINT|LPLONG|LPSTR|LPTSTR|LPVOID|LPWORD|LPWSTR|LRESULT|PBOOL|PBOOLEAN|PBYTE|PCHAR|PCSTR|PCTSTR|PCWSTR|PDWORD|PDWORDLONG|PDWORD_PTR|PDWORD32|PDWORD64|PFLOAT|PHALF_PTR|PHANDLE|PHKEY|PINT|PINT_PTR|PINT8|PINT16|PINT32|PINT64|PLCID|PLONG|PLONGLONG|PLONG_PTR|PLONG32|PLONG64|POINTER_32|POINTER_64|POINTER_SIGNED|POINTER_UNSIGNED|PSHORT|PSIZE_T|PSSIZE_T|PSTR|PTBYTE|PTCHAR|PTSTR|PUCHAR|PUHALF_PTR|PUINT|PUINT_PTR|PUINT8|PUINT16|PUINT32|PUINT64|PULONG|PULONGLONG|PULONG_PTR|PULONG32|PULONG64|PUSHORT|PVOID|PWCHAR|PWORD|PWSTR|QWORD|SC_HANDLE|SC_LOCK|SERVICE_STATUS_HANDLE|SHORT|SIZE_T|SSIZE_T|TBYTE|TCHAR|UCHAR|UHALF_PTR|UINT|UINT_PTR|UINT8|UINT16|UINT32|UINT64|ULONG|ULONGLONG|ULONG_PTR|ULONG32|ULONG64|UNICODE_STRING|USHORT|USN|VOID|WCHAR|WINAPI|WORD'
  stdint: 'u8|u16|u32|u64|i8|i16|i32|i64|r32|r64|bool32|flags8|int8|int16|int32|int64|uint8|uint16|uint32|uint64|real32|real64|byte|byte_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t'
  custom_types: 'BleCommandMembers_t|BleCommand_t|BleModCommand_t|BootloaderInfo_t|BridgeInfo_t|BridgeUID_t|Command_t|DiagnosticInfo_t|ExmemConfigInfo_Members_t|ExmemManufacturerId_t|ExmemPairingInfo_t|ExmemPersistantInfo_t|ExmemStatus_t|ExmemVersDependantInfo_t|ExtCommand_t|FailSafeOptions_t|FirmwareVersion_t|FullVersion_t|GetStatusCallback_f|IndicationType_t|Input_State_t|IoState_t|ModuleResponseMembers_t|ModuleResponse_t|NVM_OPERATION_t|OperatingValues_t|OutputLevel_t|PLD_Data_t|PLD_MEMBERS_t|PicVersion_t|RadioPacket_t|RadioPayload_t|RadioSettings_t|ReceiveInfo_t|RegistrationData_t|ResetCause_t|Ring_Buf_t|RunTimeInfo_t|SURE_Status_t|SerialFifo_t|SerialSettingsPage_t|SerialSettings_t|Serial_Cmd_Members_t|Serial_Cmd_t|TransmitFinishCallback_f|TransmitInfo_t|UART_Rx_State_t|VER_NUM_t|WiegandInputError_t|WiegandOutState_t|Wiegand_Buf_t'
  custom_constants: 'ACK_UPDATE_DELAY|ALERT_OUTPUT_ENABLED|ALL_STATE_TIMEOUT|ANALOG|APP_2048_PIC_VERSION_ID|APP_512_PIC_VERSION_ID|ATTN_CHAR|AUX_IN_DIRECTION|AUX_IN_MODE|AUX_IN_PULL_UP|AUX_IN_VALUE|AUX_OUT_DIRECTION|AUX_OUT_MODE|AUX_OUT_OPEN_DRAIN|AUX_OUT_VALUE|BATTERY_CHECK_FAST|BATTERY_CHECK_SLOW|BATTERY_LED_DIRECTION|BATTERY_LED_MODE|BATTERY_LED_VALUE|BLE_BOOTLOADER_START_DELAY|BLE_COMMAND_HEADER_SIZE|BLE_COMMAND_PAYLOAD_MAX_SIZE|BLE_CONNECTED_DIRECTION|BLE_CONNECTED_MODE|BLE_CONNECTED_PULLDOWN|BLE_CONNECTED_VALUE|BLE_MOD_COMMAND_HEADER_SIZE|BLE_MOD_COMMAND_PAYLOAD_MAX_SIZE|BLE_OUTPUT_ENABLED|BLE_PREFIX_LENGTH|BLE_PREFIX_TEXT|BOOTLOADER_SIZE|BRIDGE_PAYLOAD_SIZE|BUILD|BandwidthOption_125|BandwidthOption_250|BandwidthOption_31_25|BandwidthOption_500|BandwidthOption_62_50|BaudRate_19200|BaudRate_38400|BaudRate_9600|BleModCmd_BleConnected|BleModCmd_BleDisconnected|BleModCmd_BootloaderStart|BleModCmd_ButtonHeldDone|BleModCmd_ClearResetCauses|BleModCmd_DebugOutput|BleModCmd_Deploy|BleModCmd_FlashWriteRow|BleModCmd_ForceNextPair|BleModCmd_GetAllState|BleModCmd_GetAllVersions|BleModCmd_GetAppPicVersion|BleModCmd_GetBridgeInfo|BleModCmd_GetDebugModeEnabled|BleModCmd_GetFailSafeOption|BleModCmd_GetHoppingTable|BleModCmd_GetLastPacketTime|BleModCmd_GetOperatingValues|BleModCmd_GetQosConfig|BleModCmd_GetRadioPicVersion|BleModCmd_GetRadioSettings|BleModCmd_GetRadioUpdateStatus|BleModCmd_GetRegistrationInfo|BleModCmd_GetResetCauses|BleModCmd_GetRunTime|BleModCmd_GetSerialSettings|BleModCmd_GetStatus|BleModCmd_GetVoltageLevels|BleModCmd_GetWiegandLedMode|BleModCmd_NumCommands|BleModCmd_Pair|BleModCmd_RadioFlashWriteRow|BleModCmd_RadioUpdateComplete|BleModCmd_RadioUpdateStart|BleModCmd_Register|BleModCmd_Reset|BleModCmd_ResetRunTime|BleModCmd_SendPacket|BleModCmd_SetCriticalBluetooth|BleModCmd_SetDebugModeEnabled|BleModCmd_SetFailSafeOption|BleModCmd_SetQosConfig|BleModCmd_SetRadioSettings|BleModCmd_SetSerialSettings|BleModCmd_SetWiegandLedMode|BleModCmd_Unpair|BleModCmd_UpdateComplete|BleModCmd_UpdateStart|BleModRsp_AllState|BleModRsp_AllVersions|BleModRsp_AppPicVersion|BleModRsp_BootloaderInfo|BleModRsp_BridgeInfo|BleModRsp_ButtonHeld|BleModRsp_DebugInput|BleModRsp_DebugModeEnabled|BleModRsp_FailSafeOption|BleModRsp_Failure|BleModRsp_GetConfigInfo|BleModRsp_HoppingTable|BleModRsp_LastPacketTime|BleModRsp_NumResponses|BleModRsp_OperatingValues|BleModRsp_PacketFailed|BleModRsp_PacketFinished|BleModRsp_PacketReceived|BleModRsp_PairResult|BleModRsp_QosConfig|BleModRsp_RadioPicVersion|BleModRsp_RadioSettings|BleModRsp_RadioUpdateStatus|BleModRsp_Registration|BleModRsp_ResetCauses|BleModRsp_RunTime|BleModRsp_SerialSettings|BleModRsp_Status|BleModRsp_Success|BleModRsp_UnpairResult|BleModRsp_Unsupported|BleModRsp_VoltageLevels|BleModRsp_WiegandLedMode|Boot_Cmd_PairingIndicator|BridgeType_AcCentral|BridgeType_AcRemote|BridgeType_Equipment|BridgeType_SerialCentral|BridgeType_SerialRemote|BridgeType_Thermostat|CHARGE_ENABLE_DIRECTION|CHARGE_ENABLE_MODE|CHARGE_ENABLE_VALUE|CHARGE_WIND_DOWN_TIME|CHECK_FIRMWARE_IMAGE|CLEARED|CMD_FAIL|CMD_FLASH_ERASE_OTHER_BANK|CMD_FLASH_WRITE_WORD|CMD_RESET|CMD_SUCCESS|CONFIG_HEADER_SIZE|CONFIG_HEADER_STR|CRC_PADDING_SIZE|CUTOFF_BATTERY_VOLTAGE|CUTOFF_POWER_VOLTAGE|CUTOFF_TX_VOLTAGE|DEBUG_BAUD_RATE|DEBUG_BRG_CONFIG|DEBUG_FIFO_BUFFER_SIZE|DEBUG_OUTPUT_ENABLED|DEBUG_READ_LINE_BUFFER_SIZE|DEBUG_UART_BLOCKING|DEBUG_UART_PRINT_BUFFER_SIZE|DEBUG_VERSION|DIAGNOSTIC_INFO_CMD|DIAG_LED_DIRECTION|DIAG_LED_MODE|DIAG_LED_VALUE|DIGITAL|DISABLED|DISABLE_SERIAL_OUTPUT|DISPLAY_NAME|DO_DEBUG_LED_FLASH|DO_DIAGNOSTIC_INDICATIONS|ECHO_INPUT_CHARACTERS|ENABLED|ENCRYPTION_PERIOD|EXMEM_ACCEPTABLE_MFG_IDS|EXMEM_NUM_32KB_BLOCKS|EXMEM_NUM_4KB_BLOCKS|EXMEM_NUM_64KB_BLOCKS|EXMEM_NUM_ACCEPTABLE_MFG_IDS|EXMEM_NUM_PAGES|EXMEM_PAGE_SIZE|EXMEM_SIZE|EXPECTED_RESPONSE_BYTE|EXT_COMMAND_HEADER_SIZE|EXT_COMMAND_PAYLOAD_MAX_SIZE|Exmem_BlockErase32|Exmem_BlockErase4|Exmem_BlockErase64|Exmem_ByteProgram|Exmem_ChipErase|Exmem_ContinuousReadModeResetQuad|Exmem_DeepPowerDown|Exmem_DualIoRead|Exmem_DualOutputRead|Exmem_EraseSecurityRegister|Exmem_ProgramSecurityRegister|Exmem_QuadIoRead|Exmem_QuadOutputRead|Exmem_ReadArray|Exmem_ReadArrayFast|Exmem_ReadId|Exmem_ReadManufacturerId|Exmem_ReadSecurityRegister|Exmem_ReadStatusRegister1|Exmem_ReadStatusRegister2|Exmem_Resume|Exmem_ResumeFromDeepPowerDown|Exmem_ResumeFromPowerDownAndReadId|Exmem_Suspend|Exmem_WriteDisable|Exmem_WriteEnable|Exmem_WriteEnableVolStatRegister|Exmem_WriteStatusRegister|ExtCmd_BootReset|ExtCmd_BootWriteDoubleWord|ExtCmd_Brick|ExtCmd_ButtonHeldDone|ExtCmd_DisableAcknowledgements|ExtCmd_DisableFrequencyHopping|ExtCmd_EnableAcknowledgements|ExtCmd_EnableFrequencyHopping|ExtCmd_GetAllState|ExtCmd_GetFirmwareVersion|ExtCmd_GetFullVersion|ExtCmd_GetHardwareVersion|ExtCmd_GetPacket|ExtCmd_GetPacketTimeOnAir|ExtCmd_GetPicVersion|ExtCmd_GetRandomNumber|ExtCmd_GetReceiveInfo|ExtCmd_GetStatus|ExtCmd_GetTransmitInfo|ExtCmd_Initialize|ExtCmd_NumCommands|ExtCmd_QosLightshow|ExtCmd_SetAckData|ExtCmd_SetBandwidth|ExtCmd_SetButtonEnabled|ExtCmd_SetCriticalBluetooth|ExtCmd_SetIndications|ExtCmd_SetLnaEnabled|ExtCmd_SetNumRetries|ExtCmd_SetPowerAmp|ExtCmd_SetQosConfig|ExtCmd_SetRadioPolarity|ExtCmd_SetReceivePacketSize|ExtCmd_SetReceiveUID|ExtCmd_SetSpreadingFactor|ExtCmd_SetTransmitUID|ExtCmd_Sleep|ExtCmd_StartEncryption|ExtCmd_StepEncryption|ExtCmd_StopEncryption|ExtCmd_TransmitData|ExtCmd_Update|ExtRsp_AllState|ExtRsp_ButtonHeld|ExtRsp_DecryptFailure|ExtRsp_DoubleWord|ExtRsp_EncryptionReset|ExtRsp_FirmwareVersion|ExtRsp_FullVersion|ExtRsp_GetPacket|ExtRsp_HardwareVersion|ExtRsp_NeedImage|ExtRsp_NumResponses|ExtRsp_PicVersion|ExtRsp_RandomNumber|ExtRsp_ReceiveInfo|ExtRsp_Startup|ExtRsp_Status|ExtRsp_TimeOnAir|ExtRsp_TransmitInfo|FLASH_APP_VER_AND_CODE_SIZE|FLASH_BYTES_PER_ROW|FLASH_BYTES_PER_WORD|FLASH_FILL_BYTE|FLASH_LOWER_BANK_BASE_ADDRESS|FLASH_LOWER_BANK_CRC16_ADDRESS|FLASH_LOWER_BANK_END_ADDRESS|FLASH_LOWER_BANK_START_ADDRESS|FLASH_LOWER_PROGRAM_START_ADDRESS|FLASH_LOWER_VER_NUM_ADDRESS|FLASH_PF_START_PA|FLASH_PROGRAM_BANK_SIZE|FLASH_PROGRAM_START_ADRESS|FLASH_RESET_ADDRESS|FLASH_SN_ADDRESS|FLASH_UPPER_BANK_BASE_ADDRESS|FLASH_UPPER_BANK_BASE_ADDRESS_PA|FLASH_UPPER_BANK_CRC16_ADDRESS|FLASH_UPPER_BANK_END_ADDRESS|FLASH_UPPER_BANK_START_ADDRESS|FLASH_UPPER_IMAGE_CRC16_ADDRESS|FLASH_UPPER_PROGRAM_START_ADDRESS|FLASH_UPPER_VER_NUM_ADDRESS|FLASH_WORDS_PER_PAGE|FORCE_DEBUG_MODE_ENABLED|FORCE_UID|FORCE_UNREGISTER|FREQ_HOP_TABLE|FailSafeOption_NormallyClosed|FailSafeOption_NormallyOpen|FifoByteType_Address|FifoByteType_Data|FifoByteType_PacketEnd|HBEAT_STARTUP|HB_PERIOD_MS|HEARTBEAT_COMMAND|HIGH|INDICATION_MAX_TIME|INFO_OUTPUT_ENABLED|INPUT|IO_DEBOUNCE|IO_INPUT_DEBOUNCE_DELAY|IO_READY|IO_TRANSMIT|Indication_DebugMode|Indication_DecryptFailure|Indication_None|Indication_SkippedMessage|Indication_Undeployed|Indication_Unpaired|Indication_Unregistered|LED_OFF|LED_ON|LOW|LOWER_BANK_END_ADDRESS|LOWER_BANK_START_ADDRESS|LOWER_CLOCK_SPEED_ENABLED|LOWER_CRC16_ADDRESS|LOWER_FLASH_BASE_ADDRESS|LOWER_PROGRAM_NUM_ADDRESS|LOWER_VERSION_NUM_ADDRESS|MAX_BATTERY_VOLTAGE|MAX_CMD_PLD|MAX_ENCRYPTION_DELAY|MAX_POWER_VOLTAGE|MAX_PROG_NUM_DIFF|MAX_SERIAL_ADDRESSES|MAX_WIEGAND_BITS|MAX_WIEGAND_BYTES|MHz|MICRO_ONE_MS_COUNT|MICRO_PERF_BUS_FREQ|MICRO_SYS_CLK_FREQ|MIN_9V_POWER_VOLTAGE|MIN_BATTERY_VOLTAGE|MIN_POWER_VOLTAGE|MY_UID|MegaHertz|NO_BATTERY_VOLTAGE|NO_POWER_VOLTAGE|NUM_FHSS_OPTIONS_NO_SFBW|NUM_FHSS_OPTIONS_SFBW|NUM_HOPPING_TABLES|NUM_MS_PER_DAY|NUM_MS_PER_HOUR|NUM_MS_PER_MINUTE|NUM_MS_PER_SECOND|NUM_MS_PER_YEAR|NUM_SEC_PER_DAY|NUM_SEC_PER_HOUR|NUM_SEC_PER_MINUTE|NUM_SEC_PER_YEAR|NumResetCauses|ONE_SECOND|OPER_VAL_BUFFER_DELAY|OP_ERASE_LOWER_FLASH|OP_ERASE_PAGE|OP_ERASE_PROGRAM|OP_ERASE_UPPER_FLASH|OP_NOP|OP_WRITE_QUAD_WORD|OP_WRITE_ROW|OP_WRITE_WORD|OUTPUT|OutputLevel_Alert|OutputLevel_Debug|OutputLevel_Info|PAIRING_DELAY|PAIRING_INFO_CLEAR_PAGE|PAIRING_INFO_HEADER_STR|PAIRING_INFO_LOCATION|PAIRING_INFO_WRITE_PAGE|PAIRING_TIMEOUT|PAIR_COMMAND|PAIR_COMMAND_RESPONSE|PA_EIGHTH_WATT|PA_FOURTH_WATT|PA_FULL_WATT|PA_HALF_WATT|PERSIST_INFO_CLEAR_PAGE|PERSIST_INFO_LOCATION|PERSIST_INFO_WRITE_PAGE|POWER_LED_DIRECTION|POWER_LED_MODE|POWER_LED_VALUE|PR8_VALUE|PRESSED|PRINT_FUNCTION_NAMES|PRINT_OUTPUT_LEVEL_DEF|PROGRAM_BANK_SIZE|PROGRAM_START_ADRESS|PairingStatus_Deployed|PairingStatus_Paired|PairingStatus_Pairing|PairingStatus_Unpaired|PayloadFlag_First|PayloadFlag_Full|PayloadFlag_SeqMask|PowerAmpOption_1|PowerAmpOption_1_2|PowerAmpOption_1_4|PowerAmpOption_1_8|QOS_CONFIG_DEFAULT|QosConfig_AllMessagesBit|QosConfig_EnabledBit|QosConfig_IndicationsBit|QosConfig_LongBit|RADIO_256_PIC_VERSION_ID|RADIO_64_PIC_VERSION_ID|RADIO_BOOTLOAD_TIMEOUT|RADIO_FIRMWARE_IMAGE_DEBUG|RADIO_FskBandwidth_150KHz|RADIO_FskBandwidth_175KHz|RADIO_FskBandwidth_190KHz|RADIO_FskBandwidth_200KHz|RADIO_FskBandwidth_20KHz|RADIO_IMAGE_CLEAR_PAGE|RADIO_IMAGE_CRC_START|RADIO_IMAGE_LARGE_CRC_LENGTH|RADIO_IMAGE_LARGE_SIZE|RADIO_IMAGE_LOCATION|RADIO_IMAGE_SMALL_CRC_LENGTH|RADIO_IMAGE_SMALL_SIZE|RADIO_LoRaBandwidth_10_41kHZ|RADIO_LoRaBandwidth_125kHz|RADIO_LoRaBandwidth_15_62kHZ|RADIO_LoRaBandwidth_20_83kHZ|RADIO_LoRaBandwidth_250kHz|RADIO_LoRaBandwidth_31_25kHZ|RADIO_LoRaBandwidth_41_66kHZ|RADIO_LoRaBandwidth_500kHz|RADIO_LoRaBandwidth_62_50kHZ|RADIO_LoRaBandwidth_7_81kHZ|RADIO_POLARITY_ENABLED|RADIO_SpreadingFactor_10|RADIO_SpreadingFactor_11|RADIO_SpreadingFactor_12|RADIO_SpreadingFactor_6|RADIO_SpreadingFactor_7|RADIO_SpreadingFactor_8|RADIO_SpreadingFactor_9|REGISTRATION_CLEAR_PAGE|REGISTRATION_LOCATION|REGISTRATION_WRITE_PAGE|RELAY_1_IN_DIRECTION|RELAY_1_IN_MODE|RELAY_1_IN_PULL_UP|RELAY_1_IN_VALUE|RELAY_1_OUT_DIRECTION|RELAY_1_OUT_MODE|RELAY_1_OUT_VALUE|RELAY_2_IN_DIRECTION|RELAY_2_IN_MODE|RELAY_2_IN_PULL_UP|RELAY_2_IN_VALUE|RELAY_2_OUT_DIRECTION|RELAY_2_OUT_MODE|RELAY_2_OUT_VALUE|RELAY_CONTROL_COMMAND|RELEASED|RESET_COUNTS_CLEAR_PAGE|RESET_COUNTS_LOCATION|RESET_COUNTS_WRITE_PAGE|RESET_DELAY_ms|RING_MAX_IDX|RUN_TIME_CLEAR_PAGE1|RUN_TIME_CLEAR_PAGE2|RUN_TIME_LOCATION1|RUN_TIME_LOCATION2|RUN_TIME_SAVE_INTERVAL|RUN_TIME_WRITE_PAGE1|RUN_TIME_WRITE_PAGE2|RX_ATTN|RX_CMD|RX_LEN|RX_PLD|RelayState_Auxiliary|RelayState_CentralR1|RelayState_CentralR2|RelayState_RemoteR1|RelayState_RemoteR2|RelayState_WiegandLED|ResetCause_BrownOut|ResetCause_BrownOut_Bit|ResetCause_DeadmanTimer|ResetCause_DeadmanTimer_Bit|ResetCause_ExternalReset|ResetCause_ExternalReset_Bit|ResetCause_PowerOn|ResetCause_PowerOn_Bit|ResetCause_SoftwareReset|ResetCause_SoftwareReset_Bit|ResetCause_WakeFromIdle|ResetCause_WakeFromIdle_Bit|ResetCause_WakeFromSleep|ResetCause_WakeFromSleep_Bit|ResetCause_WatchdogTimer|ResetCause_WatchdogTimer_Bit|SERIAL_DATA_COMMAND|SERIAL_END_COMMAND|SERIAL_FIFO_SIZE|SERIAL_LOAD_DIRECTION|SERIAL_LOAD_PULLUP|SERIAL_LOAD_VALUE|SERIAL_PACKET_BUFFER_SIZE|SERIAL_PIECE_COMMAND|SERIAL_RX_ENABLE_DIRECTION|SERIAL_RX_ENABLE_VALUE|SERIAL_START_COMMAND|SERIAL_TIMEOUT_ms|SERIAL_TX_ENABLE_DIRECTION|SERIAL_TX_ENABLE_VALUE|SERIAL_TX_FINISH_DELAY|SERIAL_TX_STARTUP_DELAY|SN_ADDRESS|SPI1BRG_CONFIG|SPI1_BAUD|SRL_SETTINGS_CLEAR_PAGE|SRL_SETTINGS_LOCATION|SRL_SETTINGS_WRITE_PAGE|SURE_MODE_Acknowledging|SURE_MODE_Initializing|SURE_MODE_Receiving|SURE_MODE_Transmitting|SURE_MODE_WaitingForAck|SpreadingFactorOption_10|SpreadingFactorOption_11|SpreadingFactorOption_12|SpreadingFactorOption_7|SpreadingFactorOption_8|SpreadingFactorOption_9|SrlSettFlag_9BitMode|SrlSettFlag_IncludeTermChar|SrlSettFlag_TermCharEnabled|TEST_COMMAND|TEST_GPIO1_DIRECTION|TEST_GPIO1_MODE|TEST_GPIO1_VALUE|TEST_GROUND_DIRECTION|TEST_GROUND_MODE|TEST_GROUND_VALUE|TEST_SWITCH_DIRECTION|TEST_SWITCH_MODE|TEST_SWITCH_PAIR_ERASE|TEST_SWITCH_PERSIST_ERASE|TEST_SWITCH_PULLUP|TEST_SWITCH_REG_ERASE|TEST_SWITCH_VALUE|TEST_SWITCH_VERS_DEP_ERASE|TEST_WIEG_BIT_PULSE_PR8|TEST_WIEG_BIT_PULSE_us|TRANSMIT_PIN_DIRECTION|TRANSMIT_PIN_MODE|TRANSMIT_PIN_PULLDOWN|TRANSMIT_PIN_VALUE|TX_ADC_DELAY|TX_UID|U1BRG_CONFIG|U2BRG_CONFIG|U6BRG_115200_CONFIG|U6BRG_19200_CONFIG|U6BRG_38400_CONFIG|U6BRG_9600_CONFIG|UART1_BAUD|UART2_BAUD|UART_BUF_SIZE|UID_LENGTH|UID_SIZE|UNPAIR_COMMAND|UNPAIR_DELAY|UPPER_BANK_END_ADDRESS|UPPER_BANK_START_ADDRESS|UPPER_CRC16_ADDRESS|UPPER_FLASH_BASE_ADDRESS|UPPER_PROGRAM_NUM_ADDRESS|UPPER_VERSION_NUM_ADDRESS|USING_512_CHIP|UartState_Attn|UartState_Cmd|UartState_Len|UartState_Len_High|UartState_Len_Low|UartState_Pld|VERSION_BUILD|VERSION_MAJOR|VERSION_MINOR|VERS_DEP_INFO_CLEAR_PAGE|VERS_DEP_INFO_LOCATION|VERS_DEP_INFO_WRITE_PAGE|VOLTAGE_CHECK_INTERVAL|WAIT_DIAG_RESPONSE_TIME|WAIT_FOR_EXMEM_STARTUP|WD0_IN|WD0_OUT|WD1_OUT|WIEGAND_0_D1_LOW|WIEGAND_1_D0_LOW|WIEGAND_BRIDGE|WIEGAND_D0_CN_FALLING_EDGE|WIEGAND_D0_CN_FLAG|WIEGAND_D0_CN_RISING_EDGE|WIEGAND_D0_IN_DIRECTION|WIEGAND_D0_IN_MODE|WIEGAND_D0_IN_PULL_UP|WIEGAND_D0_IN_VALUE|WIEGAND_D0_OUT_DIRECTION|WIEGAND_D0_OUT_MODE|WIEGAND_D0_OUT_OPEN_DRAIN|WIEGAND_D0_OUT_VALUE|WIEGAND_D1_CN_FALLING_EDGE|WIEGAND_D1_CN_FLAG|WIEGAND_D1_CN_RISING_EDGE|WIEGAND_D1_IN_DIRECTION|WIEGAND_D1_IN_MODE|WIEGAND_D1_IN_PULL_UP|WIEGAND_D1_IN_VALUE|WIEGAND_D1_OUT_DIRECTION|WIEGAND_D1_OUT_MODE|WIEGAND_D1_OUT_OPEN_DRAIN|WIEGAND_D1_OUT_VALUE|WIEGAND_DATA_COMMAND|WIEGAND_DONE|WIEGAND_FALLING_EDGE|WIEGAND_NO_ERROR|WIEGAND_READY|WIEGAND_RISING_EDGE|WIEGAND_TIMEOUT_ms|WIEGAND_TWO_CN|WIEG_BIT_IDLE_PR8|WIEG_BIT_IDLE_us|WIEG_BIT_PULSE_PR8|WIEG_BIT_PULSE_us|WINDOWS_STYLE_LINE_ENDINGS|WLED_IN_DIRECTION|WLED_IN_MODE|WLED_IN_PULL_UP|WLED_IN_VALUE|WLED_OUT_DIRECTION|WLED_OUT_MODE|WLED_OUT_OPEN_DRAIN|WLED_OUT_VALUE|WiegandLedMode_FollowR1|WiegandLedMode_FollowR2|WiegandLedMode_Seperate|_DEFINES_H|__32MZ2048EFM100__|kHz|kiloHertz'
  custom_globals: 'AcksEnabled|BandwidthOption|BatteryReading|BatteryVoltage|BleBootloaderStartTimer|BleConnected|CurrentRunTime|DebugModeEnabled|FailSafeOptionR1|FailSafeOptionR2|FailSafeTimeout|ForceNextPair|GotHeartbeat|GotRadioPicVersion|GotRandomNumber|HeartbeatTime|HoppingTableOverride|InTestMode|IndicationTimer|IndicationType|InputReading|InputVoltage|IsPairOrigin|LastCommunication|ManualChargeEnable|MicroDeviceID|MicroDeviceVersion|OperatingValues|PAIRING_TIMEOUT|PairReceiveTimer|PairingStatus|PowerAmpOption|PowerLow|QosConfig|RadioFirmwareAddress|RadioImageFillStartAddress|RadioPicVersion|RadioVersionMajor|RadioVersionMinor|ReceiveUID|ReceivedPairResponse|Registration|RetryCount|RunTimeSaveCounter|RxSerialPacket|RxSerialPacketLength|RxSerialPacketTotalLength|SendBridgeInfoToBootloader|SendOperatingValues|Serial9BitMode|SerialAddressMode|SerialAddresses|SerialBaudRate|SerialPacket|SerialPacketLength|SerialPacketPieceSending|SerialPacketPos|SerialSendTermChar|SerialTermChar|SerialTermCharEnabled|SerialTimeout|SfBwTablesEnabled|SpreadingFactorOption|StartupComplete|TickCounter|TransmitUID|TxSampleComplete|UnpairReceiveTimer|WiegandLedMode|bleData|exmemData|gBatteryCheckTimer|gBootloadTimer|gChargeWindDownTimer|gDebTimer|gDelayTimer|gEncryptionTimer|gFailSafeTimer|gHeartbeatAckUpdate|gHeartbeatTimer|gSecondTimer|gSendOperatingValuesTimer|gTransmitAdcTimer|gVoltageCheckTimer|uartData'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|extern|register|{{declspec}}'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'decltype|sizeof|__declspec|__attribute__'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  #############################################################################
  # Reusable contexts
  #
  # The follow contexts are currently constructed to be reused in the C++
  # syntax. They are specifically constructed to not push into sub-contexts,
  # which ensures that C++ code isn't accidentally lexed as plain C. They also
  # should not use the {{identifier}} variable since that is different for C++.
  #############################################################################

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.c
      captures:
        1: meta.toc-list.banner.block.c
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\@[A-Za-z0-9_]*'
          scope: custom.thing.c
        - match: '\*\*[^\n\*\/]*\*{0,2}[^\/\*]'
          scope: custom.string.c
        - match: '^\s*([A-Za-z0-9_ ]+)\:\s*([^\n]*)'
          captures: 
            1: custom.identifier.documentation.c
            2: entity.name.function-documentation.c
        - match: '^\s*(-\s?[A-Za-z0-9_]+\:?)([^\n\*]*)'
          captures: 
            1: support.type.documentation.c
            2: custom.thing.documentation.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.c
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.c
      captures:
        1: meta.toc-list.banner.line.c
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
        - match: '\*\*[^\n\*]*\*{0,2}'
          scope: custom.string.c
        - match: '\@[A-Za-z0-9_]*'
          scope: custom.thing.c
        - match: '-{3,}$'
          scope: custom.string.c
        - match: '[\+\-\=]{3,}$'
          scope: custom.string.c
        - match: '\| +((?:[^\s\|]+\s?){1,}) +\|$'
          scope: custom.string.c
          captures:
            1: entity.name.function.header.c
        - match: \n
          pop: true

  strings:
    - match: '(L|u8|u|U)?(")'
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.double.c
        - match: '"'
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.single.c
        - match: "'"
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.c
    - match: "%"
      scope: invalid.illegal.placeholder.c

  keywords:
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c
    - match: \bsizeof\b
      scope: keyword.operator.word.c

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.c

  variables:
    - match: '\bg[A-Z]\w*\b'
      scope: variable.other.readwrite.global.mac-classic.c
    - match: '\bs[A-Z]\w*\b'
      scope: variable.other.readwrite.static.mac-classic.c

  constants:
    - match: \b(__func__|NULL|true|false|TRUE|FALSE|nullptr)\b
      scope: constant.language.c
    - match: \b({{custom_constants}})\b
      scope: custom.constant.c
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.c
    # PIC GPIO Registers
    - match: \b(TRIS[A-Z](?:bits)?(?:\s*\.\s*TRIS[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(PORT[A-Z](?:bits)?(?:\s*\.\s*R[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(LAT[A-Z](?:bits)?(?:\s*\.\s*LAT[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(ANSEL[A-Z](?:bits)?(?:\s*\.\s*ANS[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNPU[A-Z](?:bits)?(?:\s*\.\s*CNPU[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNPD[A-Z](?:bits)?(?:\s*\.\s*CNPD[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(ODC[A-Z](?:bits)?(?:\s*\.\s*ODC[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNF[A-Z](?:bits)?(?:\s*\.\s*CNF[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNEN[A-Z](?:bits)?(?:\s*\.\s*CNIE[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNNE[A-Z](?:bits)?(?:\s*\.\s*CNNE[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(IPC[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*I(P|S)){0,1})\b
      scope: custom.global.c
    - match: \b(IEC[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*IE){0,1})\b
      scope: custom.global.c
    - match: \b(IFS[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*IF){0,1})\b
      scope: custom.global.c
    - match: \b(RPOR[0-9]{1,2}(?:bits)?(?:\s*\.\s*RP[0-9]{1,2}R){0,1})\b
      scope: custom.global.c
    - match: \b(RPINR[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]+R){0,1})\b
      scope: custom.global.c
    - match: \b(RP[A-Z][0-9]{1,2}R(?:bits)?(?:\s*\.\s*RP[A-Z][0-9]{1,2}R){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]MODE(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]STA(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]BRG(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]CON[0-9]?(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]STAT(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]BRG(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]BUF(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(_[A-Za-z_]*_POSITION)\b
      scope: custom.global.c
    - match: \b(_[A-Za-z_]*_MASK)\b
      scope: custom.global.c
    - match: \b(_[A-Za-z_]*_LENGTH)\b
      scope: custom.global.c
    # common C constant naming idiom -- kConstantVariable
    - match: '\bk[A-Z]\w*\b'
      scope: constant.other.variable.mac-classic.c
    - match: \b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      scope: support.constant.mac-classic.c

  c99:
    - match: \b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b
      scope: support.function.C99.c

  types:
    - match: \b({{basic_types}}|{{before_tag}})\b
      scope: storage.type.c
    - match: \b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|ptrdiff_t)\b
      scope: support.type.sys-types.c
    - match: \b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b
      scope: support.type.pthread.c
    - match: \b({{stdint}})\b
      scope: support.type.stdint.c
    - match: \b({{custom_types}})\b
      scope: custom.type.c
    - match: \b({{custom_globals}})\b
      scope: custom.global.c
    - match: '\b({{microsoft_types}})\b'
      scope: support.type.microsoft.c
    - match: '\b({{windows_types}})\b'
      scope: support.type.windows.c
    - match: \b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b
      scope: support.type.mac-classic.c

  numbers:
    - match: '\b((0(x|X)[0-9a-fA-F]*(\.[0-9a-fA-F]+p-?\d+)?)|(0(b|B)[01]+)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b'
      scope: constant.numeric.c

  operators:
    - match: '->'
      scope: punctuation.accessor.c
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.c
    - match: \+|\-|/|%|<<|>>|&&|\|\||\||\^|~|!
      scope: keyword.operator.arithmetic.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
    - match: \=
      scope: keyword.operator.assignment.c
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.c
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c

  access:
    - match: '(\.)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.c
        2: variable.other.member.c

  label:
    - match: '^\s*((?!default){{identifier}})(:)(?!:)'
      captures:
        1: entity.name.label.c
        2: punctuation.separator.c

  preprocessor-disabled:
    - match: ^\s*(#\s*if(n?def)?)\b
      captures:
        1: meta.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c
          pop: true
        - include: preprocessor-disabled
        - include: pragma-mark
    - include: pragma-mark

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.c

  preprocessor-line-ending:
    - match: $\n
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\\$\n'
          scope: punctuation.separator.continuation.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
          pop: true
        - match: (?=\n)
          pop: true

  pragma-mark:
    - match: ^\s*((#\s*pragma\s+mark)\s+(.*))
      scope: meta.section.c
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.pragma.c
        3: meta.toc-list.pragma-mark.c

  # Used by "inc" snippets to prevent double ##include
  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.c

  #############################################################################
  # The following are C-specific scopes that should not be reused. This is
  # because they push into subcontexts and use variables that are C-specific.
  #############################################################################

  global:
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: access
    - include: typedef
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - match: ','
      scope: punctuation.separator.c
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.c

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.c

  ## C-specific contexts

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: \*
      scope: keyword.operator.c
    # If a struct/union/enum followed by a name that is not a macro or declspec
    # then this is likely a return type of a function. This is uncommon.
    - match: |-
        (?x:
          ({{before_tag}})
          \s+
          (?=
            (?![[:upper:][:digit:]_]+\b|__declspec)
            {{identifier}}
            (\s+{{identifier}}|\s*\*+)
          )
        )
      captures:
        1: storage.type.c
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_scope: meta.function-call.c
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*
      scope: keyword.operator.c
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))(?=\s+)'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.c entity.name.function.c
      set: function-definition-params
    - match: '(?=\S)'
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.c
    - include: comments
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.c meta.group.c punctuation.section.group.begin.c
          set:
            - meta_content_scope: meta.function.parameters.c meta.group.c
            - match : \)
              scope: punctuation.section.group.end.c
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.c
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.c
            - include: expressions
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.c
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.c
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.c
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.function.c meta.block.c
        - match: '\}'
          scope: meta.function.c meta.block.c punctuation.section.block.end.c
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    - match: '\bstruct\b'
      scope: storage.type.c
      set: data-structures-struct-definition
    - match: '\benum\b'
      scope: storage.type.c
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: storage.type.c
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.struct.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.struct.c meta.block.c
        - match: '\}'
          scope: meta.struct.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.enum.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.enum.c meta.block.c
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-union-definition:
    - meta_scope: meta.union.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.union.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.union.c meta.block.c
        - match: '\}'
          scope: meta.union.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.c
      push:
        - meta_scope: meta.block.c
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.c
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.c
      push:
        - meta_scope: meta.group.c
        - match: \)
          scope: punctuation.section.group.end.c
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.c
      push:
        - meta_scope: meta.brackets.c
        - match: \]
          scope: punctuation.section.brackets.end.c
          pop: true
        - include: expressions

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.c
      push:
        - match: ':'
          scope: punctuation.separator.c
          pop: true
        - include: expressions

  modifiers-parens:
    - match: \b(__attribute__)\s*(\(\()
      captures:
        1: storage.modifier.c
        2: meta.group.c punctuation.section.group.begin.c
      push :
        - meta_scope: meta.attribute.c
        - meta_content_scope: meta.group.c
        - include: parens
        - include: strings
        - match: \)\)
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
    - match: \b(__declspec)(\()
      captures:
        1: storage.modifier.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - match: '\b(align|allocate|code_seg|property|uuid)\b\s*(\()'
          captures:
            1: storage.modifier.c
            2: meta.group.c punctuation.section.group.begin.c
          push:
            - meta_content_scope: meta.group.c
            - match: '\)'
              scope: meta.group.c punctuation.section.group.end.c
              pop: true
            - include: numbers
            - include: strings
            - match: \b(get|put)\b
              scope: variable.parameter.c
            - match: ','
              scope: punctuation.separator.c
            - match: '='
              scope: keyword.operator.assignment.c
        - match: '\b(appdomain|deprecated|dllimport|dllexport|jintrinsic|naked|noalias|noinline|noreturn|nothrow|novtable|process|restrict|safebuffers|selectany|thread)\b'
          scope: constant.other.c

  keywords-parens:
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.word.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions

  typedef:
    - match: \btypedef\b
      scope: storage.type.c
      push:
        - match: ({{identifier}})?\s*(?=;)
          captures:
            1: entity.name.type.typedef.c
          pop: true
        - match: \b(struct)\s+({{identifier}})
          captures:
            1: storage.type.c
        - include: expressions

  function-call:
    - match: (?={{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.c
        - include: c99
        - match: '{{identifier}}'
          scope: variable.function.c
        - match: '\('
          scope: meta.group.c punctuation.section.group.begin.c
          set:
            - meta_content_scope: meta.function-call.c meta.group.c
            - match : \)
              scope: meta.function-call.c meta.group.c punctuation.section.group.end.c
              pop: true
            - include: expressions

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  ## Preprocessor for global

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: incomplete-inc
    - include: preprocessor-macro-define
    - include: pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-global:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.section.block.begin.c
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.section.block.end.c
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.section.block.begin.c
      set: preprocessor-block-if-branch-statements
    - include: negated-block
    - include: statements

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.section.block.end.c
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.c
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.c
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.c keyword.control.import.define.c
      push:
        - meta_content_scope: meta.preprocessor.macro.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.c
          set:
            - match: '\('
              scope: punctuation.section.group.begin.c
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.c
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.c meta.group.c
    - match: '{{identifier}}'
      scope: variable.parameter.c
    - match: \)
      scope: punctuation.section.group.end.c
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.c
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.c
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.c
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.c
          captures:
            1: punctuation.definition.comment.c
            2: punctuation.definition.comment.c
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.c
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c
    - match: (/\*).*(\*/)
      scope: comment.block.c
      captures:
        1: punctuation.definition.comment.c
        2: punctuation.definition.comment.c
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.c

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.c
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.c
    - match: '\}'
      scope: punctuation.section.block.end.c
    - include: expressions

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|line|pragma|undef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.c
      push:
        - meta_scope: meta.preprocessor.diagnostic.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.c
    - match: ^\s*(#\s*(?:include|import))\b\s+
      captures:
        1: keyword.control.import.include.c
      push:
        - meta_scope: meta.preprocessor.include.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '"'
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.double.include.c
            - match: '"'
              scope: punctuation.definition.string.end.c
              pop: true
        - match: <
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.other.lt-gt.include.c
            - match: ">"
              scope: punctuation.definition.string.end.c
              pop: true
