%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: My C Syntax
file_extensions:
  - c
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.c

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while|new|delete'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum'
  microsoft_types: '__int8|__int16|__int32|__int64'
  windows_types: 'APIENTRY|ATOM|BOOL|BOOLEAN|BYTE|CALLBACK|CCHAR|CHAR|COLORREF|CONST|DWORD|DWORDLONG|DWORD_PTR|DWORD32|DWORD64|FLOAT|HACCEL|HALF_PTR|HANDLE|HBITMAP|HBRUSH|HCOLORSPACE|HCONV|HCONVLIST|HCURSOR|HDC|HDDEDATA|HDESK|HDROP|HDWP|HENHMETAFILE|HFILE|HFONT|HGDIOBJ|HGLOBAL|HHOOK|HICON|HINSTANCE|HKEY|HKL|HLOCAL|HMENU|HMETAFILE|HMODULE|HMONITOR|HPALETTE|HPEN|HRESULT|HRGN|HRSRC|HSZ|HWINSTA|HWND|INT|INT_PTR|INT8|INT16|INT32|INT64|LANGID|LCID|LCTYPE|LGRPID|LONG|LONGLONG|LONG_PTR|LONG32|LONG64|LPARAM|LPBOOL|LPBYTE|LPCOLORREF|LPCSTR|LPCTSTR|LPCVOID|LPCWSTR|LPDWORD|LPHANDLE|LPINT|LPLONG|LPSTR|LPTSTR|LPVOID|LPWORD|LPWSTR|LRESULT|PBOOL|PBOOLEAN|PBYTE|PCHAR|PCSTR|PCTSTR|PCWSTR|PDWORD|PDWORDLONG|PDWORD_PTR|PDWORD32|PDWORD64|PFLOAT|PHALF_PTR|PHANDLE|PHKEY|PINT|PINT_PTR|PINT8|PINT16|PINT32|PINT64|PLCID|PLONG|PLONGLONG|PLONG_PTR|PLONG32|PLONG64|POINTER_32|POINTER_64|POINTER_SIGNED|POINTER_UNSIGNED|PSHORT|PSIZE_T|PSSIZE_T|PSTR|PTBYTE|PTCHAR|PTSTR|PUCHAR|PUHALF_PTR|PUINT|PUINT_PTR|PUINT8|PUINT16|PUINT32|PUINT64|PULONG|PULONGLONG|PULONG_PTR|PULONG32|PULONG64|PUSHORT|PVOID|PWCHAR|PWORD|PWSTR|QWORD|SC_HANDLE|SC_LOCK|SERVICE_STATUS_HANDLE|SHORT|SIZE_T|SSIZE_T|TBYTE|TCHAR|UCHAR|UHALF_PTR|UINT|UINT_PTR|UINT8|UINT16|UINT32|UINT64|ULONG|ULONGLONG|ULONG_PTR|ULONG32|ULONG64|UNICODE_STRING|USHORT|USN|VOID|WCHAR|WINAPI|WORD'
  stdint: 'u8|u16|u32|u64|uxx|i8|i16|i32|i64|ixx|r32|r64|rxx|bool32|flags8|int8|int16|int32|int64|uint8|uint16|uint32|uint64|real32|real64|byte|byte_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t'
  custom_types: 'AllocAlignment_t|AllocationFunction_f|AppGlobals_t|AppState_t|AsciiTree_t|AudioCallbackClass_c|AudioServiceInfo_t|Axis_t|Basis_t|Bezier3_t|Bezier4_t|BezierPathPartArcFlag_t|BezierPathPartType_t|BezierPathPart_t|BezierPath_t|BktArrayBucket_t|BktArray_t|BoolFunc_f|Box_t|Boxi_t|Button_t|CSteamID|Camera_t|Circle_t|CollisionShapeType_t|CollisionShape_t|ColorHSV_t|ColorIlluminant_t|ColorLAB_t|ColorLCH_t|ColorObserver_t|ColorXYZ_t|Color_t|Colorf_t|CompareFunc_f|Cone_t|ConfirmDialogBtn_t|ConfirmDialogCallback_f|ConfirmDialog_t|ControllerBtn_t|ControllerType_t|CyclicFunc2DCallback_f|CyclicFunc2D_t|CyclicFuncCallback_f|CyclicFuncType_t|CyclicFunc_t|Cylinder_t|DayOfWeek_t|DbgConsoleState_t|DbgFlags_t|DbgLevel_t|DebugCommandInfoList_t|DebugCommandInfo_t|DebugConsoleAutocompleteItem_t|DebugConsoleLine_t|DebugConsoleRegisteredCommand_t|DebugConsoleSelectionRec_t|DebugConsoleSelectionRecsContext_t|DebugConsoleTextPos_t|DebugConsole_t|DebugPlacingTool_t|DebugRenderMode_t|DifficultyLevel_t|Dir2Ex_t|Dir2_t|Dir3Ex_t|Dir3_t|DumpProcessLogContext_t|EasingStyle_t|EulerOrder_t|FILE|FileWatchingContext_t|FloatSize_t|FontBakeFlag_t|FontBake_t|FontCharInfo_t|FontFaceFlag_t|FontFaceSelector_t|FontFace_t|FontFlowAfterCharCallback_f|FontFlowAfterLineCallback_f|FontFlowBeforeCharCallback_f|FontFlowBeforeLineCallback_f|FontFlowBetweenCharCallback_f|FontFlowCallbacks_t|FontFlowInfo_t|FontFlowState_t|FontRange_t|Font_t|FpController_t|FrameBufferChannel_t|FrameBufferError_t|FrameBuffer_t|FreeFunction_f|FriendsGroupID_t|Frustum_t|GLenum|GLfloat|GLint|GLsizei|GLuint|GameSimParameters_t|GameSimState_t|GameTask_t|GenAlgData_SimpleAsteroid_t|GenAlgData_t|GenAlgorithmStage_t|GenAlgorithm_t|GetPreciseProgramTime_f|GetThreadNumber_f|GrowMemToken_t|GyLibDebugOutput_f|GyLibDebugPrint_f|HandlePlatformLinesContext_t|HeapAllocPrefix_t|HeapPageHeader_t|Hexagon_t|I32Func_f|InDblLinkedList_t|InLinkedList_t|InputEventType_t|InputEvent_t|InvContainerType_t|InvContainerUi_t|InvContainer_t|InvRecipeSlotsGrid_t|InvSlotFlag_t|InvSlotStateFlag_t|InvSlot_t|InvStackFlag_t|InvStack_t|InvUiManagerSlotPntr_t|InvUiManager_t|ItemIdCategory_t|ItemIdHardnessType_t|ItemIdRotationalMode_t|ItemId_t|Key_t|LevelSelectAppState_t|LevelSelectEntry_t|LineParser_t|LinkedListNode_t|LinkedList_t|LogGlobals_t|MAX_NUM_RENDER_SHAPES|MachineType_t|MainMenuAppState_t|MainRegistry_t|MarkedStackArenaHeader_t|Matrix4x4_t|MemArenaType_t|MemArena_t|MirrorGameState_t|ModelMaterial_t|ModelPart_t|Model_t|ModifierKey_t|Month_t|MouseBtn_t|MusicFade_t|MusicSystemState_t|MyStr_t|MyWideStr_t|Obb2D_t|ObjModelDataFace_t|ObjModelDataMaterialLibrary_t|ObjModelDataMaterial_t|ObjModelDataObject_t|ObjModelData_t|OpenFile_t|ParsingTokenType_t|ParsingToken_t|PerfSectionBundle_t|PerfSection_t|PerfTime_t|PigAudioOutGraph_t|PigAudioService_f|PigDebugBindingsEntry_t|PigDebugBindings_t|PigDebugOverlay_t|PigGenParseError_t|PigGifFrame_t|PigMemGraphArenaPage_t|PigMemGraphArena_t|PigMemGraph_t|PigNotificationQueue_t|PigNotification_t|PigPerfGraph_t|PigSettingsEntry_t|PigSettings_t|PigTask_t|PigTryDeserDebugBindingsError_t|PigTryDeserSettingsError_t|Plane_t|PlatAllocation_t|PlatApiAllocateMemory_f|PlatApiBakeFont_f|PlatApiChangeWindowTarget_f|PlatApiCloseFile_f|PlatApiCopyTextToClipboard_f|PlatApiCreateFolder_f|PlatApiCreateInterlockedInt_f|PlatApiCreateMutex_f|PlatApiCreateSemaphore_f|PlatApiDebugOutput_f|PlatApiDebugReadout_f|PlatApiDestroyInterlockedInt_f|PlatApiDestroyMutex_f|PlatApiDestroySemaphore_f|PlatApiDoesFileExist_f|PlatApiEnumerateFiles_f|PlatApiFreeFileContents_f|PlatApiFreeFontData_f|PlatApiFreeImageData_f|PlatApiFreeMemory_f|PlatApiGetFullPath_f|PlatApiGetLoadProcAddressFunc_f|PlatApiGetMonitorVideoMode_f|PlatApiGetPerfTimeDiff_f|PlatApiGetPerfTime_f|PlatApiGetProgramArg_f|PlatApiGetProgramTime_f|PlatApiGetSpecialFolderPath_f|PlatApiGetSteamFriendGroupById_f|PlatApiGetSteamFriendInfoById_f|PlatApiGetSteamFriendPresenceStr_f|PlatApiGetThisThreadId_f|PlatApiGetThreadContext_f|PlatApiHandleAssertion_f|PlatApiInterlockedExchange_f|PlatApiIsFileWatched_f|PlatApiLockMutex_f|PlatApiMoveFileCursor_f|PlatApiOpenFile_f|PlatApiPasteTextFromClipboard_f|PlatApiQueueTask_f|PlatApiReadFileContents_f|PlatApiReadFromFile_f|PlatApiReadPlatformFont_f|PlatApiReallocMemory_f|PlatApiRenderLoadingScreen_f|PlatApiRequestSteamFriendAvatar_f|PlatApiSaveImageDataToFile_f|PlatApiSeekToOffsetInFile_f|PlatApiShowFile_f|PlatApiShowMessageBox_f|PlatApiShowSourceFile_f|PlatApiSleepForMs_f|PlatApiStartEnumeratingFiles_f|PlatApiStartSteamFriendsQuery_f|PlatApiSwapBuffers_f|PlatApiTriggerSemaphore_f|PlatApiTryParseImageFile_f|PlatApiUnlockMutex_f|PlatApiUnwatchFile_f|PlatApiUpdateSteamFriendStatus_f|PlatApiWaitOnSemaphore_f|PlatApiWatchFile_f|PlatApiWriteEntireFile_f|PlatApiWriteToFile_f|PlatAudioDeviceState_t|PlatAudioDevice_t|PlatAudioFormat_t|PlatBtnState_t|PlatControllerState_t|PlatCursor_t|PlatDebugLine_t|PlatFileContents_t|PlatImageData_t|PlatInterlockedInt_t|PlatMonitorInfo_t|PlatMonitorList_t|PlatMonitorVideoMode_t|PlatMouseMode_t|PlatMutex_t|PlatOpenFile_t|PlatRectPackContext_t|PlatSemaphore_t|PlatSteamFriendAvatarSize_t|PlatSteamFriendGroup_t|PlatSteamFriendInfo_t|PlatSteamFriendOnlineStatus_t|PlatSteamFriendPresenceStr_t|PlatSteamFriendState_t|PlatSteamFriendsListQueryError_t|PlatSteamFriendsList_t|PlatTaskInput_t|PlatTaskResult_t|PlatTask_t|PlatThreadFunction_f|PlatThreadIdPair_t|PlatThreadPoolThread_t|PlatThread_t|PlatWatchedFile_t|PlatWindow_t|PlayerInventoryHeader_t|PlayerTrailPoint_t|PolygonFillMode_t|PostProcessingChain_t|PrimitiveIndex3D_t|PrimitiveIndexedVerts_t|PrimitiveVert3D_t|ProcessLogLine_t|ProcessLog_t|Pyramid_t|Quaternion_t|RandomSeriesType_t|RandomSeries_t|Ray2_t|Ray3_t|RayVsBoxResult_t|RayVsObb2DResult_t|RayVsRectangle2DResult_t|ReadFileContentsCallback_f|RealTime_t|RecipeIngredient_t|RecipeList_t|Recipe_t|Rectangle_t|Rectanglei_t|ReflectiveMaterial_t|ReflectiveObject_t|ReflectiveShape_t|RenderApi_t|RenderShape_t|ResourceFontMetaInfo_t|ResourceFonts_t|ResourceMusics_t|ResourceShaderMetaInfo_t|ResourceShaders_t|ResourceSheets_t|ResourceSounds_t|ResourceTextureMetaInfo_t|ResourceTextures_t|ResourceType_t|ResourceVectors_t|ResourceWatch_t|SaveSystem_t|SerializableStructMember_t|SerializableStruct_t|ShaderDynamicUniform_t|ShaderError_t|ShaderUniform_t|Shader_t|ShapeWheelOption_t|ShapeWheel_t|SimpleAsteroid_OreVein_t|Simplex_t|SlugAlbum_t|SlugFont_t|SlugText_t|SlzMyStr_t|SoundInstanceHandle_t|SoundInstanceType_t|SoundInstance_t|Sound_t|Sphere_t|SplitStringContext_t|SpriteSheetEditorFile_t|SpriteSheetEditorResource_t|SpriteSheetEditorState_t|SpriteSheetError_t|SpriteSheetFramePoint_t|SpriteSheetFrame_t|SpriteSheetMetaError_t|SpriteSheet_t|StartMenuAppState_t|SteamAvatar_t|StringBuilder_t|StringFifoLine_t|StringFifoPushLineAfter_f|StringFifoPushLineBefore_f|StringFifoPushLineSort_f|StringFifo_t|SvgData_t|SvgFillStyle_t|SvgFill_t|SvgGroup_t|SvgPathDataCmd_t|SvgShapeType_t|SvgShape_t|SvgStrokeStyle_t|SvgStroke_t|SvgTransformType_t|SvgTransform_t|TaskCallbackFunc_f|TextAlignment_t|TextMeasure_t|TextParser_t|Textbox_MoveCursorType_t|Textbox_t|TextureError_t|Texture_t|ThreadId_t|TimeUnit_t|Triangle2D_t|Triangle3D_t|TriangulatePart_t|TriangulateResult_t|TriangulateWithHolesPart_t|TryDeserSvgFileError_t|TryDeserVoxelShapeGeomSetError_t|TryDeserVoxelWorldError_t|TryDeserWorldSaveMetaError_t|TryDeserializeObjFileError_t|TryGetSettingResult_t|TryParseFailureReason_t|Uuid_t|VarArray_t|Vector2_t|Vector2i_t|Vector3_t|Vector3i_t|Vector4_t|Vector4i_t|VectorImgError_t|VectorImgFillType_t|VectorImgFill_t|VectorImgLoop_t|VectorImgPart_t|VectorImgShapeType_t|VectorImgStrokeType_t|VectorImgStroke_t|VectorImg_t|Version_t|VertBufferPrimitive_t|VertBuffer_t|Vertex2D_t|Vertex3D_t|VertexArrayObject_t|VertexAttribLocations_t|VoidFunc_f|VoxelBoxMoveResult_t|VoxelChunkHeader_t|VoxelChunkRaster_t|VoxelChunkSparseArraySlot_t|VoxelChunkSparseArray_t|VoxelChunk_t|VoxelContainerHeader_t|VoxelContainerStackHeader_t|VoxelContainer_t|VoxelCoord_t|VoxelGenAlgState_t|VoxelGenAlg_t|VoxelGenCubeStructurePass_t|VoxelGenOreVein_t|VoxelGenSpaceSizeCallback_f|VoxelGenVoxelCallback_f|VoxelPipeSystemEndpoint_t|VoxelPipeSystemFlag_t|VoxelPipeSystemPath_t|VoxelPipeSystem_t|VoxelPointMoveResult_t|VoxelRaycastCallback_f|VoxelRaycastResult_t|VoxelRaycastState_t|VoxelRotation_t|VoxelSerialized_t|VoxelShapeGeomFaceFlag_t|VoxelShapeGeomFace_t|VoxelShapeGeomSet_t|VoxelShapeGeom_t|VoxelShape_t|VoxelSpaceGravityType_t|VoxelSpaceGravity_t|VoxelSpaceHeader_t|VoxelStackFlag_t|VoxelStack_t|VoxelVertAllocations_t|VoxelVertCounts_t|VoxelWorldHeader_t|VoxelWorld_t|WAV_Header_t|WAV_RiffIterator_t|WalkedVoxel_t|WavAudioDataChunk_t|WavAudioData_t|WavError_t|Web_PlatformState_t|Wedge_t|WordBreakCharClass_t|WordTreeLeaf_t|WordTreeNode_t|WordTree_t|WorldAppState_t|WorldSaveMeta_t|WriteEntireFileCallback_f|XmlParseResultType_t|XmlParseResult_t|XmlParser_t|XmlParsingError_t|XmlProperty_t|XmlToken_t|_IO_FILE|box|boxi|mat4|obb2|quat|rec|reci|v2|v2i|v3|v3i|v4|v4i'
  custom_constants: '200|ASCII_TREE_CHILD_COUNT|ASCII_TREE_FIRST_CHAR|ASSERTIONS_ENABLED|ATTR_PACKED|AUDIO_FILL_TIME|AUDIO_OUTPUT_BUFFER_DURATION|AUDIO_OUT_GRAPH_HEIGHT|AUDIO_OUT_GRAPH_LINE_GRAPH_SCALE|AUDIO_OUT_GRAPH_MAX_SCALE|AUDIO_OUT_GRAPH_PANNING_LAG|AUDIO_OUT_GRAPH_SCALE_LAG|AUDIO_OUT_GRAPH_SCROLL_SPEED|AUDIO_OUT_GRAPH_WIDTH|AUDIO_SLEEP_TIME|AgColor_Blue|AgColor_BrightRed|AgColor_Brown|AgColor_DarkBlue|AgColor_DarkBrown|AgColor_DarkFadedBlue|AgColor_DarkGreen|AgColor_DarkOrange|AgColor_DarkPurple|AgColor_DarkRed|AgColor_DarkerGreen|AgColor_DeepBlue|AgColor_DeepFadedBlue|AgColor_DeepGreenBlue|AgColor_DeepPurple|AgColor_FadedBlue|AgColor_Green|AgColor_LightBlue|AgColor_LightFadedBlue|AgColor_LightGreen|AgColor_LightPink|AgColor_LightTan|AgColor_NumColors|AgColor_Orange|AgColor_Pink|AgColor_Purple|AgColor_Red|AgColor_Tan|AgColor_TintFadedBlue|AgColor_TintGreen|AgColor_TintPink|AgColor_TintTan|AgColor_Yellow|AllocAlignment_16Bytes|AllocAlignment_4Bytes|AllocAlignment_64Bytes|AllocAlignment_8Bytes|AllocAlignment_Max|AllocAlignment_None|AppState_LevelSelect|AppState_MainMenu|AppState_MirrorGame|AppState_None|AppState_NumStates|AppState_StartMenu|AppState_World|Axis_All2|Axis_All3|Axis_All4|Axis_Count|Axis_None|Axis_W|Axis_X|Axis_Y|Axis_Z|BASIC_DRAWING_CONTEXT|BEFORE_RESOURCES_LOAD_PERCENT|BOLD_TOGGLE_CHAR|Basis_Default|BezierPathPartArcFlag_Large|BezierPathPartArcFlag_None|BezierPathPartArcFlag_Sweep|BezierPathPartType_Curve3|BezierPathPartType_Curve4|BezierPathPartType_EllipseArc|BezierPathPartType_Line|BezierPathPartType_None|BezierPathPartType_NumTypes|Black|Black_Value|Box_Zero|Boxi_Zero|ButtonStyle_Bordered|ButtonStyle_Default|ButtonStyle_None|ButtonStyle_NumStyles|CAMERA_Z_FAR|CAMERA_Z_NEAR|CHAR_BIT|CHAR_MAX|CHAR_MIN|CONFIRM_DIALOG_BTN_BORDER_COLOR|CONFIRM_DIALOG_BTN_BORDER_THICKNESS|CONFIRM_DIALOG_BTN_CORNER_RADIUS|CONFIRM_DIALOG_BTN_INNER_MARGIN|CONFIRM_DIALOG_BTN_MARGIN_BOTTOM|CONFIRM_DIALOG_BTN_MARGIN_LEFTRIGHT|CONFIRM_DIALOG_BTN_MIN_HEIGHT|CONFIRM_DIALOG_BTN_NO_COLOR|CONFIRM_DIALOG_BTN_PADDING|CONFIRM_DIALOG_BTN_STYLE|CONFIRM_DIALOG_BTN_TEXT_COLOR|CONFIRM_DIALOG_BTN_YES_COLOR|CONFIRM_DIALOG_CLOSE_ANIM_TIME|CONFIRM_DIALOG_CONTENT_APPEAR_OPEN_PERCENT|CONFIRM_DIALOG_CORNER_CIRCLE_MARGIN|CONFIRM_DIALOG_CORNER_CIRCLE_OUTLINE_THICKNESS|CONFIRM_DIALOG_CORNER_CIRCLE_RADIUS|CONFIRM_DIALOG_MAX_NUM_BUTTONS|CONFIRM_DIALOG_MAX_WIDTH|CONFIRM_DIALOG_MIN_HEIGHT|CONFIRM_DIALOG_MIN_WIDTH|CONFIRM_DIALOG_OPEN_ANIM_TIME|CONFIRM_DIALOG_OUTLINE_THICKNESS|CONFIRM_DIALOG_TEXT_MARGIN_LEFTRIGHT|CONTROLLER_INDEX_ANY|CONTROLLER_STICK_DEADZONE|CONTROLLER_STICK_DIR_DEADZONE|CONTROLLER_TRIGGER_ACTIVE_THRESHOLD|CRAFTING_TABLE_GRID_HEIGHT|CRAFTING_TABLE_GRID_WIDTH|CollisionShapeType_Box|CollisionShapeType_None|CollisionShapeType_NumShapes|CollisionShapeType_Ramp|ColorIlluminant_A|ColorIlluminant_B|ColorIlluminant_C|ColorIlluminant_D50|ColorIlluminant_D55|ColorIlluminant_D65|ColorIlluminant_D75|ColorIlluminant_E|ColorIlluminant_F1|ColorIlluminant_F10|ColorIlluminant_F11|ColorIlluminant_F12|ColorIlluminant_F2|ColorIlluminant_F3|ColorIlluminant_F4|ColorIlluminant_F5|ColorIlluminant_F6|ColorIlluminant_F7|ColorIlluminant_F8|ColorIlluminant_F9|ColorIlluminant_NumOptions|ColorObserver_NumOptions|ColorObserver_TenDegree|ColorObserver_TwoDegree|ControllerBtn_A|ControllerBtn_B|ControllerBtn_Back|ControllerBtn_Down|ControllerBtn_Left|ControllerBtn_LeftBumper|ControllerBtn_LeftStick|ControllerBtn_LeftTrigger|ControllerBtn_None|ControllerBtn_NumBtns|ControllerBtn_Right|ControllerBtn_RightBumper|ControllerBtn_RightStick|ControllerBtn_RightTrigger|ControllerBtn_Start|ControllerBtn_Up|ControllerBtn_X|ControllerBtn_Y|ControllerBtn_lsDown|ControllerBtn_lsLeft|ControllerBtn_lsRight|ControllerBtn_lsUp|ControllerBtn_rsDown|ControllerBtn_rsLeft|ControllerBtn_rsRight|ControllerBtn_rsUp|ControllerType_Joystick|ControllerType_Nintendo|ControllerType_NumTypes|ControllerType_Playstation|ControllerType_Unknown|ControllerType_Xbox|CyclicFunc2D_Default|CyclicFunc2D_NormalCosine|CyclicFunc2D_NormalSaw|CyclicFunc2D_NormalSine|CyclicFunc2D_NormalSquare|CyclicFunc2D_NormalTangent|CyclicFuncType_Constant|CyclicFuncType_Cosine|CyclicFuncType_Custom|CyclicFuncType_None|CyclicFuncType_NumTypes|CyclicFuncType_Saw|CyclicFuncType_Sine|CyclicFuncType_Square|CyclicFuncType_Tangent|CyclicFunc_Default|CyclicFunc_NormalCosine|CyclicFunc_NormalSaw|CyclicFunc_NormalSine|CyclicFunc_NormalSquare|CyclicFunc_NormalTangent|DBG_CONSOLE_AUTOCOMPLETE_ITEM_MARGIN|DBG_CONSOLE_AUTOCOMPLETE_ITEM_PADDING|DBG_CONSOLE_AUTOCOMPLETE_MAX_HEIGHT|DBG_CONSOLE_AUTOCOMPLETE_OPEN_TIME|DBG_CONSOLE_AUTOCOMPLETE_SCROLL_PAST|DBG_CONSOLE_BUFFER_SIZE|DBG_CONSOLE_BUILD_SPACE_SIZE|DBG_CONSOLE_ELEM_MARGIN|DBG_CONSOLE_FADE_IN_TIME|DBG_CONSOLE_FILE_LINE_NUM_GUTTER_WIDTH|DBG_CONSOLE_FILE_NAME_GUTTER_WIDTH|DBG_CONSOLE_FULL_ALPHA_BTN_SIZE|DBG_CONSOLE_FUNC_NAME_GUTTER_WIDTH|DBG_CONSOLE_GUTTER_PADDING|DBG_CONSOLE_GUTTER_WIDTH|DBG_CONSOLE_ICON_SMALLER_AMOUNT|DBG_CONSOLE_INPUT_BOX_HEIGHT|DBG_CONSOLE_INPUT_HISTORY_LENGTH|DBG_CONSOLE_INPUT_LABEL_STR|DBG_CONSOLE_JUMP_TO_END_STR|DBG_CONSOLE_LARGE_OPEN_AMOUNT|DBG_CONSOLE_NORMAL_OPEN_AMOUNT|DBG_CONSOLE_OPEN_AMOUNT_RATIO|DBG_CONSOLE_OPEN_KEY|DBG_CONSOLE_OPEN_TIME|DBG_CONSOLE_OVERLAY_ALPHA|DBG_CONSOLE_REFOCUS_STR|DBG_CONSOLE_SCROLL_BAR_WIDTH|DBG_CONSOLE_SCROLL_LAG|DBG_CONSOLE_SCROLL_SPEED|DBG_CONSOLE_TIME_GUTTER_WIDTH|DBG_CONSOLE_TOGGLE_GUTTER_BTNS_SIZE|DBG_CONSOLE_VIEW_PADDING|DBG_FILEPATH_AND_FUNCNAME_SEP_CHAR|DBL_DECIMAL_DIG|DBL_DIG|DBL_EPSILON|DBL_HAS_SUBNORM|DBL_MANT_DIG|DBL_MAX|DBL_MAX_10_EXP|DBL_MAX_EXP|DBL_MIN|DBL_MIN_10_EXP|DBL_MIN_EXP|DBL_TRUE_MIN|DEBUG_BUILD|DEBUG_COMMAND_DESCRIPTION_TRUNCATE_LIMIT|DEBUG_COMMAND_MAX_NUM_ARGUMENTS|DEBUG_OVERLAY_DUCK_PERCENT|DEBUG_OVERLAY_HIDE_TOGGLE_BTNS_TIME|DEBUG_OVERLAY_OPEN_ANIM_TIME|DEBUG_OVERLAY_PIE_CHARTS_SIZE|DEBUG_OVERLAY_TOGGLE_BTNS_SIZE|DEBUG_OVERLAY_TOGGLE_KEY|DEBUG_OVERLAY_TOGGLE_KEY_REQUIRES_SHIFT|DECIMAL_DIG|DEFAULT_PROCESS_LOG_FIFO_SIZE|DEFAULT_UNDERLINE_OFFSET|DEFAULT_UNDERLINE_THICKNESS|DEMO_BUILD|DEVELOPER_BUILD|DODECAHEDRON_DIHEDRAL_ANGLE32|DODECAHEDRON_DIHEDRAL_ANGLE64|DODECAHEDRON_NUM_EDGES|DODECAHEDRON_NUM_FACES|DODECAHEDRON_NUM_VERTICES|DayOfWeek_Friday|DayOfWeek_Monday|DayOfWeek_NumDays|DayOfWeek_Saturday|DayOfWeek_Sunday|DayOfWeek_Thursday|DayOfWeek_Tuesday|DayOfWeek_Wednesday|DbgConsoleState_Closed|DbgConsoleState_NumStates|DbgConsoleState_Open|DbgConsoleState_OpenLarge|DbgFlag_Inverted|DbgFlag_New|DbgFlag_PlatformLayer|DbgFlag_TaskThread|DbgFlag_UserInput|DbgFlags_None|DbgLevel_Debug|DbgLevel_Error|DbgLevel_Info|DbgLevel_None|DbgLevel_Notify|DbgLevel_NumLevels|DbgLevel_Other|DbgLevel_Regular|DbgLevel_Warning|DebugPlacingTool_Default|DebugPlacingTool_NumTools|DebugPlacingTool_Rectangle|DebugRenderMode_Default|DebugRenderMode_DepthOnly|DebugRenderMode_NumModes|DeserObjFileError_CouldntFindMaterialLibrary|DeserObjFileError_EmptyFile|DeserObjFileError_FaceVertIndexCountIsWrong|DeserObjFileError_FacesBeforeMaterialSelect|DeserObjFileError_FacesBeforeObjectStart|DeserObjFileError_FloatParseFailure|DeserObjFileError_IndexOutOfBounds|DeserObjFileError_IntParseFailure|DeserObjFileError_LinePieceCountIsWrong|DeserObjFileError_MaterialAttribBeforeNew|DeserObjFileError_None|DeserObjFileError_NumErrors|DeserObjFileError_UnknownMaterial|DifficultyLevel_Chaos|DifficultyLevel_Dangerous|DifficultyLevel_None|DifficultyLevel_Normal|DifficultyLevel_NumLevels|DifficultyLevel_Peaceful|Dir2Ex_All|Dir2Ex_BottomLeft|Dir2Ex_BottomRight|Dir2Ex_Cardinal|Dir2Ex_Count|Dir2Ex_Diagonal|Dir2Ex_Down|Dir2Ex_Left|Dir2Ex_None|Dir2Ex_Right|Dir2Ex_TopLeft|Dir2Ex_TopRight|Dir2Ex_Up|Dir2_All|Dir2_Count|Dir2_Down|Dir2_Left|Dir2_None|Dir2_Right|Dir2_Up|Dir3Ex_All|Dir3Ex_Backward|Dir3Ex_BottomLeftBack|Dir3Ex_BottomLeftFront|Dir3Ex_BottomRightBack|Dir3Ex_BottomRightFront|Dir3Ex_Cardinal|Dir3Ex_Count|Dir3Ex_Diagonal|Dir3Ex_Down|Dir3Ex_Forward|Dir3Ex_Left|Dir3Ex_None|Dir3Ex_Right|Dir3Ex_TopLeftBack|Dir3Ex_TopLeftFront|Dir3Ex_TopRightBack|Dir3Ex_TopRightFront|Dir3Ex_Up|Dir3_All|Dir3_Backward|Dir3_Count|Dir3_Down|Dir3_Forward|Dir3_Left|Dir3_None|Dir3_NotBackward|Dir3_NotDown|Dir3_NotForward|Dir3_NotLeft|Dir3_NotRight|Dir3_NotUp|Dir3_Right|Dir3_Up|EXIT_CODE_ASSERTION_FAILED|EXPORT|EXTERN_C_END|EXTERN_C_START|EasingStyle_BackIn|EasingStyle_BackInOut|EasingStyle_BackOut|EasingStyle_BounceIn|EasingStyle_BounceInOut|EasingStyle_BounceOut|EasingStyle_CircularIn|EasingStyle_CircularInOut|EasingStyle_CircularOut|EasingStyle_CubicIn|EasingStyle_CubicInOut|EasingStyle_CubicOut|EasingStyle_EarlyInOut|EasingStyle_ElasticIn|EasingStyle_ElasticInOut|EasingStyle_ElasticOut|EasingStyle_ExponentialIn|EasingStyle_ExponentialInOut|EasingStyle_ExponentialOut|EasingStyle_Linear|EasingStyle_None|EasingStyle_NumStyles|EasingStyle_QuadraticIn|EasingStyle_QuadraticInOut|EasingStyle_QuadraticOut|EasingStyle_QuarticIn|EasingStyle_QuarticInOut|EasingStyle_QuarticOut|EasingStyle_QuinticIn|EasingStyle_QuinticInOut|EasingStyle_QuinticOut|EasingStyle_SineIn|EasingStyle_SineInOut|EasingStyle_SineOut|EulerOrder_NumOrders|EulerOrder_XYZ|EulerOrder_XZY|EulerOrder_YXZ|EulerOrder_YZX|EulerOrder_ZXY|EulerOrder_ZYX|FILE_WATCHING_NOTIFY_DELAY|FILE_WATCHING_SLEEP_TIME|FLT_DECIMAL_DIG|FLT_DIG|FLT_EPSILON|FLT_HAS_SUBNORM|FLT_MANT_DIG|FLT_MAX|FLT_MAX_10_EXP|FLT_MAX_EXP|FLT_MIN|FLT_MIN_10_EXP|FLT_MIN_EXP|FLT_RADIX|FLT_TRUE_MIN|FLYCAM_RUN_SPEED_DEFAULT_VALUE|FLYCAM_WALK_SPEED_DEFAULT_VALUE|FREQUENCY_A0|FREQUENCY_A1|FREQUENCY_A2|FREQUENCY_A3|FREQUENCY_A4|FREQUENCY_A5|FREQUENCY_A6|FREQUENCY_A7|FREQUENCY_A8|FREQUENCY_Ab0|FREQUENCY_Ab1|FREQUENCY_Ab2|FREQUENCY_Ab3|FREQUENCY_Ab4|FREQUENCY_Ab5|FREQUENCY_Ab6|FREQUENCY_Ab7|FREQUENCY_Ab8|FREQUENCY_B0|FREQUENCY_B1|FREQUENCY_B2|FREQUENCY_B3|FREQUENCY_B4|FREQUENCY_B5|FREQUENCY_B6|FREQUENCY_B7|FREQUENCY_B8|FREQUENCY_Bb0|FREQUENCY_Bb1|FREQUENCY_Bb2|FREQUENCY_Bb3|FREQUENCY_Bb4|FREQUENCY_Bb5|FREQUENCY_Bb6|FREQUENCY_Bb7|FREQUENCY_Bb8|FREQUENCY_C0|FREQUENCY_C1|FREQUENCY_C2|FREQUENCY_C3|FREQUENCY_C4|FREQUENCY_C5|FREQUENCY_C6|FREQUENCY_C7|FREQUENCY_C8|FREQUENCY_D0|FREQUENCY_D1|FREQUENCY_D2|FREQUENCY_D3|FREQUENCY_D4|FREQUENCY_D5|FREQUENCY_D6|FREQUENCY_D7|FREQUENCY_D8|FREQUENCY_Db0|FREQUENCY_Db1|FREQUENCY_Db2|FREQUENCY_Db3|FREQUENCY_Db4|FREQUENCY_Db5|FREQUENCY_Db6|FREQUENCY_Db7|FREQUENCY_Db8|FREQUENCY_E0|FREQUENCY_E1|FREQUENCY_E2|FREQUENCY_E3|FREQUENCY_E4|FREQUENCY_E5|FREQUENCY_E6|FREQUENCY_E7|FREQUENCY_E8|FREQUENCY_Eb0|FREQUENCY_Eb1|FREQUENCY_Eb2|FREQUENCY_Eb3|FREQUENCY_Eb4|FREQUENCY_Eb5|FREQUENCY_Eb6|FREQUENCY_Eb7|FREQUENCY_Eb8|FREQUENCY_F0|FREQUENCY_F1|FREQUENCY_F2|FREQUENCY_F3|FREQUENCY_F4|FREQUENCY_F5|FREQUENCY_F6|FREQUENCY_F7|FREQUENCY_F8|FREQUENCY_G0|FREQUENCY_G1|FREQUENCY_G2|FREQUENCY_G3|FREQUENCY_G4|FREQUENCY_G5|FREQUENCY_G6|FREQUENCY_G7|FREQUENCY_G8|FREQUENCY_Gb0|FREQUENCY_Gb1|FREQUENCY_Gb2|FREQUENCY_Gb3|FREQUENCY_Gb4|FREQUENCY_Gb5|FREQUENCY_Gb6|FREQUENCY_Gb7|FREQUENCY_Gb8|FREQUENCY_MIDDLE_C|FloatSize_128|FloatSize_32|FloatSize_64|FontBakeFlag_All|FontBakeFlag_IsColored|FontBakeFlag_IsScalable|FontBakeFlag_IsSpriteFont|FontBakeFlag_IsValid|FontBakeFlag_None|FontBakeFlag_NumFlags|FontFaceFlag_All|FontFaceFlag_BoldItalic|FontFaceFlag_IsActive|FontFaceFlag_IsBold|FontFaceFlag_IsDefault|FontFaceFlag_IsItalic|FontFaceFlag_IsValid|FontFaceFlag_None|FontFaceFlag_NumFlags|FrameBufferChannel_All|FrameBufferChannel_Default|FrameBufferChannel_Depth|FrameBufferChannel_None|FrameBufferChannel_Opacity|FrameBufferChannel_Stencil|FrameBufferError_ApiError|FrameBufferError_None|FrameBufferError_NumErrors|FrameBufferError_OutTextureError|FrameBufferError_TextureError|FrameBufferError_UnsupportedApi|GAME_DBG_BINDINGS_FILE_NAME|GAME_DEFAULT_AUTOSAVE_INTERVAL|GAME_DEFAULT_MASTER_VOLUME|GAME_DEFAULT_MUSIC_VOLUME|GAME_DEFAULT_SOUNDS_VOLUME|GAME_INITIAL_APP_STATE|GAME_LOAD_PERCENT|GAME_SETTINGS_FILE_NAME|GAME_WINDOW_ALWAYS_ON_TOP|GAME_WINDOW_DEFAULT_RESOLUTION|GEM_SIMP_PLAYER_SPAWN_AREA_RADIUS|GEN_SIMP_MAX_BUILD_HEIGHT_ABOVE_SURFACE|GEN_SIMP_MAX_PLAYER_SPAWN_SEARCH_CHUNKS|GEN_SIMP_MAX_RADIUS|GEN_SIMP_MIN_RADIUS|GEN_SIMP_NUM_CHUNKS_TO_GO_ESTIMATE|GEN_SIMP_ORE_MAX_VEIN_DENSITY|GEN_SIMP_ORE_MAX_VEIN_RADIUS|GEN_SIMP_ORE_MIN_VEIN_DENSITY|GEN_SIMP_ORE_MIN_VEIN_RADIUS|GEN_SIMP_ORE_RANDOM_SEED_HASH|GEN_SIMP_SIMPLEX_NOISE_TEX_WIDTH|GL_ALPHA|GL_ALPHA_TEST|GL_ALWAYS|GL_BGR|GL_BGRA|GL_BLEND|GL_BLUE|GL_BYTE|GL_CCW|GL_CLAMP_TO_EDGE|GL_CONTEXT_LOST|GL_CULL_FACE|GL_CW|GL_DEPTH_TEST|GL_DST_ALPHA|GL_DST_COLOR|GL_DYNAMIC_COPY|GL_DYNAMIC_DRAW|GL_DYNAMIC_READ|GL_EQUAL|GL_FALSE|GL_FLOAT|GL_GEQUAL|GL_GREATER|GL_GREEN|GL_INT|GL_INVALID_ENUM|GL_INVALID_FRAMEBUFFER_OPERATION|GL_INVALID_OPERATION|GL_INVALID_VALUE|GL_LEQUAL|GL_LESS|GL_LINEAR|GL_LINEAR_MIPMAP_LINEAR|GL_LINEAR_MIPMAP_NEAREST|GL_NEAREST|GL_NEAREST_MIPMAP_LINEAR|GL_NEAREST_MIPMAP_NEAREST|GL_NEVER|GL_NONE|GL_NOTEQUAL|GL_NO_ERROR|GL_ONE|GL_ONE_MINUS_DST_ALPHA|GL_ONE_MINUS_DST_COLOR|GL_ONE_MINUS_SRC_ALPHA|GL_ONE_MINUS_SRC_COLOR|GL_OUT_OF_MEMORY|GL_RED|GL_REPEAT|GL_RGB|GL_RGBA|GL_SHORT|GL_SRC_ALPHA|GL_SRC_ALPHA_SATURATE|GL_SRC_COLOR|GL_STACK_OVERFLOW|GL_STACK_UNDERFLOW|GL_STATIC_COPY|GL_STATIC_DRAW|GL_STATIC_READ|GL_STREAM_COPY|GL_STREAM_DRAW|GL_STREAM_READ|GL_TABLE_TOO_LARGE|GL_TEXTURE0|GL_TEXTURE1|GL_TEXTURE10|GL_TEXTURE11|GL_TEXTURE12|GL_TEXTURE13|GL_TEXTURE14|GL_TEXTURE15|GL_TEXTURE16|GL_TEXTURE17|GL_TEXTURE18|GL_TEXTURE19|GL_TEXTURE2|GL_TEXTURE20|GL_TEXTURE21|GL_TEXTURE22|GL_TEXTURE23|GL_TEXTURE24|GL_TEXTURE25|GL_TEXTURE26|GL_TEXTURE27|GL_TEXTURE28|GL_TEXTURE29|GL_TEXTURE3|GL_TEXTURE30|GL_TEXTURE31|GL_TEXTURE4|GL_TEXTURE5|GL_TEXTURE6|GL_TEXTURE7|GL_TEXTURE8|GL_TEXTURE9|GL_TEXTURE_1D|GL_TEXTURE_2D|GL_TEXTURE_2D_ARRAY|GL_TEXTURE_MAG_FILTER|GL_TEXTURE_MIN_FILTER|GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|GL_TRUE|GL_UNSIGNED_BYTE|GL_UNSIGNED_INT|GL_UNSIGNED_SHORT|GL_ZERO|GRAVITY_ACCEL_DEFAULT_VALUE|GRAVITY_BOUNDS_ALPHA|GRAVITY_BOUNDS_ANIMATION_TIME|GRAVITY_BOUNDS_MAX_DRAW_DISTANCE|GRAVITY_BOUNDS_MIN_DRAW_DISTANCE|GYLIB_ASSERTIONS_ENABLED|GYLIB_USE_ASSERT_FAILURE_FUNC|GY_CUSTOM_STD_LIB|GY_MAX_FLOAT_PARSE_LENGTH|GY_STD_LIB_ALLOWED|GY_WASM_STD_LIB|GameTask_Base|GameTask_NumTypes|GameTask_Test|GenAlgorithmStage_Caves|GenAlgorithmStage_Final|GenAlgorithmStage_Foliage|GenAlgorithmStage_Form|GenAlgorithmStage_None|GenAlgorithmStage_NumStages|GenAlgorithmStage_Ores|GenAlgorithm_Fill|GenAlgorithm_Flat|GenAlgorithm_None|GenAlgorithm_NumAlgorithms|GenAlgorithm_SimpleAsteroid|Grey1|Grey10|Grey10_Value|Grey11|Grey11_Value|Grey12|Grey12_Value|Grey13|Grey13_Value|Grey14|Grey14_Value|Grey1_Value|Grey2|Grey2_Value|Grey3|Grey3_Value|Grey4|Grey4_Value|Grey5|Grey5_Value|Grey6|Grey6_Value|Grey7|Grey7_Value|Grey8|Grey8_Value|Grey9|Grey9_Value|HEXAGON_INNER_ANGLE32|HEXAGON_INNER_ANGLE64|HEXAGON_INNER_ANGLE_DEGREES|HEXAGON_NUM_EDGES|HEXAGON_NUM_VERTICES|HalfPi32|HalfPi64|IMPORT|INPUT_DISP_CHAR_0_CODEPOINT|INPUT_DISP_CHAR_0_STR|INPUT_DISP_CHAR_1_CODEPOINT|INPUT_DISP_CHAR_1_STR|INPUT_DISP_CHAR_2_CODEPOINT|INPUT_DISP_CHAR_2_STR|INPUT_DISP_CHAR_3_CODEPOINT|INPUT_DISP_CHAR_3_STR|INPUT_DISP_CHAR_4_CODEPOINT|INPUT_DISP_CHAR_4_STR|INPUT_DISP_CHAR_5_CODEPOINT|INPUT_DISP_CHAR_5_STR|INPUT_DISP_CHAR_6_CODEPOINT|INPUT_DISP_CHAR_6_STR|INPUT_DISP_CHAR_7_CODEPOINT|INPUT_DISP_CHAR_7_STR|INPUT_DISP_CHAR_8_CODEPOINT|INPUT_DISP_CHAR_8_STR|INPUT_DISP_CHAR_9_CODEPOINT|INPUT_DISP_CHAR_9_STR|INPUT_DISP_CHAR_ALT_CODEPOINT|INPUT_DISP_CHAR_ALT_STR|INPUT_DISP_CHAR_A_CODEPOINT|INPUT_DISP_CHAR_A_STR|INPUT_DISP_CHAR_BACK_CODEPOINT|INPUT_DISP_CHAR_BACK_STR|INPUT_DISP_CHAR_BLANK_CODEPOINT|INPUT_DISP_CHAR_BLANK_SEMI_WIDE_CODEPOINT|INPUT_DISP_CHAR_BLANK_SEMI_WIDE_STR|INPUT_DISP_CHAR_BLANK_SQUARE_CODEPOINT|INPUT_DISP_CHAR_BLANK_SQUARE_LARGE_CODEPOINT|INPUT_DISP_CHAR_BLANK_SQUARE_LARGE_STR|INPUT_DISP_CHAR_BLANK_SQUARE_STR|INPUT_DISP_CHAR_BLANK_STR|INPUT_DISP_CHAR_BLANK_WIDE_CODEPOINT|INPUT_DISP_CHAR_BLANK_WIDE_STR|INPUT_DISP_CHAR_B_CODEPOINT|INPUT_DISP_CHAR_B_STR|INPUT_DISP_CHAR_CAPS_CODEPOINT|INPUT_DISP_CHAR_CAPS_STR|INPUT_DISP_CHAR_CLOSE_BRACKET_CODEPOINT|INPUT_DISP_CHAR_CLOSE_BRACKET_STR|INPUT_DISP_CHAR_COLON_CODEPOINT|INPUT_DISP_CHAR_COLON_STR|INPUT_DISP_CHAR_COMMA_CODEPOINT|INPUT_DISP_CHAR_COMMA_STR|INPUT_DISP_CHAR_CONTROL_CODEPOINT|INPUT_DISP_CHAR_CONTROL_STR|INPUT_DISP_CHAR_C_CODEPOINT|INPUT_DISP_CHAR_C_STR|INPUT_DISP_CHAR_DELETE_CODEPOINT|INPUT_DISP_CHAR_DELETE_STR|INPUT_DISP_CHAR_DOWN_CODEPOINT|INPUT_DISP_CHAR_DOWN_STR|INPUT_DISP_CHAR_D_CODEPOINT|INPUT_DISP_CHAR_D_STR|INPUT_DISP_CHAR_END_CODEPOINT|INPUT_DISP_CHAR_END_STR|INPUT_DISP_CHAR_ENTER_CODEPOINT|INPUT_DISP_CHAR_ENTER_STR|INPUT_DISP_CHAR_ESCAPE_CODEPOINT|INPUT_DISP_CHAR_ESCAPE_STR|INPUT_DISP_CHAR_E_CODEPOINT|INPUT_DISP_CHAR_E_STR|INPUT_DISP_CHAR_F10_CODEPOINT|INPUT_DISP_CHAR_F10_STR|INPUT_DISP_CHAR_F11_CODEPOINT|INPUT_DISP_CHAR_F11_STR|INPUT_DISP_CHAR_F12_CODEPOINT|INPUT_DISP_CHAR_F12_STR|INPUT_DISP_CHAR_F1_CODEPOINT|INPUT_DISP_CHAR_F1_STR|INPUT_DISP_CHAR_F2_CODEPOINT|INPUT_DISP_CHAR_F2_STR|INPUT_DISP_CHAR_F3_CODEPOINT|INPUT_DISP_CHAR_F3_STR|INPUT_DISP_CHAR_F4_CODEPOINT|INPUT_DISP_CHAR_F4_STR|INPUT_DISP_CHAR_F5_CODEPOINT|INPUT_DISP_CHAR_F5_STR|INPUT_DISP_CHAR_F6_CODEPOINT|INPUT_DISP_CHAR_F6_STR|INPUT_DISP_CHAR_F7_CODEPOINT|INPUT_DISP_CHAR_F7_STR|INPUT_DISP_CHAR_F8_CODEPOINT|INPUT_DISP_CHAR_F8_STR|INPUT_DISP_CHAR_F9_CODEPOINT|INPUT_DISP_CHAR_F9_STR|INPUT_DISP_CHAR_F_CODEPOINT|INPUT_DISP_CHAR_F_STR|INPUT_DISP_CHAR_G_CODEPOINT|INPUT_DISP_CHAR_G_STR|INPUT_DISP_CHAR_HOME_CODEPOINT|INPUT_DISP_CHAR_HOME_STR|INPUT_DISP_CHAR_H_CODEPOINT|INPUT_DISP_CHAR_H_STR|INPUT_DISP_CHAR_INSERT_CODEPOINT|INPUT_DISP_CHAR_INSERT_STR|INPUT_DISP_CHAR_I_CODEPOINT|INPUT_DISP_CHAR_I_STR|INPUT_DISP_CHAR_J_CODEPOINT|INPUT_DISP_CHAR_J_STR|INPUT_DISP_CHAR_K_CODEPOINT|INPUT_DISP_CHAR_K_STR|INPUT_DISP_CHAR_LEFT_CODEPOINT|INPUT_DISP_CHAR_LEFT_STR|INPUT_DISP_CHAR_L_CODEPOINT|INPUT_DISP_CHAR_L_STR|INPUT_DISP_CHAR_MINUS_CODEPOINT|INPUT_DISP_CHAR_MINUS_STR|INPUT_DISP_CHAR_MOUSE_BLANK_CODEPOINT|INPUT_DISP_CHAR_MOUSE_BLANK_STR|INPUT_DISP_CHAR_MOUSE_LEFT_CODEPOINT|INPUT_DISP_CHAR_MOUSE_LEFT_STR|INPUT_DISP_CHAR_MOUSE_MIDDLE_CODEPOINT|INPUT_DISP_CHAR_MOUSE_MIDDLE_STR|INPUT_DISP_CHAR_MOUSE_RIGHT_CODEPOINT|INPUT_DISP_CHAR_MOUSE_RIGHT_STR|INPUT_DISP_CHAR_M_CODEPOINT|INPUT_DISP_CHAR_M_STR|INPUT_DISP_CHAR_NT_A_CODEPOINT|INPUT_DISP_CHAR_NT_A_STR|INPUT_DISP_CHAR_NT_B_CODEPOINT|INPUT_DISP_CHAR_NT_B_STR|INPUT_DISP_CHAR_NT_DOWN_CODEPOINT|INPUT_DISP_CHAR_NT_DOWN_STR|INPUT_DISP_CHAR_NT_DPAD_CODEPOINT|INPUT_DISP_CHAR_NT_DPAD_STR|INPUT_DISP_CHAR_NT_LEFT_CODEPOINT|INPUT_DISP_CHAR_NT_LEFT_STICK_CODEPOINT|INPUT_DISP_CHAR_NT_LEFT_STICK_STR|INPUT_DISP_CHAR_NT_LEFT_STR|INPUT_DISP_CHAR_NT_L_CODEPOINT|INPUT_DISP_CHAR_NT_L_STR|INPUT_DISP_CHAR_NT_MINUS_CODEPOINT|INPUT_DISP_CHAR_NT_MINUS_STR|INPUT_DISP_CHAR_NT_PLUS_CODEPOINT|INPUT_DISP_CHAR_NT_PLUS_STR|INPUT_DISP_CHAR_NT_RIGHT_CODEPOINT|INPUT_DISP_CHAR_NT_RIGHT_STICK_CODEPOINT|INPUT_DISP_CHAR_NT_RIGHT_STICK_STR|INPUT_DISP_CHAR_NT_RIGHT_STR|INPUT_DISP_CHAR_NT_R_CODEPOINT|INPUT_DISP_CHAR_NT_R_STR|INPUT_DISP_CHAR_NT_UNKNOWN_CODEPOINT|INPUT_DISP_CHAR_NT_UNKNOWN_STR|INPUT_DISP_CHAR_NT_UP_CODEPOINT|INPUT_DISP_CHAR_NT_UP_STR|INPUT_DISP_CHAR_NT_X_CODEPOINT|INPUT_DISP_CHAR_NT_X_STR|INPUT_DISP_CHAR_NT_Y_CODEPOINT|INPUT_DISP_CHAR_NT_Y_STR|INPUT_DISP_CHAR_NT_ZL_CODEPOINT|INPUT_DISP_CHAR_NT_ZL_STR|INPUT_DISP_CHAR_NT_ZR_CODEPOINT|INPUT_DISP_CHAR_NT_ZR_STR|INPUT_DISP_CHAR_N_CODEPOINT|INPUT_DISP_CHAR_N_STR|INPUT_DISP_CHAR_OPEN_BRACKET_CODEPOINT|INPUT_DISP_CHAR_OPEN_BRACKET_STR|INPUT_DISP_CHAR_O_CODEPOINT|INPUT_DISP_CHAR_O_STR|INPUT_DISP_CHAR_PAGE_DOWN_CODEPOINT|INPUT_DISP_CHAR_PAGE_DOWN_STR|INPUT_DISP_CHAR_PAGE_UP_CODEPOINT|INPUT_DISP_CHAR_PAGE_UP_STR|INPUT_DISP_CHAR_PERIOD_CODEPOINT|INPUT_DISP_CHAR_PERIOD_STR|INPUT_DISP_CHAR_PIPE_CODEPOINT|INPUT_DISP_CHAR_PIPE_STR|INPUT_DISP_CHAR_PLUS_CODEPOINT|INPUT_DISP_CHAR_PLUS_STR|INPUT_DISP_CHAR_PS_CIRCLE_CODEPOINT|INPUT_DISP_CHAR_PS_CIRCLE_STR|INPUT_DISP_CHAR_PS_CROSS_CODEPOINT|INPUT_DISP_CHAR_PS_CROSS_STR|INPUT_DISP_CHAR_PS_DOWN_CODEPOINT|INPUT_DISP_CHAR_PS_DOWN_STR|INPUT_DISP_CHAR_PS_DPAD_CODEPOINT|INPUT_DISP_CHAR_PS_DPAD_STR|INPUT_DISP_CHAR_PS_L1_CODEPOINT|INPUT_DISP_CHAR_PS_L1_STR|INPUT_DISP_CHAR_PS_L2_CODEPOINT|INPUT_DISP_CHAR_PS_L2_STR|INPUT_DISP_CHAR_PS_L3_CODEPOINT|INPUT_DISP_CHAR_PS_L3_STR|INPUT_DISP_CHAR_PS_LEFT_CODEPOINT|INPUT_DISP_CHAR_PS_LEFT_STICK_CODEPOINT|INPUT_DISP_CHAR_PS_LEFT_STICK_STR|INPUT_DISP_CHAR_PS_LEFT_STR|INPUT_DISP_CHAR_PS_OPTIONS_CODEPOINT|INPUT_DISP_CHAR_PS_OPTIONS_STR|INPUT_DISP_CHAR_PS_R1_CODEPOINT|INPUT_DISP_CHAR_PS_R1_STR|INPUT_DISP_CHAR_PS_R2_CODEPOINT|INPUT_DISP_CHAR_PS_R2_STR|INPUT_DISP_CHAR_PS_R3_CODEPOINT|INPUT_DISP_CHAR_PS_R3_STR|INPUT_DISP_CHAR_PS_RIGHT_CODEPOINT|INPUT_DISP_CHAR_PS_RIGHT_STICK_CODEPOINT|INPUT_DISP_CHAR_PS_RIGHT_STICK_STR|INPUT_DISP_CHAR_PS_RIGHT_STR|INPUT_DISP_CHAR_PS_SHARE_CODEPOINT|INPUT_DISP_CHAR_PS_SHARE_STR|INPUT_DISP_CHAR_PS_SQUARE_CODEPOINT|INPUT_DISP_CHAR_PS_SQUARE_STR|INPUT_DISP_CHAR_PS_TRIANGLE_CODEPOINT|INPUT_DISP_CHAR_PS_TRIANGLE_STR|INPUT_DISP_CHAR_PS_UNKNOWN_CODEPOINT|INPUT_DISP_CHAR_PS_UNKNOWN_STR|INPUT_DISP_CHAR_PS_UP_CODEPOINT|INPUT_DISP_CHAR_PS_UP_STR|INPUT_DISP_CHAR_P_CODEPOINT|INPUT_DISP_CHAR_P_STR|INPUT_DISP_CHAR_QUESTION_CODEPOINT|INPUT_DISP_CHAR_QUESTION_STR|INPUT_DISP_CHAR_QUOTE_CODEPOINT|INPUT_DISP_CHAR_QUOTE_STR|INPUT_DISP_CHAR_Q_CODEPOINT|INPUT_DISP_CHAR_Q_STR|INPUT_DISP_CHAR_RIGHT_CODEPOINT|INPUT_DISP_CHAR_RIGHT_STR|INPUT_DISP_CHAR_R_CODEPOINT|INPUT_DISP_CHAR_R_STR|INPUT_DISP_CHAR_SHIFT_CODEPOINT|INPUT_DISP_CHAR_SHIFT_STR|INPUT_DISP_CHAR_SPACE_CODEPOINT|INPUT_DISP_CHAR_SPACE_STR|INPUT_DISP_CHAR_S_CODEPOINT|INPUT_DISP_CHAR_S_STR|INPUT_DISP_CHAR_TAB_CODEPOINT|INPUT_DISP_CHAR_TAB_STR|INPUT_DISP_CHAR_TILDE_CODEPOINT|INPUT_DISP_CHAR_TILDE_STR|INPUT_DISP_CHAR_T_CODEPOINT|INPUT_DISP_CHAR_T_STR|INPUT_DISP_CHAR_UP_CODEPOINT|INPUT_DISP_CHAR_UP_STR|INPUT_DISP_CHAR_U_CODEPOINT|INPUT_DISP_CHAR_U_STR|INPUT_DISP_CHAR_V_CODEPOINT|INPUT_DISP_CHAR_V_STR|INPUT_DISP_CHAR_W_CODEPOINT|INPUT_DISP_CHAR_W_STR|INPUT_DISP_CHAR_XB_A_CODEPOINT|INPUT_DISP_CHAR_XB_A_STR|INPUT_DISP_CHAR_XB_BACK_CODEPOINT|INPUT_DISP_CHAR_XB_BACK_STR|INPUT_DISP_CHAR_XB_B_CODEPOINT|INPUT_DISP_CHAR_XB_B_STR|INPUT_DISP_CHAR_XB_DOWN_CODEPOINT|INPUT_DISP_CHAR_XB_DOWN_STR|INPUT_DISP_CHAR_XB_DPAD_CODEPOINT|INPUT_DISP_CHAR_XB_DPAD_STR|INPUT_DISP_CHAR_XB_L3_CODEPOINT|INPUT_DISP_CHAR_XB_L3_STR|INPUT_DISP_CHAR_XB_LB_CODEPOINT|INPUT_DISP_CHAR_XB_LB_STR|INPUT_DISP_CHAR_XB_LEFT_CODEPOINT|INPUT_DISP_CHAR_XB_LEFT_STICK_CODEPOINT|INPUT_DISP_CHAR_XB_LEFT_STICK_STR|INPUT_DISP_CHAR_XB_LEFT_STR|INPUT_DISP_CHAR_XB_LT_CODEPOINT|INPUT_DISP_CHAR_XB_LT_STR|INPUT_DISP_CHAR_XB_R3_CODEPOINT|INPUT_DISP_CHAR_XB_R3_STR|INPUT_DISP_CHAR_XB_RB_CODEPOINT|INPUT_DISP_CHAR_XB_RB_STR|INPUT_DISP_CHAR_XB_RIGHT_CODEPOINT|INPUT_DISP_CHAR_XB_RIGHT_STICK_CODEPOINT|INPUT_DISP_CHAR_XB_RIGHT_STICK_STR|INPUT_DISP_CHAR_XB_RIGHT_STR|INPUT_DISP_CHAR_XB_RT_CODEPOINT|INPUT_DISP_CHAR_XB_RT_STR|INPUT_DISP_CHAR_XB_START_CODEPOINT|INPUT_DISP_CHAR_XB_START_STR|INPUT_DISP_CHAR_XB_UNKNOWN_CODEPOINT|INPUT_DISP_CHAR_XB_UNKNOWN_STR|INPUT_DISP_CHAR_XB_UP_CODEPOINT|INPUT_DISP_CHAR_XB_UP_STR|INPUT_DISP_CHAR_XB_X_CODEPOINT|INPUT_DISP_CHAR_XB_X_STR|INPUT_DISP_CHAR_XB_Y_CODEPOINT|INPUT_DISP_CHAR_XB_Y_STR|INPUT_DISP_CHAR_X_CODEPOINT|INPUT_DISP_CHAR_X_STR|INPUT_DISP_CHAR_Y_CODEPOINT|INPUT_DISP_CHAR_Y_STR|INPUT_DISP_CHAR_Z_CODEPOINT|INPUT_DISP_CHAR_Z_STR|INT16_MAX|INT16_MIN|INT32_MAX|INT32_MIN|INT64_MAX|INT64_MIN|INT8_MAX|INT8_MIN|INTERNATIONAL_FONT_NAME|INTPTR_MAX|INTPTR_MIN|INT_MAX|INT_MIN|INV_DEFAULT_WINDOW_MARGIN|INV_PLAYER_BACK_MARGIN_BOTTOM|INV_PLAYER_BACK_MARGIN_LEFT|INV_PLAYER_BACK_MARGIN_RIGHT|INV_PLAYER_BACK_MARGIN_TOP|INV_PLAYER_HOTBAR_MARGIN_BOTTOM|INV_PLAYER_HOTBAR_MARGIN_LEFT|INV_PLAYER_HOTBAR_MARGIN_RIGHT|INV_PLAYER_HOTBAR_MARGIN_TOP|INV_PLAYER_HOTBAR_OFFSET|INV_SLOT_DRAW_PADDING|INV_SLOT_DRAW_SIZE|INV_SLOT_HOTBAR_SELECTED_DRAW_SIZE|INV_STACK_DRAW_SIZE|INV_WINDOW_TOPBAR_HEIGHT|ITALIC_TOGGLE_CHAR|InputEventType_Character|InputEventType_ControllerBtn|InputEventType_FileDropped|InputEventType_Key|InputEventType_MouseBtn|InputEventType_MouseHover|InputEventType_None|InputEventType_NumTypes|InputEventType_TaskCompleted|InputEventType_WindowFocus|InvContainerType_CraftingTable|InvContainerType_Furnace|InvContainerType_None|InvContainerType_NumTypes|InvContainerType_Player|InvContainerType_PlayerCrafting|InvContainerType_SmallChest|InvSlotFlag_Crafting|InvSlotFlag_Hotbar|InvSlotFlag_Machine|InvSlotFlag_None|InvSlotFlag_NumFlags|InvSlotFlag_Output|InvSlotStateFlag_Dropping|InvSlotStateFlag_Grabbed|InvSlotStateFlag_Hovered|InvSlotStateFlag_None|InvSlotStateFlag_NumFlags|InvSlotStateFlag_Uncrafted|InvStackFlag_InWorld|InvStackFlag_None|InvStackFlag_NumFlags|InvUiManagerSlotPntr_Empty|ItemIdCategory_Any|ItemIdCategory_None|ItemIdCategory_NumCategories|ItemIdCategory_Stone|ItemIdCategory_WoodLog|ItemIdCategory_WoodPlanks|ItemIdHardnessType_Axe|ItemIdHardnessType_None|ItemIdHardnessType_NumTypes|ItemIdHardnessType_Pickaxe|ItemIdHardnessType_Shovel|ItemIdInWorldRenderType_None|ItemIdInWorldRenderType_NumTypes|ItemIdInWorldRenderType_OpaqueCustom|ItemIdInWorldRenderType_OpaqueVoxel|ItemIdInWorldRenderType_TransparentCustom|ItemIdInWorldRenderType_TransparentVoxel|ItemIdRotationalMode_All|ItemIdRotationalMode_None|ItemIdRotationalMode_NumModes|ItemIdRotationalMode_VerticalAxisOnly|ItemId_Apple|ItemId_Bedrock|ItemId_BlackBrick|ItemId_BlackCobblestone|ItemId_Bookshelf|ItemId_Cobblestone|ItemId_CraftingTable|ItemId_Debug|ItemId_DiamondAxe|ItemId_DiamondPickaxe|ItemId_DiamondShovel|ItemId_DiamondSword|ItemId_Dirt|ItemId_EndBrick|ItemId_EndStone|ItemId_Furnace|ItemId_Generic|ItemId_Glass|ItemId_GoldAxe|ItemId_GoldPickaxe|ItemId_GoldShovel|ItemId_GoldSword|ItemId_Grass|ItemId_GrassAlien|ItemId_GrassPath|ItemId_Gravel|ItemId_GravityChanger|ItemId_GravityDust|ItemId_GravityFloor|ItemId_GravityOre|ItemId_GreenSquares|ItemId_GreenTiles|ItemId_Ice|ItemId_IronAxe|ItemId_IronPickaxe|ItemId_IronShovel|ItemId_IronSword|ItemId_Lapis|ItemId_Metal|ItemId_MetalFrame|ItemId_MetalGrate|ItemId_NetherBrick|ItemId_Netherrack|ItemId_None|ItemId_NumIds|ItemId_Obsidian|ItemId_Pipe|ItemId_Pumpkin|ItemId_PurplePillar|ItemId_PurpleSquares|ItemId_QuartzChiseled|ItemId_QuartzPillar|ItemId_QuartzSlabs|ItemId_QuartzSmooth|ItemId_RedBricks|ItemId_Redstone|ItemId_Sand|ItemId_Slime|ItemId_SmallChest|ItemId_SmoothStone|ItemId_Soulsand|ItemId_Stick|ItemId_Stone|ItemId_StoneAxe|ItemId_StoneBrick|ItemId_StoneBricksCracked|ItemId_StoneBricksMossy|ItemId_StonePickaxe|ItemId_StoneShovel|ItemId_StoneSquares|ItemId_StoneSword|ItemId_StoneTarget|ItemId_WhiteSmooth|ItemId_WoodAxe|ItemId_WoodLog|ItemId_WoodPickaxe|ItemId_WoodPlank|ItemId_WoodShovel|ItemId_WoodSword|Key_0|Key_1|Key_2|Key_3|Key_4|Key_5|Key_6|Key_7|Key_8|Key_9|Key_A|Key_Alt|Key_B|Key_Backspace|Key_C|Key_CapsLock|Key_CloseBracket|Key_Colon|Key_Comma|Key_Control|Key_D|Key_Delete|Key_Down|Key_E|Key_End|Key_Enter|Key_Escape|Key_F|Key_F1|Key_F10|Key_F11|Key_F12|Key_F2|Key_F3|Key_F4|Key_F5|Key_F6|Key_F7|Key_F8|Key_F9|Key_G|Key_H|Key_Home|Key_I|Key_Insert|Key_J|Key_K|Key_L|Key_Left|Key_M|Key_Minus|Key_N|Key_None|Key_Num0|Key_Num1|Key_Num2|Key_Num3|Key_Num4|Key_Num5|Key_Num6|Key_Num7|Key_Num8|Key_Num9|Key_NumAdd|Key_NumDivide|Key_NumKeys|Key_NumLock|Key_NumMultiply|Key_NumPeriod|Key_NumSubtract|Key_O|Key_OpenBracket|Key_P|Key_PageDown|Key_PageUp|Key_Period|Key_Pipe|Key_Plus|Key_Q|Key_QuestionMark|Key_Quote|Key_R|Key_Right|Key_S|Key_Shift|Key_Space|Key_T|Key_Tab|Key_Tilde|Key_U|Key_Up|Key_V|Key_W|Key_X|Key_Y|Key_Z|LDBL_DECIMAL_DIG|LDBL_DIG|LDBL_EPSILON|LDBL_HAS_SUBNORM|LDBL_MANT_DIG|LDBL_MAX|LDBL_MAX_10_EXP|LDBL_MAX_EXP|LDBL_MIN|LDBL_MIN_10_EXP|LDBL_MIN_EXP|LDBL_TRUE_MIN|LINUX_COMPILATION|LLONG_MAX|LLONG_MIN|LOCK_PERF_GRAPH_SCALE|LONG_BIT|LONG_MAX|LONG_MIN|LSELECT_BACK_BTN_CORNER_RADIUS|LSELECT_BACK_BTN_MARGIN|LSELECT_BACK_BTN_SIZE|LSELECT_CREATE_BTN_CORNER_RADIUS|LSELECT_CREATE_BTN_SIZE|LSELECT_ENTRY_HEIGHT|LSELECT_ENTRY_ICON_MARGIN_RIGHT|LSELECT_ENTRY_INNER_PADDING|LSELECT_ENTRY_MARGIN|LSELECT_ENTRY_PADDING|LSELECT_GEN_BAR_HEIGHT|LSELECT_GEN_BAR_WIDTH_PERCENT|LSELECT_GEN_CHUNK_GEN_PERCENT_WEIGHT|LSELECT_GEN_STRUCTURE_PASS_PERCENT_WEIGHT|LSELECT_LIST_BELOW_TEXT_PADDING|LSELECT_LIST_INNER_PADDING|LSELECT_LIST_SCROLL_LAG|LSELECT_LIST_SCROLL_SPEED|LSELECT_LIST_TOP_BOTTOM_MARGIN|LSELECT_LIST_WIDTH|LSELECT_NAME_TEXTBOX_WIDTH_PERCENT|LSELECT_NEW_BTN_CORNER_RADIUS|LSELECT_NEW_BTN_SIZE|MAX_DAYS_IN_MONTH|MAX_NUM_COLLISION_SHAPES|MAX_NUM_CONTROLLERS|MAX_NUM_RESOURCE_FONT_BAKES|MAX_NUM_RESOURCE_FONT_FACES|MAX_NUM_VERTEX_ATTRIBUTES|MAX_TIME_SCALE_FOR_PLAYER|MB_LEN_MAX|MINING_BASE_TIME_DEFAULT|MINING_BASE_TIME_DIRT|MINING_BASE_TIME_STONE|MINING_BASE_TIME_UNKNOWN|MINING_BASE_TIME_WOOD|MINING_HARDNESS_STEPS_DEFAULT|MINING_HARDNESS_STEPS_DIRT|MINING_HARDNESS_STEPS_STONE|MINING_HARDNESS_STEPS_WOOD|MINING_TIER2_MULT|MINING_TIER3_MULT|MINING_TIER4_MULT|MINING_TIER5_MULT|MINING_UNTOOLED_PENALTY_DIRT|MINING_UNTOOLED_PENALTY_STONE|MINING_UNTOOLED_PENALTY_WOOD|MMENU_BTN_MARGIN|MMENU_BTN_PADDING|MMENU_BTN_SIZE|MMENU_BTN_SND_DEDUPLICATE_TIME|MMENU_FADE_IN_ANIM_TIME|MMENU_LOGO_ANIM_TIME|MMENU_LOGO_CLICK_ANIM_TIME|MMENU_MUSIC_FADE_TIME|MMENU_TITLE_TEXT|MUTEX_LOCK_INFINITE|MachineType_Furnace|MachineType_None|MachineType_NumTypes|MainMenuBtn_Exit|MainMenuBtn_Multiplayer|MainMenuBtn_NumButtons|MainMenuBtn_Settings|MainMenuBtn_Singleplayer|Mat4_Identity|Matrix4x4_Identity|MemArenaType_Alias|MemArenaType_Buffer|MemArenaType_FixedHeap|MemArenaType_MarkedStack|MemArenaType_None|MemArenaType_PagedHeap|MemArenaType_Redirect|MemArenaType_StdHeap|ModifierKey_All|ModifierKey_Alt|ModifierKey_AltShift|ModifierKey_CapsLock|ModifierKey_Ctrl|ModifierKey_CtrlAlt|ModifierKey_CtrlAltShift|ModifierKey_CtrlShift|ModifierKey_None|ModifierKey_NumKeys|ModifierKey_Shift|MonokaiBack|MonokaiBack_Value|MonokaiBlue|MonokaiBlue_Value|MonokaiBrown|MonokaiBrown_Value|MonokaiDarkGray|MonokaiDarkGray_Value|MonokaiDarkGreen|MonokaiDarkGreen_Value|MonokaiFadedYellow|MonokaiFadedYellow_Value|MonokaiGray1|MonokaiGray1_Value|MonokaiGray2|MonokaiGray2_Value|MonokaiGreen|MonokaiGreen_Value|MonokaiLightBlue|MonokaiLightBlue_Value|MonokaiLightGray|MonokaiLightGray_Value|MonokaiLightPurple|MonokaiLightPurple_Value|MonokaiLightRed|MonokaiLightRed_Value|MonokaiLightYellow|MonokaiLightYellow_Value|MonokaiMagenta|MonokaiMagenta_Value|MonokaiOrange|MonokaiOrange_Value|MonokaiPurple|MonokaiPurple_Value|MonokaiRed|MonokaiRed_Value|MonokaiWhite|MonokaiWhite_Value|MonokaiYellow|MonokaiYellow_Value|Month_April|Month_August|Month_December|Month_February|Month_January|Month_July|Month_June|Month_March|Month_May|Month_November|Month_NumMonths|Month_October|Month_September|MouseBtn_Left|MouseBtn_Middle|MouseBtn_None|MouseBtn_NumBtns|MouseBtn_Right|MusicFade_FadeInThenOut|MusicFade_FadeOutThenIn|MusicFade_Instant|MusicFade_LinearCrossfade|MusicFade_None|MusicFade_NumTypes|MusicFade_PartialCrossFade|MusicFade_Step|MyStr_Empty|NULL|NUM_DAYS_PER_4YEARS|NUM_DAYS_PER_WEEK|NUM_DAYS_PER_YEAR|NUM_HOUR_PER_DAY|NUM_MIN_PER_DAY|NUM_MIN_PER_HOUR|NUM_MIN_PER_WEEK|NUM_MIN_PER_YEAR|NUM_MS_PER_DAY|NUM_MS_PER_HOUR|NUM_MS_PER_MINUTE|NUM_MS_PER_SECOND|NUM_MS_PER_WEEK|NUM_MS_PER_YEAR|NUM_PREDEF_GREYSCALE_COLORS|NUM_PREDEF_MONOKAI_COLORS|NUM_PREDEF_PAL_COLORS|NUM_PREDEF_PURE_COLORS|NUM_SEC_PER_DAY|NUM_SEC_PER_HOUR|NUM_SEC_PER_MINUTE|NUM_SEC_PER_WEEK|NUM_SEC_PER_YEAR|NoColor|NoColor_Value|OSX_COMPILATION|Obb2_Zero|Obb3_Zero|PARTICLES_FILE_PATH|PENTAGON_ANGLE_STEP32|PENTAGON_ANGLE_STEP64|PENTAGON_INTERNAL_ANGLE32|PENTAGON_INTERNAL_ANGLE64|PENTAGON_NUM_EDGES|PENTAGON_NUM_VERTICES|PERF_GRAPH_DATA_WIDTH|PERF_GRAPH_HEIGHT|PERF_GRAPH_LENGTH|PERF_GRAPH_MAX_SCALE|PERF_GRAPH_MIN_SCALE|PERF_GRAPH_PAUSE_LOCK_BTNS_MARGIN|PERF_GRAPH_PAUSE_LOCK_BTNS_SIZE|PIGGEN_NEW_LINE|PIG_AUDIO_OUT_SAMPLES_BUFFER_LENGTH|PIG_DBG_BINDINGS_CONTROLLER_BINDING_PREFIX|PIG_DBG_BINDINGS_FILE_PREFIX_LENGTH|PIG_DBG_BINDINGS_FILE_PREFIX_STR|PIG_DBG_BINDINGS_MOUSE_BINDING_PREFIX|PIG_DEFAULT_FRAMERATE|PIG_DEFAULT_FRAME_TIME|PIG_DOUBLE_CLICK_MAX_DIST|PIG_DOUBLE_CLICK_TIME|PIG_MAIN_ARENA_PAGE_SIZE|PIG_MAX_NUM_NOTIFICATIONS|PIG_MAX_SOUND_INSTANCES|PIG_MEM_GRAPH_ARENA_PADDING|PIG_MEM_GRAPH_CHANGE_DISPLAY_TIME|PIG_MEM_GRAPH_NUM_INFO_LINES|PIG_MEM_GRAPH_PAGE_APPEAR_TIME|PIG_MEM_GRAPH_PAGE_PADDING|PIG_MEM_GRAPH_PAGE_WIDTH|PIG_MEM_GRAPH_USED_DISPLAY_DELAY|PIG_NOTIFICATIONS_ALPHA|PIG_NOTIFICATIONS_DEFAULT_LIFESPAN|PIG_NOTIFICATIONS_MARGIN|PIG_NOTIFICATIONS_MARGIN_BETWEEN|PIG_NOTIFICATIONS_MAX_WIDTH|PIG_NOTIFICATIONS_MIN_HEIGHT|PIG_NOTIFICATIONS_PADDING_LR|PIG_NOTIFICATIONS_PADDING_UD|PIG_NOTIFICATIONS_REPEAT_CNT_PADDING|PIG_NOTIFICATIONS_REPEAT_CNT_ROUNDED_RADIUS|PIG_NOTIFICATIONS_ROUNDED_RADIUS|PIG_NOTIFICATIONS_SHOW_ANIM_TIME|PIG_NOTIFICATIONS_VOLUME|PIG_PERMANANT_MEM_SIZE|PIG_PHYS_FRAMERATE|PIG_PHYS_FRAME_TIME_SEC|PIG_SETTINGS_FILE_PREFIX_LENGTH|PIG_SETTINGS_FILE_PREFIX_STR|PIG_TEMP_ARENA_SIZE|PIG_WINDOW_MIN_SIZE|PLAT_DBG_FILEPATH_AND_FUNCNAME_SEP_CHAR|PLAT_DEBUG_OUTPUT_FIFO_SIZE|PLAT_MAIN_HEAP_PAGE_SIZE|PLAT_MAIN_HEAP_SIZE|PLAT_MAX_FILEPATH_AND_FUNC_NAME|PLAT_MAX_NUM_TASKS|PLAT_MAX_NUM_THREADS|PLAT_MAX_THREADPOOL_SIZE|PLAT_TEMP_ARENA_MAX_MARKS|PLAT_TEMP_ARENA_SIZE|PLAT_THREAD_SAFE_HEAP_SIZE|PLAYER_AIR_ACCEL_DEFAULT_VALUE|PLAYER_AIR_FRICTION_DEFAULT_VALUE|PLAYER_BASE_REACH_DEFAULT_VALUE|PLAYER_CAMERA_LAG_DEFAULT_VALUE|PLAYER_COYOTE_TIME_DEFAULT_VALUE|PLAYER_CRAFTING_CONTAINER_ID|PLAYER_CROUCH_SIZE_DEFAULT_VALUE|PLAYER_CROUCH_TIME_DEFAULT_VALUE|PLAYER_FACE_HEIGHT_DEFAULT_VALUE|PLAYER_FREE_FLY_MODE_ANIM_HEIGHT|PLAYER_FREE_FLY_MODE_ANIM_LENGTH|PLAYER_GROUND_FRICTION_DEFAULT_VALUE|PLAYER_INVENTORY_CRAFT_GRID_HEIGHT|PLAYER_INVENTORY_CRAFT_GRID_WIDTH|PLAYER_INVENTORY_ID|PLAYER_INVENTORY_NUM_MAIN_ROWS|PLAYER_INVENTORY_NUM_SLOTS_X|PLAYER_ITEM_BILLBOARD_ROTATION_X|PLAYER_ITEM_BILLBOARD_ROTATION_Y|PLAYER_ITEM_INTO_VIEW_DEPTH|PLAYER_ITEM_MINE_ANIM_TIME|PLAYER_ITEM_OFFSET_X|PLAYER_ITEM_OFFSET_Y|PLAYER_ITEM_PLACE_ANIM_BOUNCE_HEIGHT|PLAYER_ITEM_PLACE_ANIM_ROTATE_ANGLE|PLAYER_ITEM_PLACE_ANIM_TIME|PLAYER_ITEM_ROTATION_X|PLAYER_ITEM_ROTATION_Y|PLAYER_ITEM_VOXEL_SIZE|PLAYER_JUMP_SPEED_DEFAULT_VALUE|PLAYER_MAX_FALL_SPEED_DEFAULT_VALUE|PLAYER_MAX_GROUND_DIST|PLAYER_MAX_STEP_HEIGHT|PLAYER_RECTANGLE_PLACE_LIMIT|PLAYER_ROTATE_ANIM_TIME_DEFAULT_VALUE|PLAYER_ROTATE_BACKOFF_DEFAULT_VALUE|PLAYER_ROTATE_DELAY_DEFAULT_VALUE|PLAYER_RUN_ACCEL_DEFAULT_VALUE|PLAYER_RUN_ANIM_TIME_DEFAULT_VALUE|PLAYER_RUN_FOV_DEFAULT_VALUE|PLAYER_RUN_SPEED_DEFAULT_VALUE|PLAYER_SIZE_DEFAULT_VALUE|PLAYER_WALK_ACCEL_DEFAULT_VALUE|PLAYER_WALK_FOV_DEFAULT_VALUE|PLAYER_WALK_SPEED_DEFAULT_VALUE|PROJECT_NAME|PROJECT_NAME_SAFE|PTRDIFF_MAX|PTRDIFF_MIN|PTR_SIZE|PalBackground|PalBackgroundDark|PalBackgroundDark_Value|PalBackgroundDarker|PalBackgroundDarker_Value|PalBackgroundLight|PalBackgroundLight_Value|PalBackgroundLighter|PalBackgroundLighter_Value|PalBackground_Value|PalBanana|PalBananaDark|PalBananaDark_Value|PalBananaDarker|PalBananaDarker_Value|PalBananaLight|PalBananaLight_Value|PalBananaLighter|PalBananaLighter_Value|PalBanana_Value|PalBlack|PalBlackDark|PalBlackDark_Value|PalBlackDarker|PalBlackDarker_Value|PalBlackLight|PalBlackLight_Value|PalBlackLighter|PalBlackLighter_Value|PalBlack_Value|PalBlue|PalBlueDark|PalBlueDark_Value|PalBlueDarker|PalBlueDarker_Value|PalBlueLight|PalBlueLight_Value|PalBlueLighter|PalBlueLighter_Value|PalBlue_Value|PalGrass|PalGrassDark|PalGrassDark_Value|PalGrassDarker|PalGrassDarker_Value|PalGrassLight|PalGrassLight_Value|PalGrassLighter|PalGrassLighter_Value|PalGrass_Value|PalGreen|PalGreenDark|PalGreenDark_Value|PalGreenDarker|PalGreenDarker_Value|PalGreenLight|PalGreenLight_Value|PalGreenLighter|PalGreenLighter_Value|PalGreen_Value|PalGrey|PalGreyDark|PalGreyDark_Value|PalGreyDarker|PalGreyDarker_Value|PalGreyLight|PalGreyLight_Value|PalGreyLighter|PalGreyLighter_Value|PalGrey_Value|PalHoney|PalHoneyDark|PalHoneyDark_Value|PalHoneyDarker|PalHoneyDarker_Value|PalHoneyLight|PalHoneyLight_Value|PalHoneyLighter|PalHoneyLighter_Value|PalHoney_Value|PalNeutral|PalNeutralDark|PalNeutralDark_Value|PalNeutralDarker|PalNeutralDarker_Value|PalNeutralLight|PalNeutralLight_Value|PalNeutralLighter|PalNeutralLighter_Value|PalNeutral_Value|PalOrange|PalOrangeDark|PalOrangeDark_Value|PalOrangeDarker|PalOrangeDarker_Value|PalOrangeLight|PalOrangeLight_Value|PalOrangeLighter|PalOrangeLighter_Value|PalOrange_Value|PalPink|PalPinkDark|PalPinkDark_Value|PalPinkDarker|PalPinkDarker_Value|PalPinkLight|PalPinkLight_Value|PalPinkLighter|PalPinkLighter_Value|PalPink_Value|PalPurple|PalPurpleDark|PalPurpleDark_Value|PalPurpleDarker|PalPurpleDarker_Value|PalPurpleLight|PalPurpleLight_Value|PalPurpleLighter|PalPurpleLighter_Value|PalPurple_Value|PalRed|PalRedDark|PalRedDark_Value|PalRedDarker|PalRedDarker_Value|PalRedLight|PalRedLight_Value|PalRedLighter|PalRedLighter_Value|PalRed_Value|PalSky|PalSkyDark|PalSkyDark_Value|PalSkyDarker|PalSkyDarker_Value|PalSkyLight|PalSkyLight_Value|PalSkyLighter|PalSkyLighter_Value|PalSky_Value|PalViolet|PalVioletDark|PalVioletDark_Value|PalVioletDarker|PalVioletDarker_Value|PalVioletLight|PalVioletLight_Value|PalVioletLighter|PalVioletLighter_Value|PalViolet_Value|PalYellow|PalYellowDark|PalYellowDark_Value|PalYellowDarker|PalYellowDarker_Value|PalYellowLight|PalYellowLight_Value|PalYellowLighter|PalYellowLighter_Value|PalYellow_Value|ParsingTokenType_Comment|ParsingTokenType_FilePrefix|ParsingTokenType_KeyValuePair|ParsingTokenType_NumTypes|ParsingTokenType_Unknown|Pi32|Pi64|PigDebugBindingType_Controller|PigDebugBindingType_Keyboard|PigDebugBindingType_Mouse|PigDebugBindingType_None|PigDebugBindingType_NumTypes|PigGenParseError_ExpectedOpenCurlyBracket|PigGenParseError_FailedToGenerateSerializableStruct|PigGenParseError_InvalidIdentifierForMemberName|PigGenParseError_InvalidIdentifierForMemberType|PigGenParseError_InvalidIdentifierForStructName|PigGenParseError_MissingTypePart|PigGenParseError_NoMembersInStruct|PigGenParseError_None|PigGenParseError_NumCodes|PigGenParseError_TooManyTypes|PigTask_None|PigTask_NumTypes|PigTask_ReadFileContents|PigTask_WriteEntireFile|PigTryDeserDebugBindingsError_CantOpenFile|PigTryDeserDebugBindingsError_InvalidFilePrefix|PigTryDeserDebugBindingsError_MissingFilePrefix|PigTryDeserDebugBindingsError_MultipleFilePrefix|PigTryDeserDebugBindingsError_None|PigTryDeserDebugBindingsError_NumErrors|PigTryDeserDebugBindingsError_TokenBeforeFilePrefix|PigTryDeserSettingsError_CantOpenFile|PigTryDeserSettingsError_EmptyFile|PigTryDeserSettingsError_InvalidFilePrefix|PigTryDeserSettingsError_MissingFilePrefix|PigTryDeserSettingsError_MultipleFilePrefix|PigTryDeserSettingsError_None|PigTryDeserSettingsError_NotEnoughMemoryForStrings|PigTryDeserSettingsError_NumErrors|PigTryDeserSettingsError_TokenBeforeFilePrefix|PlatAudioDeviceState_Active|PlatAudioDeviceState_Disabled|PlatAudioDeviceState_NotPresent|PlatAudioDeviceState_NumStates|PlatAudioDeviceState_Unknown|PlatAudioDeviceState_Unplugged|PlatCursor_Default|PlatCursor_NumCursors|PlatCursor_Pointer|PlatCursor_ResizeHorizontal|PlatCursor_ResizeVertical|PlatCursor_TextIBeam|PlatImageFormat_Bmp|PlatImageFormat_NumFormats|PlatImageFormat_Png|PlatImageFormat_Tga|PlatMouseMode_Default|PlatMouseMode_FirstPersonCamera|PlatMouseMode_Invisible|PlatMouseMode_NumModes|PlatSteamFriendAvatarSize_Large|PlatSteamFriendAvatarSize_Medium|PlatSteamFriendAvatarSize_None|PlatSteamFriendAvatarSize_NumSizes|PlatSteamFriendAvatarSize_Small|PlatSteamFriendOnlineStatus_Away|PlatSteamFriendOnlineStatus_Busy|PlatSteamFriendOnlineStatus_LookingForTrade|PlatSteamFriendOnlineStatus_LookingToPlay|PlatSteamFriendOnlineStatus_NumTypes|PlatSteamFriendOnlineStatus_Offline|PlatSteamFriendOnlineStatus_Online|PlatSteamFriendOnlineStatus_Snooze|PlatSteamFriendOnlineStatus_Unknown|PlatSteamFriendState_Incoming|PlatSteamFriendState_Normal|PlatSteamFriendState_NumStates|PlatSteamFriendState_Outgoing|PlatSteamFriendState_Unknown|PlatSteamFriendsListQueryError_None|PlatSteamFriendsListQueryError_NumErrors|PolygonFillMode_Default|PolygonFillMode_NumModes|PolygonFillMode_Points|PolygonFillMode_Wireframe|PrimeNumbersU32_Count|PureBlue|PureBlue_Value|PureGreen|PureGreen_Value|PureOrange|PureOrange_Value|PurePurple|PurePurple_Value|PureRed|PureRed_Value|PureYellow|PureYellow_Value|QuarterPi32|QuarterPi64|Quat_Identity|RAND_FLOAT_PRECISION_R32|RAND_FLOAT_PRECISION_R64|RC_SCRATCH_BUFFER_SIZE|RC_SPHERE_BUFFER_RING_COUNTS|RC_SPHERE_BUFFER_SEGMENT_COUNTS|RECIPE_MAX_GRID_HEIGHT|RECIPE_MAX_GRID_WIDTH|RESOURCES_LOAD_PERCENT|RESOURCES_NUM_FONTS|RESOURCES_NUM_MUSICS|RESOURCES_NUM_SHADERS|RESOURCES_NUM_SHEETS|RESOURCES_NUM_SOUNDS|RESOURCES_NUM_TEXTURES|RESOURCES_NUM_VECTORS|RESOURCE_FOLDER_FONTS|RESOURCE_FOLDER_MODELS|RESOURCE_FOLDER_MODEL_TEXTURES|RESOURCE_FOLDER_MUSIC|RESOURCE_FOLDER_SHADERS|RESOURCE_FOLDER_SHEETS|RESOURCE_FOLDER_SOUNDS|RESOURCE_FOLDER_SPRITES|RESOURCE_FOLDER_TEXT|RESOURCE_FOLDER_TEXTURES|RESOURCE_FOLDER_VECTOR|RESOURCE_TEXTURE_MAX_NUM_LAYERS|RETICLE_TARGET_AQUIRED_ANIM_TIME|RandomSeriesType_Fixed|RandomSeriesType_Incremental|RandomSeriesType_LinearCongruential32|RandomSeriesType_LinearCongruential64|RandomSeriesType_NumTypes|RandomSeriesType_PermutedCongruential64|Rec_Default|Rec_Zero|Reci_Zero|ReflectiveMaterial_Glass|ReflectiveMaterial_Mirror|ReflectiveMaterial_None|ReflectiveMaterial_NumMaterials|ReflectiveMaterial_Rough|ReflectiveShape_BezierPath|ReflectiveShape_BoundingBox|ReflectiveShape_ConvexPolygon|ReflectiveShape_None|ReflectiveShape_NumShapes|ReflectiveShape_Polygon|ReflectiveShape_Rectangle|RenderApi_DirectX|RenderApi_None|RenderApi_NumModes|RenderApi_OpenGL|RenderApi_Vulkan|ResourceType_Font|ResourceType_None|ResourceType_NumTypes|ResourceType_Shader|ResourceType_Sheet|ResourceType_Texture|ResourceType_VectorImage|SCALED_SPEED_OF_LIGHT|SCALED_SPEED_OF_LIGHT_IN_GLASS|SCALED_SPEED_OF_LIGHT_SCALE|SCHAR_MAX|SCHAR_MIN|SDL_CONTROLLER_DB_PATH|SEMAPHORE_WAIT_INFINITE|SHAPE_WHEEL_CLOSE_TIME|SHAPE_WHEEL_ICON_PADDING|SHAPE_WHEEL_ICON_SIZE|SHAPE_WHEEL_ICON_TEXT_PADDING|SHAPE_WHEEL_OPEN_TIME|SHAPE_WHEEL_OPTION_HOVER_ANIM_CLOSE_TIME|SHAPE_WHEEL_OPTION_HOVER_ANIM_OPEN_TIME|SHOW_AUDIO_OUT_GRAPH_ON_STARTUP|SHOW_MEM_GRAPH_ON_STARTUP|SHOW_PERF_GRAPH_ON_STARTUP|SHOW_PIE_GRAPHS_ON_STARTUP|SHRT_MAX|SHRT_MIN|SIM_PARAMS_FILE_NAME|SIZE_MAX|SKYBOX_SIZE|SLUG_SUPPORTED|SMALL_CHEST_NUM_ROWS|SMALL_CHEST_NUM_SLOTS_X|SPRITE_SHEET_META_FILE_PREFIX|SSE_CLEAR_BTN_CORNER_RADIUS|SSE_DEFAULT_SHEET_SIZE|SSE_EXPORT_BTN_CORNER_RADIUS|SSE_EXPORT_BTN_MARGIN|SSE_EXPORT_BTN_SIZE|SSE_EXPORT_BTN_TEXT|SSE_EXPORT_BTN_UPDATE_TEXT|SSE_FILE_MOVE_LAG|SSE_FILE_NAME_PADDING|SSE_FILE_SPAWN_DELAY|SSE_RESOURCE_LIST_DOUBLE_CLICK_TIME|SSE_RESOURCE_LIST_ITEM_PADDING|SSE_RESOURCE_LIST_SCROLL_LAG|SSE_RESOURCE_LIST_SCROLL_SPEED|SSE_RESOURCE_LIST_SIZE|SSE_SHOW_NAME_ANIM_TIME|SSE_VIEW_LAG|SSE_VIEW_LIMIT_PADDING|SSE_VIEW_SPEED_FAST|SSE_VIEW_SPEED_SLOW|SSE_VIEW_ZOOM_LAG|SSE_VIEW_ZOOM_MAX|SSE_VIEW_ZOOM_MIN|SSE_VIEW_ZOOM_SCROLL_SPEED|STABLE_FRAMERATE_MAX|STABLE_FRAMERATE_RUN_MIN|STANDARD_SHAPES_FILE_PATH|STEAM_BUILD|STEAM_CARD_MIN_ASPECT_RATIO|STREAMING_MODE|SVG_TRIANGULATION_CURVE_VERT_COUNT|ShaderError_ApiError|ShaderError_CompilationNotSupported|ShaderError_CouldntOpenFile|ShaderError_Empty|ShaderError_FragmentCompileFailed|ShaderError_FragmentCreationFailed|ShaderError_LinkingFailed|ShaderError_MissingAttribute|ShaderError_MissingDivider|ShaderError_MissingUniform|ShaderError_NoFragShaderPieces|ShaderError_NoVertShaderPieces|ShaderError_None|ShaderError_NumErrors|ShaderError_ShaderCreationFailed|ShaderError_UnsupportedApi|ShaderError_VertexArrayCreationFailed|ShaderError_VertexCompileFailed|ShaderError_VertexCreationFailed|ShaderUniform_All|ShaderUniform_Brightness|ShaderUniform_CameraPosition|ShaderUniform_CircleInnerRadius|ShaderUniform_CircleRadius|ShaderUniform_Color1|ShaderUniform_Color2|ShaderUniform_Count|ShaderUniform_MaskRectangle|ShaderUniform_None|ShaderUniform_NumGenericValues|ShaderUniform_NumPolygonPlanes|ShaderUniform_PlayerPosition|ShaderUniform_PolygonPlanes|ShaderUniform_ProjectionMatrix|ShaderUniform_ReplaceColors|ShaderUniform_RequireCircle|ShaderUniform_RequireMatrices|ShaderUniform_RequireNone|ShaderUniform_RequireTexture|ShaderUniform_Saturation|ShaderUniform_ShiftVec|ShaderUniform_SourceRec1|ShaderUniform_SourceRec2|ShaderUniform_Texture1|ShaderUniform_Texture1Size|ShaderUniform_Texture2|ShaderUniform_Texture2Size|ShaderUniform_Time|ShaderUniform_Value0|ShaderUniform_Value1|ShaderUniform_Value2|ShaderUniform_Value3|ShaderUniform_Value4|ShaderUniform_Value5|ShaderUniform_Value6|ShaderUniform_Value7|ShaderUniform_ViewMatrix|ShaderUniform_WorldMatrix|SlugBox2D_Zero|SlugColor4U_White|SlugInteger2D_Zero|SlugInteger4D_Zero|SlugPoint2D_Zero|SlugPoint3D_Zero|SlugVector2D_Zero|SlugVector4D_Zero|SlzMemberTypeSize_MyStr_t|SlzMemberTypeSize_i16|SlzMemberTypeSize_i32|SlzMemberTypeSize_i64|SlzMemberTypeSize_i8|SlzMemberTypeSize_r32|SlzMemberTypeSize_r64|SlzMemberTypeSize_rec|SlzMemberTypeSize_u16|SlzMemberTypeSize_u32|SlzMemberTypeSize_u64|SlzMemberTypeSize_u8|SlzMemberTypeSize_v2|SlzMemberTypeSize_v3|SlzMemberTypeSize_v4|SlzMemberType_MyStr_t|SlzMemberType_v2|SlzMemberType_v3|SlzMemberType_v4|SoundInstanceHandle_Empty|SoundInstanceType_None|SoundInstanceType_NumTypes|SoundInstanceType_Samples|SoundInstanceType_SawWave|SoundInstanceType_SineWave|SoundInstanceType_SquareWave|SoundInstanceType_StreamingSamples|SpecialFolder_None|SpecialFolder_NumTypes|SpecialFolder_SavesAndSettings|SpecialFolder_Screenshots|SpecialFolder_Share|SphereQuality_Default|SphereQuality_High|SphereQuality_Low|SphereQuality_NumQualities|SphereQuality_SuperLow|SpriteSheetError_AllocFailure|SpriteSheetError_CouldntOpenFile|SpriteSheetError_EmptyFile|SpriteSheetError_None|SpriteSheetError_NumErrors|SpriteSheetError_ParseFailure|SpriteSheetError_TextureError|SpriteSheetMetaError_InvalidFilePrefix|SpriteSheetMetaError_KeyValuePairBeforeFrameDefined|SpriteSheetMetaError_MissingFilePrefix|SpriteSheetMetaError_MultipleFilePrefix|SpriteSheetMetaError_None|SpriteSheetMetaError_NumErrors|SpriteSheetMetaError_TokenBeforeFilePrefix|SvgFillStyle_None|SvgFillStyle_NumStyles|SvgFillStyle_Solid|SvgPathDataCmd_ClosePath|SvgPathDataCmd_Cubic|SvgPathDataCmd_Ellipse|SvgPathDataCmd_Horizontal|SvgPathDataCmd_Line|SvgPathDataCmd_MoveTo|SvgPathDataCmd_None|SvgPathDataCmd_NumCommands|SvgPathDataCmd_Quadratic|SvgPathDataCmd_SmoothCubic|SvgPathDataCmd_SmoothQuadratic|SvgPathDataCmd_Vertical|SvgShapeType_Circle|SvgShapeType_None|SvgShapeType_NumTypes|SvgShapeType_Path|SvgShapeType_Rectangle|SvgStrokeStyle_None|SvgStrokeStyle_NumStyles|SvgStrokeStyle_Solid|SvgTransformType_Matrix|SvgTransformType_None|SvgTransformType_NumTypes|SvgTransformType_Rotate|SvgTransformType_Scale|SvgTransformType_Translate|TARGET_FRAMERATE|TARGET_FRAME_TIME|TEST_WORLD_SAVE_PATH|THIRD_PERSON_ACTIVATE_ANIM_TIME|THIRD_PERSON_MAX_CAMERA_DIST|TOTAL_NUM_RESOURCES|TextAlignment_Center|TextAlignment_Left|TextAlignment_NumOptions|TextAlignment_Right|Textbox_MoveCursorType_ByCharacter|Textbox_MoveCursorType_ByLine|Textbox_MoveCursorType_BySubword|Textbox_MoveCursorType_ByWholeText|Textbox_MoveCursorType_ByWord|Textbox_MoveCursorType_NumTypes|TextureError_ApiError|TextureError_CouldntOpenFile|TextureError_EmptyFile|TextureError_None|TextureError_NumErrors|TextureError_ParseFailure|TextureError_UnsupportedApi|ThirdPi32|ThirdPi64|ThreeHalfsPi32|ThreeHalfsPi64|TimeUnit_Days|TimeUnit_Hours|TimeUnit_Milliseconds|TimeUnit_Minutes|TimeUnit_Months|TimeUnit_NumUnits|TimeUnit_Seconds|TimeUnit_Years|Transparent|TransparentBlack|TransparentBlack_Value|TransparentWhite|TransparentWhite_Value|Transparent_Value|TryDeserSvgFileError_EmptyFile|TryDeserSvgFileError_GroupOutsideSvg|TryDeserSvgFileError_GroupTransformIsInvalid|TryDeserSvgFileError_MissingProperty|TryDeserSvgFileError_None|TryDeserSvgFileError_NumErrors|TryDeserSvgFileError_PathFormatError|TryDeserSvgFileError_ShapeOutsideGroup|TryDeserSvgFileError_StyleFormatError|TryDeserSvgFileError_TryParseError|TryDeserSvgFileError_XmlParsingError|TryDeserVoxelShapeGeomSetError_CantOpenFile|TryDeserVoxelShapeGeomSetError_InvalidFilePrefix|TryDeserVoxelShapeGeomSetError_MissingFilePrefix|TryDeserVoxelShapeGeomSetError_MultipleFilePrefix|TryDeserVoxelShapeGeomSetError_None|TryDeserVoxelShapeGeomSetError_NumErrors|TryDeserVoxelShapeGeomSetError_TokenBeforeFilePrefix|TryDeserVoxelWorldError_EmptyFile|TryDeserVoxelWorldError_EndOfFileTooSoon|TryDeserVoxelWorldError_InvalidPrefix|TryDeserVoxelWorldError_InvalidSpaceId|TryDeserVoxelWorldError_InvalidVoxelByteSize|TryDeserVoxelWorldError_NewerOrCorruptVersion|TryDeserVoxelWorldError_None|TryDeserVoxelWorldError_NumErrors|TryDeserVoxelWorldError_TooFewChunks|TryDeserVoxelWorldError_TooManyChunks|TryDeserVoxelWorldError_TotalSizeMismatch|TryDeserWorldSaveMetaError_CouldntOpenFile|TryDeserWorldSaveMetaError_CouldntParseDifficulty|TryDeserWorldSaveMetaError_CouldntParseSeed|TryDeserWorldSaveMetaError_CouldntParseVersion|TryDeserWorldSaveMetaError_EmptyFile|TryDeserWorldSaveMetaError_EmptyName|TryDeserWorldSaveMetaError_FileDoesntExist|TryDeserWorldSaveMetaError_InvalidFilePrefix|TryDeserWorldSaveMetaError_InvalidVersion|TryDeserWorldSaveMetaError_MissingDifficulty|TryDeserWorldSaveMetaError_MissingFilePrefix|TryDeserWorldSaveMetaError_MissingName|TryDeserWorldSaveMetaError_MissingSeed|TryDeserWorldSaveMetaError_MissingVersion|TryDeserWorldSaveMetaError_MultipleFilePrefix|TryDeserWorldSaveMetaError_MultipleNames|TryDeserWorldSaveMetaError_MultipleVersions|TryDeserWorldSaveMetaError_None|TryDeserWorldSaveMetaError_NumErrors|TryDeserWorldSaveMetaError_TokenBeforeFilePrefix|TryDeserWorldSaveMetaError_VersionIsTooNew|TryDeserWorldSaveMetaError_VersionNotFirst|TryGetSettingResult_Missing|TryGetSettingResult_None|TryGetSettingResult_NumTypes|TryGetSettingResult_ParseError|TryGetSettingResult_Success|TryParseFailureReason_FloatParseFailure|TryParseFailureReason_Infinity|TryParseFailureReason_InvalidCharacter|TryParseFailureReason_InvalidUtf8|TryParseFailureReason_NoNumbers|TryParseFailureReason_None|TryParseFailureReason_NotEnoughCommas|TryParseFailureReason_NumReasons|TryParseFailureReason_Overflow|TryParseFailureReason_StringOverflow|TryParseFailureReason_TooManyCommas|TryParseFailureReason_Underflow|TryParseFailureReason_UnknownString|TryParseFailureReason_WrongNumCharacters|TwoPi32|TwoPi64|UCHAR_MAX|UINT16_MAX|UINT32_MAX|UINT64_MAX|UINT8_MAX|UINTPTR_MAX|UINT_MAX|ULLONG_MAX|ULONG_MAX|UNDERLINE_TOGGLE_CHAR|UNICODE_CYRILLIC_COUNT|UNICODE_CYRILLIC_END|UNICODE_CYRILLIC_START|UNICODE_HIRAGANA_COUNT|UNICODE_HIRAGANA_END|UNICODE_HIRAGANA_START|UNICODE_KATAKANA_COUNT|UNICODE_KATAKANA_END|UNICODE_KATAKANA_START|UNICODE_LATIN_EXT_COUNT|UNICODE_LATIN_EXT_END|UNICODE_LATIN_EXT_START|UNIX_EPOCH_DATE|USHRT_MAX|UTF8_MAX_CHAR_SIZE|UTF8_MAX_CODEPOINT|UUID_BYTE_LENGTH|UUID_STR_LENGTH|UUID_STR_LENGTH_NO_HYPHENS|Uuid_Full|Uuid_Zero|VECTOR_IMG_MAX_PART_TREE_DEPTH|VOXEL_CHUNK_DEPTH|VOXEL_CHUNK_HEIGHT|VOXEL_CHUNK_SPARSE_ARRAY_HASH_FORCED_BIT|VOXEL_CHUNK_SPARSE_ARRAY_MAX_FILL_PERCENT|VOXEL_CHUNK_SPARSE_ARRAY_MIN_SLOTS|VOXEL_CHUNK_WIDTH|VOXEL_COLLISION_EPSILON|VOXEL_COLLISION_MAX_INTERSECTING_VOXELS|VOXEL_COLLISION_MAX_RESOLVE_STEPS|VOXEL_CONNECTEDNESS_DIRTY_FLAG|VOXEL_GRAVITY_VEC|VOXEL_HIGHLIGHT_INFLATE_AMOUNT|VOXEL_SHAPE_FILE_PREFIX_LENGTH|VOXEL_SHAPE_FILE_PREFIX_STR|VOXEL_STACK_BOB_HEIGHT|VOXEL_STACK_BOB_SPEED|VOXEL_STACK_GRAVITY_ACCEL|VOXEL_STACK_MAX_SPAWN_SPEED|VOXEL_STACK_PICKUP_DISTANCE|VOXEL_STACK_PICKUP_TRAVEL_SPEED|VOXEL_STACK_ROTATE_PERIOD|VOXEL_STACK_SIZE|VOXEL_WORLD_SER_PREFIX_STR|VOXEL_WORLD_SER_PREFIX_STR_LENGTH|VOXEL_WORLD_SER_VERSION_MAJOR|VOXEL_WORLD_SER_VERSION_MINOR|Vec2_Down|Vec2_Half|Vec2_Left|Vec2_One|Vec2_Right|Vec2_Up|Vec2_Zero|Vec2i_Down|Vec2i_Left|Vec2i_One|Vec2i_Right|Vec2i_Up|Vec2i_Zero|Vec3_Back|Vec3_Backward|Vec3_Bottom|Vec3_Down|Vec3_Forward|Vec3_Front|Vec3_Half|Vec3_Left|Vec3_One|Vec3_Right|Vec3_Top|Vec3_Up|Vec3_Zero|Vec3i_Back|Vec3i_Backward|Vec3i_Bottom|Vec3i_Down|Vec3i_Forward|Vec3i_Front|Vec3i_Left|Vec3i_One|Vec3i_Right|Vec3i_Top|Vec3i_Up|Vec3i_Zero|Vec4_Back|Vec4_Backward|Vec4_Bottom|Vec4_Down|Vec4_Forward|Vec4_Front|Vec4_Half|Vec4_Left|Vec4_Nextward|Vec4_One|Vec4_Prevward|Vec4_Right|Vec4_Top|Vec4_Up|Vec4_Zero|Vec4i_Back|Vec4i_Backward|Vec4i_Bottom|Vec4i_Down|Vec4i_Forward|Vec4i_Front|Vec4i_Left|Vec4i_Nextward|Vec4i_One|Vec4i_Prevward|Vec4i_Right|Vec4i_Top|Vec4i_Up|Vec4i_Zero|VectorImgError_CouldntOpenFile|VectorImgError_EmptyFile|VectorImgError_NoGroups|VectorImgError_None|VectorImgError_NumErrors|VectorImgError_SvgError|VectorImgError_XmlError|VectorImgFillType_None|VectorImgFillType_NumTypes|VectorImgFillType_Solid|VectorImgShapeType_Circle|VectorImgShapeType_None|VectorImgShapeType_NumTypes|VectorImgShapeType_Path|VectorImgShapeType_Rectangle|VectorImgStrokeType_None|VectorImgStrokeType_NumTypes|VectorImgStrokeType_Solid|VertBufferPrimitive_Lines|VertBufferPrimitive_None|VertBufferPrimitive_NumTypes|VertBufferPrimitive_Quads|VertBufferPrimitive_Triangles|VertexType_All|VertexType_Color1Bit|VertexType_Color2Bit|VertexType_Default2D|VertexType_Default2D_Size|VertexType_Default3D|VertexType_Default3D_Size|VertexType_None|VertexType_Normal1Bit|VertexType_Normal2Bit|VertexType_PositionBit|VertexType_Slug|VertexType_SlugBit|VertexType_Slug_Size|VertexType_TangentBit|VertexType_TexCoord1Bit|VertexType_TexCoord2Bit|VoxelCoord_Empty|VoxelGenAlg_Checkerboard|VoxelGenAlg_Cube|VoxelGenAlg_Flat|VoxelGenAlg_None|VoxelGenAlg_NumFuncs|VoxelGenAlg_SolidFill|VoxelGenCubeStructurePass_NumPasses|VoxelGenCubeStructurePass_Trees|VoxelPipeSystemFlag_All|VoxelPipeSystemFlag_Dirty|VoxelPipeSystemFlag_None|VoxelPipeSystemFlag_NumFlags|VoxelRotation_Backward0|VoxelRotation_Backward180|VoxelRotation_Backward270|VoxelRotation_Backward90|VoxelRotation_Default|VoxelRotation_Down0|VoxelRotation_Down180|VoxelRotation_Down270|VoxelRotation_Down90|VoxelRotation_Forward0|VoxelRotation_Forward180|VoxelRotation_Forward270|VoxelRotation_Forward90|VoxelRotation_Left0|VoxelRotation_Left180|VoxelRotation_Left270|VoxelRotation_Left90|VoxelRotation_NumRotations|VoxelRotation_Right0|VoxelRotation_Right180|VoxelRotation_Right270|VoxelRotation_Right90|VoxelRotation_Up0|VoxelRotation_Up180|VoxelRotation_Up270|VoxelRotation_Up90|VoxelShapeGeomFaceFlag_IsFlush|VoxelShapeGeomFaceFlag_IsFull|VoxelShapeGeomFaceFlag_None|VoxelShapeGeomFaceFlag_NumFlags|VoxelShape_CustomBase|VoxelShape_Default|VoxelShape_EighthBlock|VoxelShape_HalfBlock|VoxelShape_Jack|VoxelShape_Node|VoxelShape_NumStandardShapes|VoxelShape_Pillar|VoxelShape_PipeBend|VoxelShape_PipeCorner|VoxelShape_PipeCross|VoxelShape_PipeEnd|VoxelShape_PipeSub1|VoxelShape_PipeSub2|VoxelShape_PipeTee|VoxelShape_Pyramid|VoxelShape_QuarterBlock|VoxelShape_RodSlope|VoxelShape_ShortSlope|VoxelShape_SlimSlope|VoxelShape_Slope|VoxelShape_SlopeInnerCorner|VoxelShape_SlopeOuterCorner|VoxelShape_SlopeTriple|VoxelShape_Spikes|VoxelShape_TallSlope|VoxelShape_Tent|VoxelSpaceGravityType_Cube|VoxelSpaceGravityType_None|VoxelSpaceGravityType_NumTypes|VoxelStackFlag_Alive|VoxelStackFlag_Grounded|VoxelStackFlag_None|VoxelStackFlag_NumFlags|VoxelStackFlag_PickedUp|WASM_MEM_PAGE_SIZE|WEB_DEBUG_OUTPUT_PRINT_BUFFER_SIZE|WEB_VERSION_BUILD|WEB_VERSION_MAJOR|WEB_VERSION_MINOR|WIN32_VERSION|WIN32_VERSION|WIN32_VERSION|WINDOWS_COMPILATION|WORD_TREE_CHILD_COUNT|WORD_TREE_FIRST_CHAR|WORLD_SAVES_FOLDER_NAME|WORLD_SAVE_META_FILE_NAME|WORLD_SAVE_META_PREFIX_LENGTH|WORLD_SAVE_META_PREFIX_STR|WORLD_SAVE_META_VERSION_BUILD|WORLD_SAVE_META_VERSION_MAJOR|WORLD_SAVE_META_VERSION_MINOR|WORLD_SAVE_WORLD_FILE_NAME|WORLD_STATE_FADE_IN_TIME|WORLD_STATE_RASTERIZE_LOADING_BAR_HEIGHT|WORLD_STATE_RASTERIZE_LOADING_BAR_WIDTH_PERCENT|WavError_DataBeforeFormat|WavError_EmptyFile|WavError_InvalidDataChunkSize|WavError_InvalidRIFF|WavError_InvalidWAVE|WavError_MissingDataChunks|WavError_MissingFormatChunk|WavError_None|WavError_NumCodes|WavError_UnsupportedFormat|White|White_Value|Win32InitPhase_AudioInitialized|Win32InitPhase_AudioOutputStarted|Win32InitPhase_Closing|Win32InitPhase_CoreInitialized|Win32InitPhase_DebugOutputInitialized|Win32InitPhase_DoingFirstUpdate|Win32InitPhase_EngineDllLoaded|Win32InitPhase_EngineInitialization|Win32InitPhase_Entry|Win32InitPhase_GlfwInitialized|Win32InitPhase_Initialized|Win32InitPhase_NumPhases|Win32InitPhase_PostFirstUpdate|Win32InitPhase_ProgramArgsParsed|Win32InitPhase_ResourcesLoaded|Win32InitPhase_Running|Win32InitPhase_StartupOptionsObtained|Win32InitPhase_SteamInitialized|Win32InitPhase_ThreadPoolsCreated|Win32InitPhase_ThreadingInitialized|Win32InitPhase_WindowOpened|Win32_DebugLine_t|WordBreakCharClass_AlphabeticLower|WordBreakCharClass_AlphabeticUpper|WordBreakCharClass_NumClasses|WordBreakCharClass_Numeric|WordBreakCharClass_Punctuation|WordBreakCharClass_PunctuationClose|WordBreakCharClass_PunctuationOpen|WordBreakCharClass_Whitespace|WordBreakCharClass_WordPunctuation|XmlParseResultType_Comment|XmlParseResultType_Contents|XmlParseResultType_Directive|XmlParseResultType_EndToken|XmlParseResultType_Error|XmlParseResultType_None|XmlParseResultType_NumTypes|XmlParseResultType_Token|XmlParsingError_ClosingTokenMismatch|XmlParsingError_ExpectedClosingAngleBracket|XmlParsingError_InvalidCharInIdentifier|XmlParsingError_InvalidCharacterOutsideToken|XmlParsingError_InvalidPropertyFirstChar|XmlParsingError_InvalidUtf8|XmlParsingError_MissingClosingTokens|XmlParsingError_MissingPropertyValue|XmlParsingError_NoEqualsForProperty|XmlParsingError_NoTypeFoundForToken|XmlParsingError_None|XmlParsingError_NumErrors|XmlParsingError_UnexpectedClosingToken|XmlParsingError_UnexpectedEol|_Addr|_Int64|_Reg|__BIG_ENDIAN|__BYTE_ORDER|__LITTLE_ENDIAN|__LONG_MAX|__func__|e32|e64'
  custom_globals: 'ColorIllumValues|ElapsedMs|LocalTimestamp|MousePos|PrimeNumbersU32|ProgramTime|ScreenSize|TempArena|TimeScale|UnixTimestamp|fixedHeap|gl|logGlobals|lselect|mainHeap|mg|mmenu|pig|pigEntryPoint|pigIn|pigOut|plat|platHeap|platInfo|rc|sheet_ed|smenu|ws'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|extern|register|{{declspec}}'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'decltype|sizeof|__declspec|__attribute__'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  #############################################################################
  # Reusable contexts
  #
  # The follow contexts are currently constructed to be reused in the C++
  # syntax. They are specifically constructed to not push into sub-contexts,
  # which ensures that C++ code isn't accidentally lexed as plain C. They also
  # should not use the {{identifier}} variable since that is different for C++.
  #############################################################################

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.c
      captures:
        1: meta.toc-list.banner.block.c
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\@[A-Za-z0-9_]*'
          scope: custom.thing.c
        - match: '\*\*[^\n\*\/]*\*{0,2}[^\/\*]'
          scope: custom.string.c
        - match: '^\s*([A-Za-z0-9_ ]+)\:\s*([^\n]*)'
          captures: 
            1: custom.identifier.documentation.c
            2: entity.name.function-documentation.c
        - match: '^\s*(-\s?[A-Za-z0-9_]+\:?)([^\n\*]*)'
          captures: 
            1: support.type.documentation.c
            2: custom.thing.documentation.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.c
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.c
      captures:
        1: meta.toc-list.banner.line.c
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
        - match: '\*\*[^\n\*]*\*{0,2}'
          scope: custom.string.c
        - match: '\@[A-Za-z0-9_]*'
          scope: custom.thing.c
        - match: '[\+\-\=]{3,}'
          scope: custom.string.c
        - match: '\| +((?:[^\s\|]+\s?){1,}) +\|$'
          scope: custom.string.c
          captures:
            1: entity.name.function.header.c
        - match: \n
          pop: true

  strings:
    - match: '(L|u8|u|U)?(")'
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.double.c
        - match: '"'
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.single.c
        - match: "'"
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.c
    - match: "%"
      scope: invalid.illegal.placeholder.c

  keywords:
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c
    - match: \bsizeof\b
      scope: keyword.operator.word.c

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.c

  variables:
    - match: '\bg[A-Z]\w*\b'
      scope: variable.other.readwrite.global.mac-classic.c
    - match: '\bs[A-Z]\w*\b'
      scope: variable.other.readwrite.static.mac-classic.c

  constants:
    - match: \b(__func__|NULL|true|false|TRUE|FALSE|nullptr)\b
      scope: constant.language.c
    - match: \b({{custom_constants}})\b
      scope: custom.constant.c
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.c
    # PIC GPIO Registers
    - match: \b(TRIS[A-Z](?:bits)?(?:\s*\.\s*TRIS[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(PORT[A-Z](?:bits)?(?:\s*\.\s*R[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(LAT[A-Z](?:bits)?(?:\s*\.\s*LAT[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(ANSEL[A-Z](?:bits)?(?:\s*\.\s*ANS[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNPU[A-Z](?:bits)?(?:\s*\.\s*CNPU[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNPD[A-Z](?:bits)?(?:\s*\.\s*CNPD[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(ODC[A-Z](?:bits)?(?:\s*\.\s*ODC[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNF[A-Z](?:bits)?(?:\s*\.\s*CNF[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNEN[A-Z](?:bits)?(?:\s*\.\s*CNIE[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(CNNE[A-Z](?:bits)?(?:\s*\.\s*CNNE[A-Z][0-9]{1,2}){0,1})\b
      scope: custom.global.c
    - match: \b(IPC[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*I(P|S)){0,1})\b
      scope: custom.global.c
    - match: \b(IEC[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*IE){0,1})\b
      scope: custom.global.c
    - match: \b(IFS[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]*IF){0,1})\b
      scope: custom.global.c
    - match: \b(RPOR[0-9]{1,2}(?:bits)?(?:\s*\.\s*RP[0-9]{1,2}R){0,1})\b
      scope: custom.global.c
    - match: \b(RPINR[0-9]{1,2}(?:bits)?(?:\s*\.\s*[A-Z0-9]+R){0,1})\b
      scope: custom.global.c
    - match: \b(RP[A-Z][0-9]{1,2}R(?:bits)?(?:\s*\.\s*RP[A-Z][0-9]{1,2}R){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]MODE(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]STA(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(U[0-9]BRG(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]CON[0-9]?(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]STAT(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]BRG(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(SPI[0-9]BUF(?:bits)?(?:\s*\.\s*[A-Z0-9]*){0,1})\b
      scope: custom.global.c
    - match: \b(_[A-Za-z0-9_]*_POSITION)\b
      scope: custom.global.c
    - match: \b(_[A-Za-z0-9_]*_MASK)\b
      scope: custom.global.c
    - match: \b(_[A-Za-z0-9_]*_LENGTH)\b
      scope: custom.global.c
    # common C constant naming idiom -- kConstantVariable
    - match: '\bk[A-Z]\w*\b'
      scope: constant.other.variable.mac-classic.c
    - match: \b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      scope: support.constant.mac-classic.c

  c99:
    - match: \b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b
      scope: support.function.C99.c

  types:
    - match: \b({{basic_types}}|{{before_tag}})\b
      scope: storage.type.c
    - match: \b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|ptrdiff_t)\b
      scope: support.type.sys-types.c
    - match: \b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b
      scope: support.type.pthread.c
    - match: \b({{stdint}})\b
      scope: support.type.stdint.c
    - match: \b({{custom_types}})\b
      scope: custom.type.c
    - match: \b({{custom_globals}})\b
      scope: custom.global.c
    - match: '\b({{microsoft_types}})\b'
      scope: support.type.microsoft.c
    - match: '\b({{windows_types}})\b'
      scope: support.type.windows.c
    - match: \b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b
      scope: support.type.mac-classic.c

  numbers:
    - match: "\\b((0(x|X)[0-9a-fA-F]*(\\.[0-9a-fA-F]+p-?\\d+)?)|(0(b|B)[01]+)|(([0-9][0-9\\']*\\.?([0-9][0-9\\']*)?)|(\\.[0-9][0-9\\']*))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
      scope: constant.numeric.c

  operators:
    - match: '->'
      scope: punctuation.accessor.c
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.c
    - match: \+|\-|/|%|<<|>>|&&|\|\||\||\^|~|!
      scope: keyword.operator.arithmetic.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
    - match: \=
      scope: keyword.operator.assignment.c
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.c
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c

  access:
    - match: '(\.)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.c
        2: variable.other.member.c

  label:
    - match: '^\s*((?!default){{identifier}})(:)(?!:)'
      captures:
        1: entity.name.label.c
        2: punctuation.separator.c

  preprocessor-disabled:
    - match: ^\s*(#\s*if(n?def)?)\b
      captures:
        1: meta.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c
          pop: true
        - include: preprocessor-disabled
        - include: pragma-mark
    - include: pragma-mark

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.c

  preprocessor-line-ending:
    - match: $\n
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\\$\n'
          scope: punctuation.separator.continuation.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
          pop: true
        - match: (?=\n)
          pop: true

  pragma-mark:
    - match: ^\s*((#\s*pragma\s+mark)\s+(.*))
      scope: meta.section.c
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.pragma.c
        3: meta.toc-list.pragma-mark.c

  # Used by "inc" snippets to prevent double ##include
  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.c

  #############################################################################
  # The following are C-specific scopes that should not be reused. This is
  # because they push into subcontexts and use variables that are C-specific.
  #############################################################################

  global:
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: access
    - include: typedef
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - match: ','
      scope: punctuation.separator.c
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.c

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.c

  ## C-specific contexts

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: \*
      scope: keyword.operator.c
    # If a struct/union/enum followed by a name that is not a macro or declspec
    # then this is likely a return type of a function. This is uncommon.
    - match: |-
        (?x:
          ({{before_tag}})
          \s+
          (?=
            (?![[:upper:][:digit:]_]+\b|__declspec)
            {{identifier}}
            (\s+{{identifier}}|\s*\*+)
          )
        )
      captures:
        1: storage.type.c
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_scope: meta.function-call.c
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*
      scope: keyword.operator.c
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))(?=\s+)'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.c entity.name.function.c
      set: function-definition-params
    - match: '(?=\S)'
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.c
    - include: comments
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.c meta.group.c punctuation.section.group.begin.c
          set:
            - meta_content_scope: meta.function.parameters.c meta.group.c
            - match : \)
              scope: punctuation.section.group.end.c
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.c
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.c
            - include: expressions
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.c
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.c
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.c
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.function.c meta.block.c
        - match: '\}'
          scope: meta.function.c meta.block.c punctuation.section.block.end.c
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    - match: '\bstruct\b'
      scope: storage.type.c
      set: data-structures-struct-definition
    - match: '\benum\b'
      scope: storage.type.c
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: storage.type.c
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.struct.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.struct.c meta.block.c
        - match: '\}'
          scope: meta.struct.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.enum.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.enum.c meta.block.c
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-union-definition:
    - meta_scope: meta.union.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.union.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.union.c meta.block.c
        - match: '\}'
          scope: meta.union.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.c
      push:
        - meta_scope: meta.block.c
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.c
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.c
      push:
        - meta_scope: meta.group.c
        - match: \)
          scope: punctuation.section.group.end.c
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.c
      push:
        - meta_scope: meta.brackets.c
        - match: \]
          scope: punctuation.section.brackets.end.c
          pop: true
        - include: expressions

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.c
      push:
        - match: ':'
          scope: punctuation.separator.c
          pop: true
        - include: expressions

  modifiers-parens:
    - match: \b(__attribute__)\s*(\(\()
      captures:
        1: storage.modifier.c
        2: meta.group.c punctuation.section.group.begin.c
      push :
        - meta_scope: meta.attribute.c
        - meta_content_scope: meta.group.c
        - include: parens
        - include: strings
        - match: \)\)
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
    - match: \b(__declspec)(\()
      captures:
        1: storage.modifier.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - match: '\b(align|allocate|code_seg|property|uuid)\b\s*(\()'
          captures:
            1: storage.modifier.c
            2: meta.group.c punctuation.section.group.begin.c
          push:
            - meta_content_scope: meta.group.c
            - match: '\)'
              scope: meta.group.c punctuation.section.group.end.c
              pop: true
            - include: numbers
            - include: strings
            - match: \b(get|put)\b
              scope: variable.parameter.c
            - match: ','
              scope: punctuation.separator.c
            - match: '='
              scope: keyword.operator.assignment.c
        - match: '\b(appdomain|deprecated|dllimport|dllexport|jintrinsic|naked|noalias|noinline|noreturn|nothrow|novtable|process|restrict|safebuffers|selectany|thread)\b'
          scope: constant.other.c

  keywords-parens:
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.word.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions

  typedef:
    - match: \btypedef\b
      scope: storage.type.c
      push:
        - match: ({{identifier}})?\s*(?=;)
          captures:
            1: entity.name.type.typedef.c
          pop: true
        - match: \b(struct)\s+({{identifier}})
          captures:
            1: storage.type.c
        - include: expressions

  function-call:
    - match: (?={{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.c
        - include: c99
        - match: '{{identifier}}'
          scope: variable.function.c
        - match: '\('
          scope: meta.group.c punctuation.section.group.begin.c
          set:
            - meta_content_scope: meta.function-call.c meta.group.c
            - match : \)
              scope: meta.function-call.c meta.group.c punctuation.section.group.end.c
              pop: true
            - include: expressions

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  ## Preprocessor for global

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: incomplete-inc
    - include: preprocessor-macro-define
    - include: pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-global:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.section.block.begin.c
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.section.block.end.c
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.section.block.begin.c
      set: preprocessor-block-if-branch-statements
    - include: negated-block
    - include: statements

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.section.block.end.c
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.c
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.c
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.c keyword.control.import.define.c
      push:
        - meta_content_scope: meta.preprocessor.macro.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.c
          set:
            - match: '\('
              scope: punctuation.section.group.begin.c
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.c
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.c meta.group.c
    - match: '{{identifier}}'
      scope: variable.parameter.c
    - match: \)
      scope: punctuation.section.group.end.c
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.c
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.c
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.c
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.c
          captures:
            1: punctuation.definition.comment.c
            2: punctuation.definition.comment.c
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.c
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c
    - match: (/\*).*(\*/)
      scope: comment.block.c
      captures:
        1: punctuation.definition.comment.c
        2: punctuation.definition.comment.c
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.c

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.c
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.c
    - match: '\}'
      scope: punctuation.section.block.end.c
    - include: expressions

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|line|pragma|undef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.c
      push:
        - meta_scope: meta.preprocessor.diagnostic.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.c
    - match: ^\s*(#\s*(?:include|import))\b\s+
      captures:
        1: keyword.control.import.include.c
      push:
        - meta_scope: meta.preprocessor.include.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '"'
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.double.include.c
            - match: '"'
              scope: punctuation.definition.string.end.c
              pop: true
        - match: <
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.other.lt-gt.include.c
            - match: ">"
              scope: punctuation.definition.string.end.c
              pop: true
