%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: My C Syntax
file_extensions:
  - c
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.c

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum'
  microsoft_types: '__int8|__int16|__int32|__int64'
  windows_types: 'APIENTRY|ATOM|BOOL|BOOLEAN|BYTE|CALLBACK|CCHAR|CHAR|COLORREF|CONST|DWORD|DWORDLONG|DWORD_PTR|DWORD32|DWORD64|FLOAT|HACCEL|HALF_PTR|HANDLE|HBITMAP|HBRUSH|HCOLORSPACE|HCONV|HCONVLIST|HCURSOR|HDC|HDDEDATA|HDESK|HDROP|HDWP|HENHMETAFILE|HFILE|HFONT|HGDIOBJ|HGLOBAL|HHOOK|HICON|HINSTANCE|HKEY|HKL|HLOCAL|HMENU|HMETAFILE|HMODULE|HMONITOR|HPALETTE|HPEN|HRESULT|HRGN|HRSRC|HSZ|HWINSTA|HWND|INT|INT_PTR|INT8|INT16|INT32|INT64|LANGID|LCID|LCTYPE|LGRPID|LONG|LONGLONG|LONG_PTR|LONG32|LONG64|LPARAM|LPBOOL|LPBYTE|LPCOLORREF|LPCSTR|LPCTSTR|LPCVOID|LPCWSTR|LPDWORD|LPHANDLE|LPINT|LPLONG|LPSTR|LPTSTR|LPVOID|LPWORD|LPWSTR|LRESULT|PBOOL|PBOOLEAN|PBYTE|PCHAR|PCSTR|PCTSTR|PCWSTR|PDWORD|PDWORDLONG|PDWORD_PTR|PDWORD32|PDWORD64|PFLOAT|PHALF_PTR|PHANDLE|PHKEY|PINT|PINT_PTR|PINT8|PINT16|PINT32|PINT64|PLCID|PLONG|PLONGLONG|PLONG_PTR|PLONG32|PLONG64|POINTER_32|POINTER_64|POINTER_SIGNED|POINTER_UNSIGNED|PSHORT|PSIZE_T|PSSIZE_T|PSTR|PTBYTE|PTCHAR|PTSTR|PUCHAR|PUHALF_PTR|PUINT|PUINT_PTR|PUINT8|PUINT16|PUINT32|PUINT64|PULONG|PULONGLONG|PULONG_PTR|PULONG32|PULONG64|PUSHORT|PVOID|PWCHAR|PWORD|PWSTR|QWORD|SC_HANDLE|SC_LOCK|SERVICE_STATUS_HANDLE|SHORT|SIZE_T|SSIZE_T|TBYTE|TCHAR|UCHAR|UHALF_PTR|UINT|UINT_PTR|UINT8|UINT16|UINT32|UINT64|ULONG|ULONGLONG|ULONG_PTR|ULONG32|ULONG64|UNICODE_STRING|USHORT|USN|VOID|WCHAR|WINAPI|WORD'
  stdint: 'bool32|flags8|int8|int16|int32|int64|uint8|uint16|uint32|uint64|real32|real64|byte|byte_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t'
  custom_types: 'ReceiveCallback_f|TransmitCallback_f|App_Data_t|UID_t|Globals_t|SURE_Command_t|SURE_DigitalValues_t|SURE_AnalogValues_t|SURE_IODirections_t|SURE_Version_t|SURE_Hardware_Version_t|SURE_ModuleUID_t|SURE_ReceiveStats_t|byte_t|SURE_Status_t|RADIO_Settings_t|RADIO_StateData_t|SURE_Response_t|SPI_Result_t'
  custom_constants: 'RADIO_LoRaBandwidth_7_81kHZ|RADIO_LoRaBandwidth_10_41kHZ|RADIO_LoRaBandwidth_15_62kHZ|RADIO_LoRaBandwidth_20_83kHZ|RADIO_LoRaBandwidth_31_25kHZ|RADIO_LoRaBandwidth_41_66kHZ|RADIO_LoRaBandwidth_62_50kHZ|RADIO_LoRaBandwidth_125kHz|RADIO_LoRaBandwidth_250kHz|RADIO_LoRaBandwidth_500kHz|RADIO_FskBandwidth_20KHz|RADIO_FskBandwidth_150KHz|RADIO_FskBandwidth_175KHz|RADIO_FskBandwidth_190KHz|RADIO_FskBandwidth_200KHz|RADIO_CodingRate_4_5|RADIO_CodingRate_4_6|RADIO_CodingRate_4_7|RADIO_CodingRate_4_8|RADIO_SpreadingFactor_6|RADIO_SpreadingFactor_7|RADIO_SpreadingFactor_8|RADIO_SpreadingFactor_9|RADIO_SpreadingFactor_10|RADIO_SpreadingFactor_11|RADIO_SpreadingFactor_12|RADIO_DIOMapping1_Receive|RADIO_DIOMapping1_Transmit|RADIO_DIOMapping1_IVH|RADIO_DIOMapping2_Receive|RADIO_DIOMapping2_Transmit|RADIO_DIOMapping2_IVH|RADIO_IRQFlagsMask_CADDetect|RADIO_IRQFlagsMask_FHSSChangedChannel|RADIO_IRQFlagsMask_CADDone|RADIO_IRQFlagsMask_TXDone|RADIO_IRQFlagsMask_ValidHeader|RADIO_IRQFlagsMask_PayloadCRCError|RADIO_IRQFlagsMask_RXDone|RADIO_IRQFlagsMask_RXTimeout|RADIO_Frequency_863MHz|RADIO_Frequency_864MHz|RADIO_Frequency_865MHz|RADIO_Frequency_866MHz|RADIO_Frequency_867MHz|RADIO_Frequency_868MHz|RADIO_Frequency_869MHz|RADIO_Frequency_870MHz|RADIO_Frequency_902MHz|RADIO_Frequency_903MHz|RADIO_Frequency_904MHz|RADIO_Frequency_905MHz|RADIO_Frequency_906MHz|RADIO_Frequency_907MHz|RADIO_Frequency_908MHz|RADIO_Frequency_909MHz|RADIO_Frequency_910MHz|RADIO_Frequency_911MHz|RADIO_Frequency_912MHz|RADIO_Frequency_913MHz|RADIO_Frequency_914MHz|RADIO_Frequency_915MHz|RADIO_Frequency_916MHz|RADIO_Frequency_917MHz|RADIO_Frequency_918MHz|RADIO_Frequency_919MHz|RADIO_Frequency_920MHz|RADIO_Frequency_921MHz|RADIO_Frequency_922MHz|RADIO_Frequency_923MHz|RADIO_Frequency_924MHz|RADIO_Frequency_925MHz|RADIO_Frequency_926MHz|RADIO_Frequency_927MHz|RADIO_Frequency_928MHz|RADIO_Frequency_LowBand|RADIO_Frequency_MidBand|RADIO_Frequency_HighBand|RADIO_ReceiveBandwidth_20kHz|RADIO_ReceiveBandwidth_166_7kHz_1DCC|RADIO_ReceiveBandwidth_200kHz_1DCC|RADIO_ReceiveBandwidth_200kHz_2DCC|RADIO_ReceiveBandwidth_200kHz_4DCC|RADIO_ReceiveBandwidth_250kHz_1DCC|RADIO_ReceiveBandwidth_333kHz|RADIO_ReceiveBandwidth_333kHz_10DCC|RADIO_ReceiveBandwidth_333kHz_8DCC|RADIO_ReceiveBandwidth_333kHz_2DCC|RADIO_ReceiveBandwidth_333kHz_1DCC|RADIO_ReceiveBandwidth_333kHz_0_5DCC|RADIO_ReceiveBandwidth_333kHz_0_25DCC|RADIO_ReceiveBandwidth_333kHz_0_125DCC|RADIO_ReceiveBandwidth_400kHz|RADIO_BitRate_1200|RADIO_BitRate_2400|RADIO_BitRate_4800|RADIO_BitRate_9600|RADIO_BitRate_12500|RADIO_BitRate_19200|RADIO_BitRate_25000|RADIO_BitRate_38400|RADIO_BitRate_50000|RADIO_BitRate_57600|RADIO_BitRate_76800|RADIO_BitRate_100000|RADIO_BitRate_115200|RADIO_BitRate_150000|RADIO_BitRate_153600|RADIO_BitRate_200000|RADIO_BitRate_250000|RADIO_BitRate_300000|SURE_MODE_Initializing|SURE_MODE_Receiving|SURE_MODE_Transmitting|SURE_MODE_WaitingForAck|SURE_MODE_Acknowledging|SURE_ERROR_None|SURE_ERROR_SpiNoResponse|SURE_ERROR_SpiTransmitFail|SURE_ERROR_Generic|SURE_ERROR_OutputBufferTooSmall|SURE_ERROR_InvalidInput|SURE_ERROR_InvalidCommand|SURE_ERROR_ChannelActivity|SURE_ERROR_TxInterruptTimeout|SURE_ERROR_ChecksumError|SURE_ERROR_Busy|SURE_ERROR_NotSupportedInFSK|SURE_ERROR_NotSupportedInLoRa|SURE_Cmd_SetReceiveUID|SURE_Cmd_SetTransmitUID|SURE_Cmd_SetReceivePacketSize|SURE_Cmd_Update|SURE_Cmd_GetStatus|SURE_Cmd_Sleep|SURE_Cmd_GetFirmwareVersion|SURE_Cmd_GetHardwareVersion|SURE_Cmd_EnableFrequencyHopping|SURE_Cmd_DisableFrequencyHopping|SURE_Cmd_EnableAcknowledgements|SURE_Cmd_DisableAcknowledgements|SURE_Cmd_GetPacketTimeOnAir|SURE_Cmd_TransmitData|SURE_Cmd_GetPacket|SURE_Cmd_GetReceiveInfo|SURE_Cmd_GetTransmitInfo|DIGITAL|OUTPUT|INPUT|ENABLED|DISABLED|ANALOG|HIGH|LOW|RELEASED|PRESSED|kiloHertz|kHz|MegaHertz|MHz|FOREVER|TICK_TIME|TICKS_TEN_SECOND|TICKS_ONE_MINUTE|RADIO_TURNAROUND_TIME|MAX_RETRY_WAIT_PACKETS|RFLR_PREAMBLELENGTHMSB|RFLR_PREAMBLELENGTHLSB|RFLR_HOPPERIOD_FREQHOPPINGPERIOD|DESTINATION_SIZE|COMMAND_SIZE|PAYLOAD_SIZE|PACKET_SIZE|TX_FIFO_BASE_ADDR|RX_FIFO_BASE_ADDR|nullptr|UART_PB_CLOCK_FREQ|TICKS_ONE_SECOND|RX_ATTN|ATTN_CHAR|RX_CMD|RX_LEN|RX_PLD|_UART1_TX_VECTOR|MAX_CMD_PLD|SURE_Cmd_Initialize|TEST_BUTTON_DIRECTION|TEST_BUTTON_PULLUP|TEST_BUTTON_VALUE|BUTTON_DEBOUNCE_TIME|BUTTON_HOLD_TIME|SURE_Cmd_SetAckData|SURE_Cmd_SetButtonEnabled|RETRIES|STATUS_FLAG|RADIO_PLD_SIZE_MAX|UART_BUF_SIZE|RING_MAX_IDX|SURE_Rsp_Status|SURE_Rsp_FirmwareVersion|SURE_Rsp_HardwareVersion|SURE_Rsp_GetPacket|SURE_Rsp_ReceiveInfo|SURE_Rsp_TransmitInfo|SURE_Rsp_TimeOnAir|REG_LR_OPMODE|RFLR_OPMODE_LONGRANGEMODE_ON|RFLR_OPMODE_SLEEP|WRITE|READ|REG_FIFO|REG_OPMODE|REG_BITRATEMSB|REG_BITRATELSB|REG_FDEVMSB|REG_FDEVLSB|REG_FRFMSB|REG_FRFMID|REG_FRFLSB|REG_PACONFIG|REG_PARAMP|REG_OCP|REG_LNA|REG_RXCONFIG|REG_RSSICONFIG|REG_RSSICOLLISION|REG_RSSITHRESH|REG_RSSIVALUE|REG_RXBW|REG_AFCBW|REG_OOKPEAK|REG_OOKFIX|REG_OOKAVG|REG_RES17|REG_RES18|REG_RES19|REG_AFCFEI|REG_AFCMSB|REG_AFCLSB|REG_FEIMSB|REG_FEILSB|REG_PREAMBLEDETECT|REG_RXTIMEOUT1|REG_RXTIMEOUT2|REG_RXTIMEOUT3|REG_RXDELAY|REG_OSC|REG_PREAMBLEMSB|REG_PREAMBLELSB|REG_SYNCCONFIG|REG_SYNCVALUE1|REG_SYNCVALUE2|REG_SYNCVALUE3|REG_SYNCVALUE4|REG_SYNCVALUE5|REG_SYNCVALUE6|REG_SYNCVALUE7|REG_SYNCVALUE8|REG_PACKETCONFIG1|REG_PACKETCONFIG2|REG_PAYLOADLENGTH|REG_NODEADRS|REG_BROADCASTADRS|REG_FIFOTHRESH|REG_SEQCONFIG1|REG_SEQCONFIG2|REG_TIMERRESOL|REG_TIMER1COEF|REG_TIMER2COEF|REG_IMAGECAL|REG_TEMP|REG_LOWBAT|REG_IRQFLAGS1|REG_IRQFLAGS2|REG_DIOMAPPING1|REG_DIOMAPPING2|REG_VERSION|REG_PLLHOP|REG_TCXO|REG_PADAC|REG_FORMERTEMP|REG_BITRATEFRAC|REG_AGCREF|REG_AGCTHRESH1|REG_AGCTHRESH2|REG_AGCTHRESH3|REG_PLL|RF_OPMODE_LONGRANGEMODE_MASK|RF_OPMODE_LONGRANGEMODE_OFF|RF_OPMODE_LONGRANGEMODE_ON|RF_OPMODE_MODULATIONTYPE_MASK|RF_OPMODE_MODULATIONTYPE_FSK|RF_OPMODE_MODULATIONTYPE_OOK|RF_OPMODE_MODULATIONSHAPING_MASK|RF_OPMODE_MODULATIONSHAPING_00|RF_OPMODE_MODULATIONSHAPING_01|RF_OPMODE_MODULATIONSHAPING_10|RF_OPMODE_MODULATIONSHAPING_11|RF_OPMODE_MASK|RF_OPMODE_SLEEP|RF_OPMODE_STANDBY|RF_OPMODE_SYNTHESIZER_TX|RF_OPMODE_TRANSMITTER|RF_OPMODE_SYNTHESIZER_RX|RF_OPMODE_RECEIVER|RF_BITRATEMSB_1200_BPS|RF_BITRATELSB_1200_BPS|RF_BITRATEMSB_2400_BPS|RF_BITRATELSB_2400_BPS|RF_BITRATEMSB_4800_BPS|RF_BITRATELSB_4800_BPS|RF_BITRATEMSB_9600_BPS|RF_BITRATELSB_9600_BPS|RF_BITRATEMSB_15000_BPS|RF_BITRATELSB_15000_BPS|RF_BITRATEMSB_19200_BPS|RF_BITRATELSB_19200_BPS|RF_BITRATEMSB_38400_BPS|RF_BITRATELSB_38400_BPS|RF_BITRATEMSB_76800_BPS|RF_BITRATELSB_76800_BPS|RF_BITRATEMSB_153600_BPS|RF_BITRATELSB_153600_BPS|RF_BITRATEMSB_57600_BPS|RF_BITRATELSB_57600_BPS|RF_BITRATEMSB_115200_BPS|RF_BITRATELSB_115200_BPS|RF_BITRATEMSB_12500_BPS|RF_BITRATELSB_12500_BPS|RF_BITRATEMSB_25000_BPS|RF_BITRATELSB_25000_BPS|RF_BITRATEMSB_50000_BPS|RF_BITRATELSB_50000_BPS|RF_BITRATEMSB_100000_BPS|RF_BITRATELSB_100000_BPS|RF_BITRATEMSB_150000_BPS|RF_BITRATELSB_150000_BPS|RF_BITRATEMSB_200000_BPS|RF_BITRATELSB_200000_BPS|RF_BITRATEMSB_250000_BPS|RF_BITRATELSB_250000_BPS|RF_BITRATEMSB_32768_BPS|RF_BITRATELSB_32768_BPS|RF_FDEVMSB_2000_HZ|RF_FDEVLSB_2000_HZ|RF_FDEVMSB_5000_HZ|RF_FDEVLSB_5000_HZ|RF_FDEVMSB_10000_HZ|RF_FDEVLSB_10000_HZ|RF_FDEVMSB_15000_HZ|RF_FDEVLSB_15000_HZ|RF_FDEVMSB_20000_HZ|RF_FDEVLSB_20000_HZ|RF_FDEVMSB_25000_HZ|RF_FDEVLSB_25000_HZ|RF_FDEVMSB_30000_HZ|RF_FDEVLSB_30000_HZ|RF_FDEVMSB_35000_HZ|RF_FDEVLSB_35000_HZ|RF_FDEVMSB_40000_HZ|RF_FDEVLSB_40000_HZ|RF_FDEVMSB_45000_HZ|RF_FDEVLSB_45000_HZ|RF_FDEVMSB_50000_HZ|RF_FDEVLSB_50000_HZ|RF_FDEVMSB_55000_HZ|RF_FDEVLSB_55000_HZ|RF_FDEVMSB_60000_HZ|RF_FDEVLSB_60000_HZ|RF_FDEVMSB_65000_HZ|RF_FDEVLSB_65000_HZ|RF_FDEVMSB_70000_HZ|RF_FDEVLSB_70000_HZ|RF_FDEVMSB_75000_HZ|RF_FDEVLSB_75000_HZ|RF_FDEVMSB_80000_HZ|RF_FDEVLSB_80000_HZ|RF_FDEVMSB_85000_HZ|RF_FDEVLSB_85000_HZ|RF_FDEVMSB_90000_HZ|RF_FDEVLSB_90000_HZ|RF_FDEVMSB_95000_HZ|RF_FDEVLSB_95000_HZ|RF_FDEVMSB_100000_HZ|RF_FDEVLSB_100000_HZ|RF_FDEVMSB_110000_HZ|RF_FDEVLSB_110000_HZ|RF_FDEVMSB_120000_HZ|RF_FDEVLSB_120000_HZ|RF_FDEVMSB_130000_HZ|RF_FDEVLSB_130000_HZ|RF_FDEVMSB_140000_HZ|RF_FDEVLSB_140000_HZ|RF_FDEVMSB_150000_HZ|RF_FDEVLSB_150000_HZ|RF_FDEVMSB_160000_HZ|RF_FDEVLSB_160000_HZ|RF_FDEVMSB_170000_HZ|RF_FDEVLSB_170000_HZ|RF_FDEVMSB_180000_HZ|RF_FDEVLSB_180000_HZ|RF_FDEVMSB_190000_HZ|RF_FDEVLSB_190000_HZ|RF_FDEVMSB_200000_HZ|RF_FDEVLSB_200000_HZ|RF_FRFMSB_863_MHZ|RF_FRFMID_863_MHZ|RF_FRFLSB_863_MHZ|RF_FRFMSB_864_MHZ|RF_FRFMID_864_MHZ|RF_FRFLSB_864_MHZ|RF_FRFMSB_865_MHZ|RF_FRFMID_865_MHZ|RF_FRFLSB_865_MHZ|RF_FRFMSB_866_MHZ|RF_FRFMID_866_MHZ|RF_FRFLSB_866_MHZ|RF_FRFMSB_867_MHZ|RF_FRFMID_867_MHZ|RF_FRFLSB_867_MHZ|RF_FRFMSB_868_MHZ|RF_FRFMID_868_MHZ|RF_FRFLSB_868_MHZ|RF_FRFMSB_869_MHZ|RF_FRFMID_869_MHZ|RF_FRFLSB_869_MHZ|RF_FRFMSB_870_MHZ|RF_FRFMID_870_MHZ|RF_FRFLSB_870_MHZ|RF_FRFMSB_902_MHZ|RF_FRFMID_902_MHZ|RF_FRFLSB_902_MHZ|RF_FRFMSB_903_MHZ|RF_FRFMID_903_MHZ|RF_FRFLSB_903_MHZ|RF_FRFMSB_904_MHZ|RF_FRFMID_904_MHZ|RF_FRFLSB_904_MHZ|RF_FRFMSB_905_MHZ|RF_FRFMID_905_MHZ|RF_FRFLSB_905_MHZ|RF_FRFMSB_906_MHZ|RF_FRFMID_906_MHZ|RF_FRFLSB_906_MHZ|RF_FRFMSB_907_MHZ|RF_FRFMID_907_MHZ|RF_FRFLSB_907_MHZ|RF_FRFMSB_908_MHZ|RF_FRFMID_908_MHZ|RF_FRFLSB_908_MHZ|RF_FRFMSB_909_MHZ|RF_FRFMID_909_MHZ|RF_FRFLSB_909_MHZ|RF_FRFMSB_910_MHZ|RF_FRFMID_910_MHZ|RF_FRFLSB_910_MHZ|RF_FRFMSB_911_MHZ|RF_FRFMID_911_MHZ|RF_FRFLSB_911_MHZ|RF_FRFMSB_912_MHZ|RF_FRFMID_912_MHZ|RF_FRFLSB_912_MHZ|RF_FRFMSB_913_MHZ|RF_FRFMID_913_MHZ|RF_FRFLSB_913_MHZ|RF_FRFMSB_914_MHZ|RF_FRFMID_914_MHZ|RF_FRFLSB_914_MHZ|RF_FRFMSB_915_MHZ|RF_FRFMID_915_MHZ|RF_FRFLSB_915_MHZ|RF_FRFMSB_916_MHZ|RF_FRFMID_916_MHZ|RF_FRFLSB_916_MHZ|RF_FRFMSB_917_MHZ|RF_FRFMID_917_MHZ|RF_FRFLSB_917_MHZ|RF_FRFMSB_918_MHZ|RF_FRFMID_918_MHZ|RF_FRFLSB_918_MHZ|RF_FRFMSB_919_MHZ|RF_FRFMID_919_MHZ|RF_FRFLSB_919_MHZ|RF_FRFMSB_920_MHZ|RF_FRFMID_920_MHZ|RF_FRFLSB_920_MHZ|RF_FRFMSB_921_MHZ|RF_FRFMID_921_MHZ|RF_FRFLSB_921_MHZ|RF_FRFMSB_922_MHZ|RF_FRFMID_922_MHZ|RF_FRFLSB_922_MHZ|RF_FRFMSB_923_MHZ|RF_FRFMID_923_MHZ|RF_FRFLSB_923_MHZ|RF_FRFMSB_924_MHZ|RF_FRFMID_924_MHZ|RF_FRFLSB_924_MHZ|RF_FRFMSB_925_MHZ|RF_FRFMID_925_MHZ|RF_FRFLSB_925_MHZ|RF_FRFMSB_926_MHZ|RF_FRFMID_926_MHZ|RF_FRFLSB_926_MHZ|RF_FRFMSB_927_MHZ|RF_FRFMID_927_MHZ|RF_FRFLSB_927_MHZ|RF_FRFMSB_928_MHZ|RF_FRFMID_928_MHZ|RF_FRFLSB_928_MHZ|RF_PACONFIG_PASELECT_MASK|RF_PACONFIG_PASELECT_PABOOST|RF_PACONFIG_PASELECT_RFO|RF_PACONFIG_MAX_POWER_MASK|RF_PACONFIG_OUTPUTPOWER_MASK|RF_PARAMP_LOWPNTXPLL_MASK|RF_PARAMP_LOWPNTXPLL_OFF|RF_PARAMP_LOWPNTXPLL_ON|RF_PARAMP_MASK|RF_PARAMP_3400_US|RF_PARAMP_2000_US|RF_PARAMP_1000_US|RF_PARAMP_0500_US|RF_PARAMP_0250_US|RF_PARAMP_0125_US|RF_PARAMP_0100_US|RF_PARAMP_0062_US|RF_PARAMP_0050_US|RF_PARAMP_0040_US|RF_PARAMP_0031_US|RF_PARAMP_0025_US|RF_PARAMP_0020_US|RF_PARAMP_0015_US|RF_PARAMP_0012_US|RF_PARAMP_0010_US|RF_OCP_MASK|RF_OCP_ON|RF_OCP_OFF|RF_OCP_TRIM_MASK|RF_OCP_TRIM_045_MA|RF_OCP_TRIM_050_MA|RF_OCP_TRIM_055_MA|RF_OCP_TRIM_060_MA|RF_OCP_TRIM_065_MA|RF_OCP_TRIM_070_MA|RF_OCP_TRIM_075_MA|RF_OCP_TRIM_080_MA|RF_OCP_TRIM_085_MA|RF_OCP_TRIM_090_MA|RF_OCP_TRIM_095_MA|RF_OCP_TRIM_100_MA|RF_OCP_TRIM_105_MA|RF_OCP_TRIM_110_MA|RF_OCP_TRIM_115_MA|RF_OCP_TRIM_120_MA|RF_OCP_TRIM_130_MA|RF_OCP_TRIM_140_MA|RF_OCP_TRIM_150_MA|RF_OCP_TRIM_160_MA|RF_OCP_TRIM_170_MA|RF_OCP_TRIM_180_MA|RF_OCP_TRIM_190_MA|RF_OCP_TRIM_200_MA|RF_OCP_TRIM_210_MA|RF_OCP_TRIM_220_MA|RF_OCP_TRIM_230_MA|RF_OCP_TRIM_240_MA|RF_LNA_GAIN_MASK|RF_LNA_GAIN_G1|RF_LNA_GAIN_G2|RF_LNA_GAIN_G3|RF_LNA_GAIN_G4|RF_LNA_GAIN_G5|RF_LNA_GAIN_G6|RF_LNA_BOOST_MASK|RF_LNA_BOOST_OFF|RF_LNA_BOOST_ON|RF_RXCONFIG_RESTARTRXONCOLLISION_MASK|RF_RXCONFIG_RESTARTRXONCOLLISION_ON|RF_RXCONFIG_RESTARTRXONCOLLISION_OFF|RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK|RF_RXCONFIG_RESTARTRXWITHPLLLOCK|RF_RXCONFIG_AFCAUTO_MASK|RF_RXCONFIG_AFCAUTO_ON|RF_RXCONFIG_AFCAUTO_OFF|RF_RXCONFIG_AGCAUTO_MASK|RF_RXCONFIG_AGCAUTO_ON|RF_RXCONFIG_AGCAUTO_OFF|RF_RXCONFIG_RXTRIGER_MASK|RF_RXCONFIG_RXTRIGER_OFF|RF_RXCONFIG_RXTRIGER_RSSI|RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT|RF_RXCONFIG_RXTRIGER_RSSI_PREAMBLEDETECT|RF_RSSICONFIG_OFFSET_MASK|RF_RSSICONFIG_OFFSET_P_00_DB|RF_RSSICONFIG_OFFSET_P_01_DB|RF_RSSICONFIG_OFFSET_P_02_DB|RF_RSSICONFIG_OFFSET_P_03_DB|RF_RSSICONFIG_OFFSET_P_04_DB|RF_RSSICONFIG_OFFSET_P_05_DB|RF_RSSICONFIG_OFFSET_P_06_DB|RF_RSSICONFIG_OFFSET_P_07_DB|RF_RSSICONFIG_OFFSET_P_08_DB|RF_RSSICONFIG_OFFSET_P_09_DB|RF_RSSICONFIG_OFFSET_P_10_DB|RF_RSSICONFIG_OFFSET_P_11_DB|RF_RSSICONFIG_OFFSET_P_12_DB|RF_RSSICONFIG_OFFSET_P_13_DB|RF_RSSICONFIG_OFFSET_P_14_DB|RF_RSSICONFIG_OFFSET_P_15_DB|RF_RSSICONFIG_OFFSET_M_16_DB|RF_RSSICONFIG_OFFSET_M_15_DB|RF_RSSICONFIG_OFFSET_M_14_DB|RF_RSSICONFIG_OFFSET_M_13_DB|RF_RSSICONFIG_OFFSET_M_12_DB|RF_RSSICONFIG_OFFSET_M_11_DB|RF_RSSICONFIG_OFFSET_M_10_DB|RF_RSSICONFIG_OFFSET_M_09_DB|RF_RSSICONFIG_OFFSET_M_08_DB|RF_RSSICONFIG_OFFSET_M_07_DB|RF_RSSICONFIG_OFFSET_M_06_DB|RF_RSSICONFIG_OFFSET_M_05_DB|RF_RSSICONFIG_OFFSET_M_04_DB|RF_RSSICONFIG_OFFSET_M_03_DB|RF_RSSICONFIG_OFFSET_M_02_DB|RF_RSSICONFIG_OFFSET_M_01_DB|RF_RSSICONFIG_SMOOTHING_MASK|RF_RSSICONFIG_SMOOTHING_2|RF_RSSICONFIG_SMOOTHING_4|RF_RSSICONFIG_SMOOTHING_8|RF_RSSICONFIG_SMOOTHING_16|RF_RSSICONFIG_SMOOTHING_32|RF_RSSICONFIG_SMOOTHING_64|RF_RSSICONFIG_SMOOTHING_128|RF_RSSICONFIG_SMOOTHING_256|RF_RSSICOLISION_THRESHOLD|RF_RSSITHRESH_THRESHOLD|RF_RXBW_MANT_MASK|RF_RXBW_MANT_16|RF_RXBW_MANT_20|RF_RXBW_MANT_24|RF_RXBW_EXP_MASK|RF_RXBW_EXP_0|RF_RXBW_EXP_1|RF_RXBW_EXP_2|RF_RXBW_EXP_3|RF_RXBW_EXP_4|RF_RXBW_EXP_5|RF_RXBW_EXP_6|RF_RXBW_EXP_7|RF_AFCBW_MANTAFC_MASK|RF_AFCBW_MANTAFC_16|RF_AFCBW_MANTAFC_20|RF_AFCBW_MANTAFC_24|RF_AFCBW_EXPAFC_MASK|RF_AFCBW_EXPAFC_0|RF_AFCBW_EXPAFC_1|RF_AFCBW_EXPAFC_2|RF_AFCBW_EXPAFC_3|RF_AFCBW_EXPAFC_4|RF_AFCBW_EXPAFC_5|RF_AFCBW_EXPAFC_6|RF_AFCBW_EXPAFC_7|RF_OOKPEAK_BITSYNC_MASK|RF_OOKPEAK_BITSYNC_ON|RF_OOKPEAK_BITSYNC_OFF|RF_OOKPEAK_OOKTHRESHTYPE_MASK|RF_OOKPEAK_OOKTHRESHTYPE_FIXED|RF_OOKPEAK_OOKTHRESHTYPE_PEAK|RF_OOKPEAK_OOKTHRESHTYPE_AVERAGE|RF_OOKPEAK_OOKPEAKTHRESHSTEP_MASK|RF_OOKPEAK_OOKPEAKTHRESHSTEP_0_5_DB|RF_OOKPEAK_OOKPEAKTHRESHSTEP_1_0_DB|RF_OOKPEAK_OOKPEAKTHRESHSTEP_1_5_DB|RF_OOKPEAK_OOKPEAKTHRESHSTEP_2_0_DB|RF_OOKPEAK_OOKPEAKTHRESHSTEP_3_0_DB|RF_OOKPEAK_OOKPEAKTHRESHSTEP_4_0_DB|RF_OOKPEAK_OOKPEAKTHRESHSTEP_5_0_DB|RF_OOKPEAK_OOKPEAKTHRESHSTEP_6_0_DB|RF_OOKFIX_OOKFIXEDTHRESHOLD|RF_OOKAVG_OOKPEAKTHRESHDEC_MASK|RF_OOKAVG_OOKPEAKTHRESHDEC_000|RF_OOKAVG_OOKPEAKTHRESHDEC_001|RF_OOKAVG_OOKPEAKTHRESHDEC_010|RF_OOKAVG_OOKPEAKTHRESHDEC_011|RF_OOKAVG_OOKPEAKTHRESHDEC_100|RF_OOKAVG_OOKPEAKTHRESHDEC_101|RF_OOKAVG_OOKPEAKTHRESHDEC_110|RF_OOKAVG_OOKPEAKTHRESHDEC_111|RF_OOKAVG_AVERAGEOFFSET_MASK|RF_OOKAVG_AVERAGEOFFSET_0_DB|RF_OOKAVG_AVERAGEOFFSET_2_DB|RF_OOKAVG_AVERAGEOFFSET_4_DB|RF_OOKAVG_AVERAGEOFFSET_6_DB|RF_OOKAVG_OOKAVERAGETHRESHFILT_MASK|RF_OOKAVG_OOKAVERAGETHRESHFILT_00|RF_OOKAVG_OOKAVERAGETHRESHFILT_01|RF_OOKAVG_OOKAVERAGETHRESHFILT_10|RF_OOKAVG_OOKAVERAGETHRESHFILT_11|RF_AFCFEI_AGCSTART|RF_AFCFEI_AFCCLEAR|RF_AFCFEI_AFCAUTOCLEAR_MASK|RF_AFCFEI_AFCAUTOCLEAR_ON|RF_AFCFEI_AFCAUTOCLEAR_OFF|RF_PREAMBLEDETECT_DETECTOR_MASK|RF_PREAMBLEDETECT_DETECTOR_ON|RF_PREAMBLEDETECT_DETECTOR_OFF|RF_PREAMBLEDETECT_DETECTORSIZE_MASK|RF_PREAMBLEDETECT_DETECTORSIZE_1|RF_PREAMBLEDETECT_DETECTORSIZE_2|RF_PREAMBLEDETECT_DETECTORSIZE_3|RF_PREAMBLEDETECT_DETECTORSIZE_4|RF_PREAMBLEDETECT_DETECTORTOL_MASK|RF_PREAMBLEDETECT_DETECTORTOL_0|RF_PREAMBLEDETECT_DETECTORTOL_1|RF_PREAMBLEDETECT_DETECTORTOL_2|RF_PREAMBLEDETECT_DETECTORTOL_3|RF_PREAMBLEDETECT_DETECTORTOL_4|RF_PREAMBLEDETECT_DETECTORTOL_5|RF_PREAMBLEDETECT_DETECTORTOL_6|RF_PREAMBLEDETECT_DETECTORTOL_7|RF_PREAMBLEDETECT_DETECTORTOL_8|RF_PREAMBLEDETECT_DETECTORTOL_9|RF_PREAMBLEDETECT_DETECTORTOL_10|RF_PREAMBLEDETECT_DETECTORTOL_11|RF_PREAMBLEDETECT_DETECTORTOL_12|RF_PREAMBLEDETECT_DETECTORTOL_13|RF_PREAMBLEDETECT_DETECTORTOL_14|RF_PREAMBLEDETECT_DETECTORTOL_15|RF_PREAMBLEDETECT_DETECTORTOL_16|RF_PREAMBLEDETECT_DETECTORTOL_17|RF_PREAMBLEDETECT_DETECTORTOL_18|RF_PREAMBLEDETECT_DETECTORTOL_19|RF_PREAMBLEDETECT_DETECTORTOL_20|RF_PREAMBLEDETECT_DETECTORTOL_21|RF_PREAMBLEDETECT_DETECTORTOL_22|RF_PREAMBLEDETECT_DETECTORTOL_23|RF_PREAMBLEDETECT_DETECTORTOL_24|RF_PREAMBLEDETECT_DETECTORTOL_25|RF_PREAMBLEDETECT_DETECTORTOL_26|RF_PREAMBLEDETECT_DETECTORTOL_27|RF_PREAMBLEDETECT_DETECTORTOL_28|RF_PREAMBLEDETECT_DETECTORTOL_29|RF_PREAMBLEDETECT_DETECTORTOL_30|RF_PREAMBLEDETECT_DETECTORTOL_31|RF_RXTIMEOUT1_TIMEOUTRXRSSI|RF_RXTIMEOUT2_TIMEOUTRXPREAMBLE|RF_RXTIMEOUT3_TIMEOUTSIGNALSYNC|RF_RXDELAY_INTERPACKETRXDELAY|RF_OSC_RCCALSTART|RF_OSC_CLKOUT_MASK|RF_OSC_CLKOUT_32_MHZ|RF_OSC_CLKOUT_16_MHZ|RF_OSC_CLKOUT_8_MHZ|RF_OSC_CLKOUT_4_MHZ|RF_OSC_CLKOUT_2_MHZ|RF_OSC_CLKOUT_1_MHZ|RF_OSC_CLKOUT_RC|RF_OSC_CLKOUT_OFF|RF_PREAMBLEMSB_SIZE|RF_PREAMBLELSB_SIZE|RF_SYNCCONFIG_AUTORESTARTRXMODE_MASK|RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON|RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_OFF|RF_SYNCCONFIG_AUTORESTARTRXMODE_OFF|RF_SYNCCONFIG_PREAMBLEPOLARITY_MASK|RF_SYNCCONFIG_PREAMBLEPOLARITY_55|RF_SYNCCONFIG_PREAMBLEPOLARITY_AA|RF_SYNCCONFIG_SYNC_MASK|RF_SYNCCONFIG_SYNC_ON|RF_SYNCCONFIG_SYNC_OFF|RF_SYNCCONFIG_SYNCSIZE_MASK|RF_SYNCCONFIG_SYNCSIZE_1|RF_SYNCCONFIG_SYNCSIZE_2|RF_SYNCCONFIG_SYNCSIZE_3|RF_SYNCCONFIG_SYNCSIZE_4|RF_SYNCCONFIG_SYNCSIZE_5|RF_SYNCCONFIG_SYNCSIZE_6|RF_SYNCCONFIG_SYNCSIZE_7|RF_SYNCCONFIG_SYNCSIZE_8|RF_SYNCVALUE1_SYNCVALUE|RF_SYNCVALUE2_SYNCVALUE|RF_SYNCVALUE3_SYNCVALUE|RF_SYNCVALUE4_SYNCVALUE|RF_SYNCVALUE5_SYNCVALUE|RF_SYNCVALUE6_SYNCVALUE|RF_SYNCVALUE7_SYNCVALUE|RF_SYNCVALUE8_SYNCVALUE|RF_PACKETCONFIG1_PACKETFORMAT_MASK|RF_PACKETCONFIG1_PACKETFORMAT_FIXED|RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE|RF_PACKETCONFIG1_DCFREE_MASK|RF_PACKETCONFIG1_DCFREE_OFF|RF_PACKETCONFIG1_DCFREE_MANCHESTER|RF_PACKETCONFIG1_DCFREE_WHITENING|RF_PACKETCONFIG1_CRC_MASK|RF_PACKETCONFIG1_CRC_ON|RF_PACKETCONFIG1_CRC_OFF|RF_PACKETCONFIG1_CRCAUTOCLEAR_MASK|RF_PACKETCONFIG1_CRCAUTOCLEAR_ON|RF_PACKETCONFIG1_CRCAUTOCLEAR_OFF|RF_PACKETCONFIG1_ADDRSFILTERING_MASK|RF_PACKETCONFIG1_ADDRSFILTERING_OFF|RF_PACKETCONFIG1_ADDRSFILTERING_NODE|RF_PACKETCONFIG1_ADDRSFILTERING_NODEBROADCAST|RF_PACKETCONFIG1_CRCWHITENINGTYPE_MASK|RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT|RF_PACKETCONFIG1_CRCWHITENINGTYPE_IBM|RF_PACKETCONFIG2_WMBUS_CRC_ENABLE_MASK|RF_PACKETCONFIG2_WMBUS_CRC_ENABLE|RF_PACKETCONFIG2_WMBUS_CRC_DISABLE|RF_PACKETCONFIG2_DATAMODE_MASK|RF_PACKETCONFIG2_DATAMODE_CONTINUOUS|RF_PACKETCONFIG2_DATAMODE_PACKET|RF_PACKETCONFIG2_IOHOME_MASK|RF_PACKETCONFIG2_IOHOME_ON|RF_PACKETCONFIG2_IOHOME_OFF|RF_PACKETCONFIG2_BEACON_MASK|RF_PACKETCONFIG2_BEACON_ON|RF_PACKETCONFIG2_BEACON_OFF|RF_PACKETCONFIG2_PAYLOADLENGTH_MSB_MASK|RF_PAYLOADLENGTH_LENGTH|RF_NODEADDRESS_ADDRESS|RF_BROADCASTADDRESS_ADDRESS|RF_FIFOTHRESH_TXSTARTCONDITION_MASK|RF_FIFOTHRESH_TXSTARTCONDITION_FIFOTHRESH|RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY|RF_FIFOTHRESH_FIFOTHRESHOLD_MASK|RF_FIFOTHRESH_FIFOTHRESHOLD_THRESHOLD|RF_SEQCONFIG1_SEQUENCER_START|RF_SEQCONFIG1_SEQUENCER_STOP|RF_SEQCONFIG1_IDLEMODE_MASK|RF_SEQCONFIG1_IDLEMODE_SLEEP|RF_SEQCONFIG1_IDLEMODE_STANDBY|RF_SEQCONFIG1_FROMSTART_MASK|RF_SEQCONFIG1_FROMSTART_TOLPS|RF_SEQCONFIG1_FROMSTART_TORX|RF_SEQCONFIG1_FROMSTART_TOTX|RF_SEQCONFIG1_FROMSTART_TOTX_ONFIFOLEVEL|RF_SEQCONFIG1_LPS_MASK|RF_SEQCONFIG1_LPS_SEQUENCER_OFF|RF_SEQCONFIG1_LPS_IDLE|RF_SEQCONFIG1_FROMIDLE_MASK|RF_SEQCONFIG1_FROMIDLE_TOTX|RF_SEQCONFIG1_FROMIDLE_TORX|RF_SEQCONFIG1_FROMTX_MASK|RF_SEQCONFIG1_FROMTX_TOLPS|RF_SEQCONFIG1_FROMTX_TORX|RF_SEQCONFIG2_FROMRX_MASK|RF_SEQCONFIG2_FROMRX_TOUNUSED_000|RF_SEQCONFIG2_FROMRX_TORXPKT_ONPLDRDY|RF_SEQCONFIG2_FROMRX_TOLPS_ONPLDRDY|RF_SEQCONFIG2_FROMRX_TORXPKT_ONCRCOK|RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONRSSI|RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONSYNC|RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONPREAMBLE|RF_SEQCONFIG2_FROMRX_TOUNUSED_111|RF_SEQCONFIG2_FROMRXTIMEOUT_MASK|RF_SEQCONFIG2_FROMRXTIMEOUT_TORXRESTART|RF_SEQCONFIG2_FROMRXTIMEOUT_TOTX|RF_SEQCONFIG2_FROMRXTIMEOUT_TOLPS|RF_SEQCONFIG2_FROMRXTIMEOUT_TOSEQUENCEROFF|RF_SEQCONFIG2_FROMRXPKT_MASK|RF_SEQCONFIG2_FROMRXPKT_TOSEQUENCEROFF|RF_SEQCONFIG2_FROMRXPKT_TOTX_ONFIFOEMPTY|RF_SEQCONFIG2_FROMRXPKT_TOLPS|RF_SEQCONFIG2_FROMRXPKT_TOSYNTHESIZERRX|RF_SEQCONFIG2_FROMRXPKT_TORX|RF_TIMERRESOL_TIMER1RESOL_MASK|RF_TIMERRESOL_TIMER1RESOL_OFF|RF_TIMERRESOL_TIMER1RESOL_000064_US|RF_TIMERRESOL_TIMER1RESOL_004100_US|RF_TIMERRESOL_TIMER1RESOL_262000_US|RF_TIMERRESOL_TIMER2RESOL_MASK|RF_TIMERRESOL_TIMER2RESOL_OFF|RF_TIMERRESOL_TIMER2RESOL_000064_US|RF_TIMERRESOL_TIMER2RESOL_004100_US|RF_TIMERRESOL_TIMER2RESOL_262000_US|RF_TIMER1COEF_TIMER1COEFFICIENT|RF_TIMER2COEF_TIMER2COEFFICIENT|RF_IMAGECAL_AUTOIMAGECAL_MASK|RF_IMAGECAL_AUTOIMAGECAL_ON|RF_IMAGECAL_AUTOIMAGECAL_OFF|RF_IMAGECAL_IMAGECAL_MASK|RF_IMAGECAL_IMAGECAL_START|RF_IMAGECAL_IMAGECAL_RUNNING|RF_IMAGECAL_IMAGECAL_DONE|RF_IMAGECAL_TEMPCHANGE_HIGHER|RF_IMAGECAL_TEMPCHANGE_LOWER|RF_IMAGECAL_TEMPTHRESHOLD_MASK|RF_IMAGECAL_TEMPTHRESHOLD_05|RF_IMAGECAL_TEMPTHRESHOLD_10|RF_IMAGECAL_TEMPTHRESHOLD_15|RF_IMAGECAL_TEMPTHRESHOLD_20|RF_IMAGECAL_TEMPMONITOR_MASK|RF_IMAGECAL_TEMPMONITOR_ON|RF_IMAGECAL_TEMPMONITOR_OFF|RF_LOWBAT_MASK|RF_LOWBAT_ON|RF_LOWBAT_OFF|RF_LOWBAT_TRIM_MASK|RF_LOWBAT_TRIM_1695|RF_LOWBAT_TRIM_1764|RF_LOWBAT_TRIM_1835|RF_LOWBAT_TRIM_1905|RF_LOWBAT_TRIM_1976|RF_LOWBAT_TRIM_2045|RF_LOWBAT_TRIM_2116|RF_LOWBAT_TRIM_2185|RF_IRQFLAGS1_MODEREADY|RF_IRQFLAGS1_RXREADY|RF_IRQFLAGS1_TXREADY|RF_IRQFLAGS1_PLLLOCK|RF_IRQFLAGS1_RSSI|RF_IRQFLAGS1_TIMEOUT|RF_IRQFLAGS1_PREAMBLEDETECT|RF_IRQFLAGS1_SYNCADDRESSMATCH|RF_IRQFLAGS2_FIFOFULL|RF_IRQFLAGS2_FIFOEMPTY|RF_IRQFLAGS2_FIFOLEVEL|RF_IRQFLAGS2_FIFOOVERRUN|RF_IRQFLAGS2_PACKETSENT|RF_IRQFLAGS2_PAYLOADREADY|RF_IRQFLAGS2_CRCOK|RF_IRQFLAGS2_LOWBAT|RF_DIOMAPPING1_DIO0_MASK|RF_DIOMAPPING1_DIO0_00|RF_DIOMAPPING1_DIO0_01|RF_DIOMAPPING1_DIO0_10|RF_DIOMAPPING1_DIO0_11|RF_DIOMAPPING1_DIO1_MASK|RF_DIOMAPPING1_DIO1_00|RF_DIOMAPPING1_DIO1_01|RF_DIOMAPPING1_DIO1_10|RF_DIOMAPPING1_DIO1_11|RF_DIOMAPPING1_DIO2_MASK|RF_DIOMAPPING1_DIO2_00|RF_DIOMAPPING1_DIO2_01|RF_DIOMAPPING1_DIO2_10|RF_DIOMAPPING1_DIO2_11|RF_DIOMAPPING1_DIO3_MASK|RF_DIOMAPPING1_DIO3_00|RF_DIOMAPPING1_DIO3_01|RF_DIOMAPPING1_DIO3_10|RF_DIOMAPPING1_DIO3_11|RF_DIOMAPPING2_DIO4_MASK|RF_DIOMAPPING2_DIO4_00|RF_DIOMAPPING2_DIO4_01|RF_DIOMAPPING2_DIO4_10|RF_DIOMAPPING2_DIO4_11|RF_DIOMAPPING2_DIO5_MASK|RF_DIOMAPPING2_DIO5_00|RF_DIOMAPPING2_DIO5_01|RF_DIOMAPPING2_DIO5_10|RF_DIOMAPPING2_DIO5_11|RF_DIOMAPPING2_MAP_MASK|RF_DIOMAPPING2_MAP_PREAMBLEDETECT|RF_DIOMAPPING2_MAP_RSSI|RF_PLLHOP_FASTHOP_MASK|RF_PLLHOP_FASTHOP_ON|RF_PLLHOP_FASTHOP_OFF|RF_TCXO_TCXOINPUT_MASK|RF_TCXO_TCXOINPUT_ON|RF_TCXO_TCXOINPUT_OFF|RF_PADAC_20DBM_MASK|RF_PADAC_20DBM_ON|RF_PADAC_20DBM_OFF|RF_BITRATEFRAC_MASK|RF_PLL_BANDWIDTH_MASK|RF_PLL_BANDWIDTH_75|RF_PLL_BANDWIDTH_150|RF_PLL_BANDWIDTH_225|RF_PLL_BANDWIDTH_300|RFLR_OPMODE_RECEIVER'
  custom_globals: 'appData|gl'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|extern|register|{{declspec}}'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'decltype|sizeof|__declspec|__attribute__'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  #############################################################################
  # Reusable contexts
  #
  # The follow contexts are currently constructed to be reused in the C++
  # syntax. They are specifically constructed to not push into sub-contexts,
  # which ensures that C++ code isn't accidentally lexed as plain C. They also
  # should not use the {{identifier}} variable since that is different for C++.
  #############################################################################

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.c
      captures:
        1: meta.toc-list.banner.block.c
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.c
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.c
      captures:
        1: meta.toc-list.banner.line.c
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '\*\*'
          push:
            - meta_scope: custom.thing.c
            - match: '\*\*'
              pop: true
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
        - match: \n
          pop: true

  strings:
    - match: '(L|u8|u|U)?(")'
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.double.c
        - match: '"'
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.single.c
        - match: "'"
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.c
    - match: "%"
      scope: invalid.illegal.placeholder.c

  keywords:
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c
    - match: \bsizeof\b
      scope: keyword.operator.word.c

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.c

  variables:
    - match: '\bg[A-Z]\w*\b'
      scope: variable.other.readwrite.global.mac-classic.c
    - match: '\bs[A-Z]\w*\b'
      scope: variable.other.readwrite.static.mac-classic.c

  constants:
    - match: \b(__func__|NULL|true|false|TRUE|FALSE|nullptr)\b
      scope: constant.language.c
    - match: \b({{custom_constants}})\b
      scope: custom.constant.c
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.c
    # common C constant naming idiom -- kConstantVariable
    - match: '\bk[A-Z]\w*\b'
      scope: constant.other.variable.mac-classic.c
    - match: \b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      scope: support.constant.mac-classic.c

  c99:
    - match: \b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b
      scope: support.function.C99.c

  types:
    - match: \b({{basic_types}}|{{before_tag}})\b
      scope: storage.type.c
    - match: \b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|ptrdiff_t)\b
      scope: support.type.sys-types.c
    - match: \b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b
      scope: support.type.pthread.c
    - match: \b({{stdint}})\b
      scope: support.type.stdint.c
    - match: \b({{custom_types}})\b
      scope: custom.type.c
    - match: \b({{custom_globals}})\b
      scope: custom.global.c
    - match: '\b({{microsoft_types}})\b'
      scope: support.type.microsoft.c
    - match: '\b({{windows_types}})\b'
      scope: support.type.windows.c
    - match: \b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b
      scope: support.type.mac-classic.c

  numbers:
    - match: '\b((0(x|X)[0-9a-fA-F]*(\.[0-9a-fA-F]+p-?\d+)?)|(0(b|B)[01]+)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b'
      scope: constant.numeric.c

  operators:
    - match: '->'
      scope: punctuation.accessor.c
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.c
    - match: \+|\-|/|%|<<|>>|&&|\|\||\||\^|~|!
      scope: keyword.operator.arithmetic.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
    - match: \=
      scope: keyword.operator.assignment.c
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.c
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c

  access:
    - match: '(\.)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.c
        2: variable.other.member.c

  label:
    - match: '^\s*((?!default){{identifier}})(:)(?!:)'
      captures:
        1: entity.name.label.c
        2: punctuation.separator.c

  preprocessor-disabled:
    - match: ^\s*(#\s*if(n?def)?)\b
      captures:
        1: meta.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c
          pop: true
        - include: preprocessor-disabled
        - include: pragma-mark
    - include: pragma-mark

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.c

  preprocessor-line-ending:
    - match: $\n
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\\$\n'
          scope: punctuation.separator.continuation.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
          pop: true
        - match: (?=\n)
          pop: true

  pragma-mark:
    - match: ^\s*((#\s*pragma\s+mark)\s+(.*))
      scope: meta.section.c
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.pragma.c
        3: meta.toc-list.pragma-mark.c

  # Used by "inc" snippets to prevent double ##include
  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.c

  #############################################################################
  # The following are C-specific scopes that should not be reused. This is
  # because they push into subcontexts and use variables that are C-specific.
  #############################################################################

  global:
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: access
    - include: typedef
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - match: ','
      scope: punctuation.separator.c
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.c

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.c

  ## C-specific contexts

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: \*
      scope: keyword.operator.c
    # If a struct/union/enum followed by a name that is not a macro or declspec
    # then this is likely a return type of a function. This is uncommon.
    - match: |-
        (?x:
          ({{before_tag}})
          \s+
          (?=
            (?![[:upper:][:digit:]_]+\b|__declspec)
            {{identifier}}
            (\s+{{identifier}}|\s*\*+)
          )
        )
      captures:
        1: storage.type.c
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_scope: meta.function-call.c
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*
      scope: keyword.operator.c
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))(?=\s+)'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.c entity.name.function.c
      set: function-definition-params
    - match: '(?=\S)'
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.c
    - include: comments
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.c meta.group.c punctuation.section.group.begin.c
          set:
            - meta_content_scope: meta.function.parameters.c meta.group.c
            - match : \)
              scope: punctuation.section.group.end.c
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.c
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.c
            - include: expressions
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.c
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.c
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.c
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.function.c meta.block.c
        - match: '\}'
          scope: meta.function.c meta.block.c punctuation.section.block.end.c
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    - match: '\bstruct\b'
      scope: storage.type.c
      set: data-structures-struct-definition
    - match: '\benum\b'
      scope: storage.type.c
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: storage.type.c
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.struct.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.struct.c meta.block.c
        - match: '\}'
          scope: meta.struct.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.enum.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.enum.c meta.block.c
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-union-definition:
    - meta_scope: meta.union.c
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.c
    - match: '{{identifier}}'
      scope: entity.name.union.c
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.c
      set:
        - meta_content_scope: meta.union.c meta.block.c
        - match: '\}'
          scope: meta.union.c meta.block.c punctuation.section.block.end.c
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.c
      push:
        - meta_scope: meta.block.c
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.c
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.c
      push:
        - meta_scope: meta.group.c
        - match: \)
          scope: punctuation.section.group.end.c
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.c
      push:
        - meta_scope: meta.brackets.c
        - match: \]
          scope: punctuation.section.brackets.end.c
          pop: true
        - include: expressions

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.c
      push:
        - match: ':'
          scope: punctuation.separator.c
          pop: true
        - include: expressions

  modifiers-parens:
    - match: \b(__attribute__)\s*(\(\()
      captures:
        1: storage.modifier.c
        2: meta.group.c punctuation.section.group.begin.c
      push :
        - meta_scope: meta.attribute.c
        - meta_content_scope: meta.group.c
        - include: parens
        - include: strings
        - match: \)\)
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
    - match: \b(__declspec)(\()
      captures:
        1: storage.modifier.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - match: '\b(align|allocate|code_seg|property|uuid)\b\s*(\()'
          captures:
            1: storage.modifier.c
            2: meta.group.c punctuation.section.group.begin.c
          push:
            - meta_content_scope: meta.group.c
            - match: '\)'
              scope: meta.group.c punctuation.section.group.end.c
              pop: true
            - include: numbers
            - include: strings
            - match: \b(get|put)\b
              scope: variable.parameter.c
            - match: ','
              scope: punctuation.separator.c
            - match: '='
              scope: keyword.operator.assignment.c
        - match: '\b(appdomain|deprecated|dllimport|dllexport|jintrinsic|naked|noalias|noinline|noreturn|nothrow|novtable|process|restrict|safebuffers|selectany|thread)\b'
          scope: constant.other.c

  keywords-parens:
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.word.c
        2: meta.group.c punctuation.section.group.begin.c
      push:
        - meta_content_scope: meta.group.c
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions

  typedef:
    - match: \btypedef\b
      scope: storage.type.c
      push:
        - match: ({{identifier}})?\s*(?=;)
          captures:
            1: entity.name.type.typedef.c
          pop: true
        - match: \b(struct)\s+({{identifier}})
          captures:
            1: storage.type.c
        - include: expressions

  function-call:
    - match: (?={{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.c
        - include: c99
        - match: '{{identifier}}'
          scope: variable.function.c
        - match: '\('
          scope: meta.group.c punctuation.section.group.begin.c
          set:
            - meta_content_scope: meta.function-call.c meta.group.c
            - match : \)
              scope: meta.function-call.c meta.group.c punctuation.section.group.end.c
              pop: true
            - include: expressions

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  ## Preprocessor for global

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: incomplete-inc
    - include: preprocessor-macro-define
    - include: pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-global:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.section.block.begin.c
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.section.block.end.c
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.c
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.section.block.begin.c
      set: preprocessor-block-if-branch-statements
    - include: negated-block
    - include: statements

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.c
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.section.block.end.c
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
      pop: true
    - match: \}
      scope: punctuation.section.block.end.c
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.c
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.c
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.c keyword.control.import.define.c
      push:
        - meta_content_scope: meta.preprocessor.macro.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.c
          set:
            - match: '\('
              scope: punctuation.section.group.begin.c
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.c
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.c meta.group.c
    - match: '{{identifier}}'
      scope: variable.parameter.c
    - match: \)
      scope: punctuation.section.group.end.c
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.c
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.c
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.c
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.c
          captures:
            1: punctuation.definition.comment.c
            2: punctuation.definition.comment.c
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.c
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c
    - match: (/\*).*(\*/)
      scope: comment.block.c
      captures:
        1: punctuation.definition.comment.c
        2: punctuation.definition.comment.c
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.c

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.c
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.c
    - match: '\}'
      scope: punctuation.section.block.end.c
    - include: expressions

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|line|pragma|undef))\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.c
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.c
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.c
      push:
        - meta_scope: meta.preprocessor.diagnostic.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.c
    - match: ^\s*(#\s*(?:include|import))\b\s+
      captures:
        1: keyword.control.import.include.c
      push:
        - meta_scope: meta.preprocessor.include.c
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '"'
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.double.include.c
            - match: '"'
              scope: punctuation.definition.string.end.c
              pop: true
        - match: <
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.other.lt-gt.include.c
            - match: ">"
              scope: punctuation.definition.string.end.c
              pop: true
